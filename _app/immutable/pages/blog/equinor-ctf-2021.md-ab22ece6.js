import{S as Wl,i as Xl,s as Yl,C as jo,w as Nl,x as Ql,y as Zl,z as Jl,A as bl,f as ac,t as nc,B as sc,Y as _l,l as o,r as t,a as u,m as p,n as l,u as e,h as s,c as k,p as i,G as ml,b as r,J as n,E as tc}from"../../chunks/index-2b5eadba.js";import{L as ec}from"../../chunks/layout-4590ce8c.js";import"../../chunks/utils-e126d158.js";function oc(Aa){let d,q,A,C,f,O,pa,w,la,Xs,Za,Ys,Ns,Qs,Ja,Zs,Js,Da,at,an,nt,st,za,tt,F,et,Zn,Sa,ot,Jn,ca,yl=`<code class="language-sh">$ curl -i http://io.ept.gg:30071
HTTP/1.1 200 OK
Date: Sun, 31 Oct 2021 19:01:49 GMT
Server: Apache/2.4.50 (Unix)
Last-Modified: Mon, 11 Jun 2007 18:53:14 GMT
ETag: &quot;2d-432a5e4a73a80&quot;
Accept-Ranges: bytes
Content-Length: 45
Content-Type: text/html

&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code>`,as,h,pt,H,lt,ct,nn,rt,it,sn,ut,kt,tn,dt,ft,en,ht,xt,on,bt,_t,pn,mt,wt,ns,D,yt,ln,vt,gt,cn,Et,Pt,ss,ra,vl=`<code class="language-sh">$ curl --path-as-is -g &#39;http://io.ept.gg:30071/cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/opt/flag&#39;
EPT&#123;we&#39;ve_got_a_blackhawk_down_we&#39;ve_got_a_blackhawk_down_i_mean_apache&#125;</code>`,ts,ia,Ct,rn,Ot,es,ua,Ra,Tt,os,y,un,qt,At,kn,Dt,zt,dn,St,Rt,La,Lt,U,Ft,ps,Y,Ht,fn,Ut,$t,ls,ka,gl=`<code class="language-shell">$ <span class="token function">file</span> baby2
baby2: ELF <span class="token number">64</span>-bit LSB shared object, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>b9f51ccb036ad488285d75900e8dbba1e69e09f2, <span class="token keyword">for</span> GNU/Linux <span class="token number">3.2</span>.0, not stripped</code>`,cs,Fa,It,rs,da,El=`<code class="language-shell">$ <span class="token function">chmod</span> +x baby2
$ ./baby2
Enter the flag: EPT<span class="token punctuation">&#123;</span>flag_pl0x<span class="token punctuation">&#125;</span>
Sorry, flag is not correct :/</code>`,is,Ha,Kt,us,fa,Pl=`<code class="language-c">undefined8 <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> sVar2<span class="token punctuation">;</span>
  <span class="token keyword">long</span> in_FS_OFFSET<span class="token punctuation">;</span>
  <span class="token keyword">char</span> local_48 <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> local_10<span class="token punctuation">;</span>

  local_10 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>in_FS_OFFSET <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"Enter the flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>local_48<span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sVar2 <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>local_48<span class="token punctuation">,</span><span class="token string">"&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  local_48<span class="token punctuation">[</span>sVar2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  iVar1 <span class="token operator">=</span> <span class="token function">checkFlag</span><span class="token punctuation">(</span>local_48<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Sorry, flag is not correct :/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Well done, that is correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>local_10 <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>in_FS_OFFSET <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">/* WARNING: Subroutine does not return */</span>
    <span class="token function">__stack_chk_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ks,Ua,Mt,ds,ha,Cl=`<code class="language-c">undefined8 <span class="token function">checkFlag</span><span class="token punctuation">(</span><span class="token keyword">long</span> param_1<span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>
  <span class="token class-name">size_t</span> sVar1<span class="token punctuation">;</span>
  uint local_10<span class="token punctuation">;</span>

  sVar1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  local_10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span> true <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sVar1 <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>local_10 <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10 <span class="token operator">>></span> <span class="token number">0x1f</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10 <span class="token operator">>></span> <span class="token number">0x1f</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x37</span><span class="token punctuation">)</span> <span class="token operator">!=</span> flag<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>local_10 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>byte <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token operator">!=</span> flag<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>local_10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    local_10 <span class="token operator">=</span> local_10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fs,m,Bt,hn,Vt,jt,xn,Gt,Wt,bn,Xt,Yt,$a,Go,hs,N,Nt,_n,Qt,Zt,xs,xa,Ol=`<code class="language-python">c <span class="token operator">=</span> <span class="token string">"5667474c6b07616867584c43765f4c5a23072307230723077d166e"</span>
c <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    char <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>char<span class="token operator">^</span><span class="token number">0x37</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>char<span class="token operator">^</span><span class="token number">0x13</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment"># EPT&#123;x0r_to_teh_m00000000n!&#125;</span></code>`,bs,ba,Jt,mn,ae,_s,_a,Ia,ne,ms,z,wn,se,te,yn,ee,oe,Q,pe,$,le,ce,I,re,ws,v,ie,vn,ue,ke,gn,de,fe,En,he,xe,ys,ma,Tl=`<code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> randprime<span class="token punctuation">,</span> nextprime<span class="token punctuation">,</span> invert

p <span class="token operator">=</span> randprime<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">1023</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">1024</span><span class="token punctuation">)</span>
q <span class="token operator">=</span> nextprime<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
n <span class="token operator">=</span> p <span class="token operator">*</span> q
e <span class="token operator">=</span> <span class="token number">65537</span>
phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span>
key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span>
rsa <span class="token operator">=</span> PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,vs,wa,ql=`<code class="language-undefined">13170168669036673658789415835821860466913191064101534501779274940690742604281448647173671946400157617199838272310601920602142822774113607705996734952326957290215951537099625639427739047605224303952391610020730760816940205220160216771511419133822833718461981026872830323755731912443015969055035169814519489784526129811052288823469079931979611710076056973923037676007513769049838507897490490814829478688852449121000733730837518239278607078752774705826529888903312298568894804438251828413144707077871047124974876546688478973141243880671642440976847597210524941636796956020071417167383875898209056473829391281999028768027
b&#39;$\xCD\0=\xD8\xE7&quot;w\x92\xF4\xD4_D\xE4\xBA\ve\xC3\x07\xD9/;\xCFD\xE4UE\xCB\x81\xFB\xD8\xE7\x98\xA1w\xC9#\x84\xCFV\xF6\x8AZ\xAD\xEE+Z\xB3Kp\xD3]1\xB9l\xA6R\xA0uK\xBEbtY\xE3Y\xDAn\x99\x8D5&#125;\xBAi\xD2ss&amp;\xB4h:U\xE4\xF8\b\xFC)\xFEP\f\xA8tq\xD0Y\xD1\x81\xD5\xA2P\xCF\xCD\xEE\xB9X&lt;1\xAA\xCB\x89\x88\xABj\xFC\xEC:\xC11\xF3\xC5\xB4&quot;\xA5jy\x9F\x8C\xA0r\xB8\xBCu\x07\xDA\xA3\xEBt\\w\xA7\xC4x\xE6G\xF3\xC3\x84\xC0U22\xA3a\x80S\x7F&gt;&#125;\xE9\xCD\x97\xE6\x8E\xF8\xF5\x88\x97\xAB\x1B\x1B\xBE7&#39;\x90P\xBC&#39; \xF2.\xCE\x89ua\xF6#3PU\xB3\xE5x\xFD\xBD\xF0\x86\xD8U\xD2m\xF8!\xC7\x99e\xDB\xEB\x86\xF4\x833&gt;\xC0\xA2\xDCk\x94\xD3\xBC-\xCC\xB6 \x96\xC4C&amp;\xAF\xCB\xB8.\xCEp&#39;</code>`,gs,_,be,Pn,_e,me,Cn,we,ye,On,ve,ge,Tn,Ee,Pe,Es,x,Ce,qn,Oe,Te,An,qe,Ae,Dn,De,ze,zn,Se,Re,Sn,Le,Fe,Ps,ya,Al=`<code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> randprime<span class="token punctuation">,</span> nextprime<span class="token punctuation">,</span> invert
<span class="token keyword">import</span> gmpy2
<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> mpz

e <span class="token operator">=</span> <span class="token number">65537</span>
n <span class="token operator">=</span> mpz<span class="token punctuation">(</span><span class="token number">13170168669036673658789415835821860466913191064101534501779274940690742604281448647173671946400157617199838272310601920602142822774113607705996734952326957290215951537099625639427739047605224303952391610020730760816940205220160216771511419133822833718461981026872830323755731912443015969055035169814519489784526129811052288823469079931979611710076056973923037676007513769049838507897490490814829478688852449121000733730837518239278607078752774705826529888903312298568894804438251828413144707077871047124974876546688478973141243880671642440976847597210524941636796956020071417167383875898209056473829391281999028768027</span><span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string">b'$\xCD\0=\xD8\xE7"w\x92\xF4\xD4_D\xE4\xBA\ve\xC3\x07\xD9/;\xCFD\xE4UE\xCB\x81\xFB\xD8\xE7\x98\xA1w\xC9#\x84\xCFV\xF6\x8AZ\xAD\xEE+Z\xB3Kp\xD3]1\xB9l\xA6R\xA0uK\xBEbtY\xE3Y\xDAn\x99\x8D5&#125;\xBAi\xD2ss&amp;\xB4h:U\xE4\xF8\b\xFC)\xFEP\f\xA8tq\xD0Y\xD1\x81\xD5\xA2P\xCF\xCD\xEE\xB9X&lt;1\xAA\xCB\x89\x88\xABj\xFC\xEC:\xC11\xF3\xC5\xB4"\xA5jy\x9F\x8C\xA0r\xB8\xBCu\x07\xDA\xA3\xEBt\\w\xA7\xC4x\xE6G\xF3\xC3\x84\xC0U22\xA3a\x80S\x7F>&#125;\xE9\xCD\x97\xE6\x8E\xF8\xF5\x88\x97\xAB\x1B\x1B\xBE7'\x90P\xBC' \xF2.\xCE\x89ua\xF6#3PU\xB3\xE5x\xFD\xBD\xF0\x86\xD8U\xD2m\xF8!\xC7\x99e\xDB\xEB\x86\xF4\x833>\xC0\xA2\xDCk\x94\xD3\xBC-\xCC\xB6 \x96\xC4C&amp;\xAF\xCB\xB8.\xCEp'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

estimate <span class="token operator">=</span> mpz<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
prime <span class="token operator">=</span> estimate
<span class="token keyword">print</span><span class="token punctuation">(</span>estimate<span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    prime <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> n<span class="token operator">%</span>prime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
p <span class="token operator">=</span> mpz<span class="token punctuation">(</span>prime<span class="token punctuation">)</span>
q <span class="token operator">=</span> mpz<span class="token punctuation">(</span>n <span class="token operator">//</span> p<span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>p<span class="token operator">*</span>q <span class="token operator">==</span> n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p: "</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q: "</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>
phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span>
key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
rsa <span class="token operator">=</span> PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># EPT&#123;5qrt_b3_sc4ry_owo&#125;</span></code>`,Cs,va,He,Rn,Ue,Os,ga,Ka,$e,Ts,g,Ln,Ie,Ke,Fn,Me,Be,Ma,Ve,Ba,Wo,je,Va,Ge,K,We,qs,E,Xe,Hn,Ye,Ne,Un,Qe,Ze,$n,Je,ao,As,Ea,Dl='<code class="language-undefined">This is a zip file that you will never be able to crack, the password has 39 characters. Go ahead and use johns/hashcats etc., if you have 1000 years to spare :)</code>',Ds,Z,no,In,so,to,zs,S,eo,Kn,oo,po,Mn,lo,co,Ss,T,ro,Bn,io,uo,M,ko,fo,B,ho,Rs,ja,xo,Ls,Pa,zl=`<code class="language-shell">$ <span class="token function">ls</span>
hint.txt
$ <span class="token function">cat</span> hint.txt
This is a <span class="token function">zip</span> <span class="token function">file</span> that you will never be able to crack, the password has <span class="token number">39</span> characters. Go ahead and use johns/hashcats etc., <span class="token keyword">if</span> you have <span class="token number">1000</span> years to spare <span class="token builtin class-name">:</span><span class="token punctuation">)</span>
$ 7z a new.zip *</code>`,Fs,Ga,bo,Hs,Ca,Sl=`<code class="language-shell">$ <span class="token function">ls</span>
pkcrack challenge.zip new.zip
$ ./pkcrack -C challenge.zip -c <span class="token string">"hint.txt"</span> -P new.zip -p <span class="token string">"hint.txt"</span> -d decrypted.zip -a</code>`,Us,V,_o,Vn,mo,wo,jn,yo,$s,Oa,Wa,vo,Is,R,Gn,go,Eo,Wn,Po,Co,J,Oo,j,To,qo,G,Ao,Ks,aa,Do,W,zo,So,Ms,Ta,Ro,Xn,Lo;return{c(){d=o("p"),q=t("Heres a small writeup on the challenges I solved for Equinor CTF 2021 with team Corax :) I was quite busy the weekend of this CTF and didn\u2019t get to really enjoy the CTF throughly as much as I wanted. The challenges were pretty fun to work on together with the team nonetheless!"),A=u(),C=o("h2"),f=o("a"),O=t("Beginner/AH-64"),pa=u(),w=o("blockquote"),la=o("p"),Xs=t("Author: "),Za=o("code"),Ys=t("LOLASL"),Ns=t(`
33 solves / 335 points`),Qs=u(),Ja=o("p"),Zs=t("Category: Web"),Js=u(),Da=o("p"),at=t("Super Six One, go to UHF secure. I\u2019ve got some bad news. > We see vulnerabilites like it is 2001. Tango located in "),an=o("code"),nt=t("/opt/flag"),st=u(),za=o("p"),tt=t("Site: "),F=o("a"),et=t("AH-64"),Zn=u(),Sa=o("p"),ot=t("Since this is a web challenge, I begin by navigating to the site and sees a blank page with a text saying: \u201CIt works!\u201D"),Jn=u(),ca=o("pre"),as=u(),h=o("p"),pt=t("However looking at the request headers, we see that the website runs on the apache server 2.4.50, which we know is still vulnerable to a Path-Traversal attack due to an error in how URL encoded paths are normalized.("),H=o("a"),lt=t("https://httpd.apache.org/security/vulnerabilities_24.html"),ct=t("). Apache version 2.4.50 is supposed to be a fix of 2.4.49 where "),nn=o("code"),rt=t("%2e%2e"),it=t(" was encoded to "),sn=o("code"),ut=t(".."),kt=t(", but the possibility of by double encoding was missed when one is not in the root directory: "),tn=o("code"),dt=t("%%32%65"),ft=t(" -> "),en=o("code"),ht=t("%2e"),xt=t(" -> "),on=o("code"),bt=t("."),_t=t(". Utilizing this fact, we can access arbitrary files outside the site root directory by going to the previous directories through "),pn=o("code"),mt=t("../"),wt=t("."),ns=u(),D=o("p"),yt=t("Knowing this, I started to fuzz for available directories and "),ln=o("code"),vt=t("cgi-bin"),gt=t(" was found, letting us easiliy curl for the flag at "),cn=o("code"),Et=t("/opt/flag"),Pt=t(":"),ss=u(),ra=o("pre"),ts=u(),ia=o("p"),Ct=t("The flag is "),rn=o("code"),Ot=t("EPT{we've_got_a_blackhawk_down_we've_got_a_blackhawk_down_i_mean_apache}"),es=u(),ua=o("h2"),Ra=o("a"),Tt=t("Beginner/baby2"),os=u(),y=o("blockquote"),un=o("p"),qt=t(`Author: nordbo
25 solves / 384 points`),At=u(),kn=o("p"),Dt=t("Category: Reversing"),zt=u(),dn=o("p"),St=t("Can you figure it out?"),Rt=u(),La=o("p"),Lt=t(`Downloads
`),U=o("a"),Ft=t("baby2"),ps=u(),Y=o("p"),Ht=t("Downloading the binary file "),fn=o("code"),Ut=t("baby2"),$t=t(" we see that it is an ELF binary file."),ls=u(),ka=o("pre"),cs=u(),Fa=o("p"),It=t("Running the program, we can see that it is taking in a user input and checking if the input given is correct, returning either correct or incorrect."),rs=u(),da=o("pre"),is=u(),Ha=o("p"),Kt=t("After testing the program out, as any reversing challenges, I quickly boot up ghidra in hopes of disassembling the binary, making it easier to see what is happening in the background. As this is a beginner challenge, we get to easily see the disassembled code:"),us=u(),fa=o("pre"),ks=u(),Ua=o("p"),Mt=t("Checking out the main function we see that the main logic is handled in line 15, seeing if the function checkFlag is returning true or false:"),ds=u(),ha=o("pre"),fs=u(),m=o("p"),Bt=t("Upon further inspection, we see that the user input is being XOR\u2019ed with a hardcoded value (either "),hn=o("code"),Vt=t("0x37"),jt=t(" or "),xn=o("code"),Gt=t("0x13"),Wt=t(") depending on the index of the input, and checks if it is equals to the variable "),bn=o("code"),Xt=t("flag"),Yt=t(`:
`),$a=o("img"),hs=u(),N=o("p"),Nt=t("Since the inverse of XOR is XOR itself, we can extract the "),_n=o("code"),Qt=t("flag"),Zt=t(" value and write a script to XOR it with the same values as above in reverse:"),xs=u(),xa=o("pre"),bs=u(),ba=o("p"),Jt=t("Running the python script above gives us the flag: "),mn=o("code"),ae=t("EPT{x0r_to_teh_m00000000n!}"),_s=u(),_a=o("h2"),Ia=o("a"),ne=t("Crypto/Really Solid Algebra"),ms=u(),z=o("blockquote"),wn=o("p"),se=t(`Author: null
24 solves / 390 points`),te=u(),yn=o("p"),ee=t("Using all the latest math and crypto libraries, this new Really Solid Algebra system should be practically uncrackable!"),oe=u(),Q=o("p"),pe=t(`Downloads
`),$=o("a"),le=t("rsa.py"),ce=t(" > "),I=o("a"),re=t("output.log"),ws=u(),v=o("p"),ie=t("Opening "),vn=o("code"),ue=t("rsa.py"),ke=t(" we are given the encryption code, and the "),gn=o("code"),de=t("output.log"),fe=t(" contains the modulus "),En=o("code"),he=t("n"),xe=t(" and the ciphertext:"),ys=u(),ma=o("pre"),vs=u(),wa=o("pre"),gs=u(),_=o("p"),be=t("Observing the code, we can first see that there\u2019s something strange with the prime generation. The problem is that it doesn\u2019t generate two independent random primes as an RSA prime generation should. Instead it generates an independent random prime number "),Pn=o("code"),_e=t("p"),me=t(" (from "),Cn=o("code"),we=t("2^1023"),ye=t(" to "),On=o("code"),ve=t("2^1024"),ge=t(" bits), then a the next prime q which is very close to p: "),Tn=o("code"),Ee=t("q = nextprime(p)"),Pe=t(" (meaning that q is generated dependent on p)."),Es=u(),x=o("p"),Ce=t("Looking at how "),qn=o("code"),Oe=t("p"),Te=t(" and "),An=o("code"),qe=t("q"),Ae=t(" is close to each other we can approximate a prime by taking the sqrt of "),Dn=o("code"),De=t("n"),ze=t(". Knowing the approximate p, and that it is not too far off the exact value of p, we can do a linear search for p by checking when the approximate p divides N (getting the exact prime factor of N), thus we can find both primes "),zn=o("code"),Se=t("p"),Re=t(" and "),Sn=o("code"),Le=t("q"),Fe=t("."),Ps=u(),ya=o("pre"),Cs=u(),va=o("p"),He=t("Running the script above gives us the flag: "),Rn=o("code"),Ue=t("EPT{5qrt_b3_sc4ry_owo}"),Os=u(),ga=o("h2"),Ka=o("a"),$e=t("Misc/Uncrackable zip"),Ts=u(),g=o("blockquote"),Ln=o("p"),Ie=t(`Author: vcpo
15 solves / 439 points`),Ke=u(),Fn=o("p"),Me=t("Take a zip of my uncrackable drink."),Be=u(),Ma=o("p"),Ve=t(`Description
`),Ba=o("img"),je=u(),Va=o("p"),Ge=t(`Downloads
`),K=o("a"),We=t("challenge.zip"),qs=u(),E=o("p"),Xe=t("Looking at the given image above, we can see that the zip file "),Hn=o("code"),Ye=t("challenge.zip"),Ne=t(" contains 2 files: "),Un=o("code"),Qe=t("flag.txt"),Ze=t(" and "),$n=o("code"),Je=t("hint.txt"),ao=t(" (which we know the content of):"),As=u(),Ea=o("pre"),Ds=u(),Z=o("p"),no=t("Downloading the zip file "),In=o("code"),so=t("challenge.zip"),to=t(" and trying to unzip it prompts us for a password, which we know isn\u2019t bruteforce able as it will take to long."),zs=u(),S=o("p"),eo=t("After a quick google search we see that there\u2019s something called a "),Kn=o("code"),oo=t("known plaintext attack"),po=t(", which means that one can break the cipher if one knows a part of the encrypted data. (which in this case, we do with "),Mn=o("code"),lo=t("hint.txt"),co=t(")"),Ss=u(),T=o("p"),ro=t("Luckily someone has already implemented the algorithm that was developed by Eli Biham and Paul Kocher on a "),Bn=o("code"),io=t("known plaintext attack"),uo=t(" on zip files described in "),M=o("a"),ko=t("this paper (Postscript, 80k)"),fo=t(` (I didn\u2019t read this however).
The program can be found here: `),B=o("a"),ho=t("https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),Rs=u(),ja=o("p"),xo=t("With the implementation in box, solving this challenge has become just as easy as running the program:"),Ls=u(),Pa=o("pre"),Fs=u(),Ga=o("p"),bo=t("and"),Hs=u(),Ca=o("pre"),Us=u(),V=o("p"),_o=t("Opening the decrypted zip file "),Vn=o("code"),mo=t("decrypted.zip"),wo=t(" and we get the flag: "),jn=o("code"),yo=t("EPT{d1d_y0u_gu3$$_th3_p4$$w0rd_0r_pl41nt3xt_cr4ck_1t?}"),$s=u(),Oa=o("h2"),Wa=o("a"),vo=t("Crypto/Arbitrary Encoding System"),Is=u(),R=o("blockquote"),Gn=o("p"),go=t(`Author: null
20 solves / 413 points`),Eo=u(),Wn=o("p"),Po=t("I heard that all the cool kids down the street had switched to this new cipher. Think it was called Arbitrary Encoding System or something\u2026"),Co=u(),J=o("p"),Oo=t(`Downloads
`),j=o("a"),To=t("aes.py"),qo=t(" > "),G=o("a"),Ao=t("flag.png.enc"),Ks=u(),aa=o("p"),Do=t("Read this writeup for some good shit explanations: "),W=o("a"),zo=t("https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),So=t(". Thank you!"),Ms=u(),Ta=o("p"),Ro=t("The flag is: "),Xn=o("code"),Lo=t("EPT{mode_of_operation_is_important}"),this.h()},l(a){d=p(a,"P",{});var c=l(d);q=e(c,"Heres a small writeup on the challenges I solved for Equinor CTF 2021 with team Corax :) I was quite busy the weekend of this CTF and didn\u2019t get to really enjoy the CTF throughly as much as I wanted. The challenges were pretty fun to work on together with the team nonetheless!"),c.forEach(s),A=k(a),C=p(a,"H2",{id:!0});var Xo=l(C);f=p(Xo,"A",{href:!0});var Yo=l(f);O=e(Yo,"Beginner/AH-64"),Yo.forEach(s),Xo.forEach(s),pa=k(a),w=p(a,"BLOCKQUOTE",{});var na=l(w);la=p(na,"P",{});var Bs=l(la);Xs=e(Bs,"Author: "),Za=p(Bs,"CODE",{});var No=l(Za);Ys=e(No,"LOLASL"),No.forEach(s),Ns=e(Bs,`
33 solves / 335 points`),Bs.forEach(s),Qs=k(na),Ja=p(na,"P",{});var Qo=l(Ja);Zs=e(Qo,"Category: Web"),Qo.forEach(s),Js=k(na),Da=p(na,"P",{});var Fo=l(Da);at=e(Fo,"Super Six One, go to UHF secure. I\u2019ve got some bad news. > We see vulnerabilites like it is 2001. Tango located in "),an=p(Fo,"CODE",{});var Zo=l(an);nt=e(Zo,"/opt/flag"),Zo.forEach(s),Fo.forEach(s),st=k(na),za=p(na,"P",{});var Ho=l(za);tt=e(Ho,"Site: "),F=p(Ho,"A",{href:!0,rel:!0,class:!0,target:!0});var Jo=l(F);et=e(Jo,"AH-64"),Jo.forEach(s),Ho.forEach(s),na.forEach(s),Zn=k(a),Sa=p(a,"P",{});var ap=l(Sa);ot=e(ap,"Since this is a web challenge, I begin by navigating to the site and sees a blank page with a text saying: \u201CIt works!\u201D"),ap.forEach(s),Jn=k(a),ca=p(a,"PRE",{class:!0});var Rl=l(ca);Rl.forEach(s),as=k(a),h=p(a,"P",{});var b=l(h);pt=e(b,"However looking at the request headers, we see that the website runs on the apache server 2.4.50, which we know is still vulnerable to a Path-Traversal attack due to an error in how URL encoded paths are normalized.("),H=p(b,"A",{href:!0,rel:!0,class:!0,target:!0});var np=l(H);lt=e(np,"https://httpd.apache.org/security/vulnerabilities_24.html"),np.forEach(s),ct=e(b,"). Apache version 2.4.50 is supposed to be a fix of 2.4.49 where "),nn=p(b,"CODE",{});var sp=l(nn);rt=e(sp,"%2e%2e"),sp.forEach(s),it=e(b," was encoded to "),sn=p(b,"CODE",{});var tp=l(sn);ut=e(tp,".."),tp.forEach(s),kt=e(b,", but the possibility of by double encoding was missed when one is not in the root directory: "),tn=p(b,"CODE",{});var ep=l(tn);dt=e(ep,"%%32%65"),ep.forEach(s),ft=e(b," -> "),en=p(b,"CODE",{});var op=l(en);ht=e(op,"%2e"),op.forEach(s),xt=e(b," -> "),on=p(b,"CODE",{});var pp=l(on);bt=e(pp,"."),pp.forEach(s),_t=e(b,". Utilizing this fact, we can access arbitrary files outside the site root directory by going to the previous directories through "),pn=p(b,"CODE",{});var lp=l(pn);mt=e(lp,"../"),lp.forEach(s),wt=e(b,"."),b.forEach(s),ns=k(a),D=p(a,"P",{});var Xa=l(D);yt=e(Xa,"Knowing this, I started to fuzz for available directories and "),ln=p(Xa,"CODE",{});var cp=l(ln);vt=e(cp,"cgi-bin"),cp.forEach(s),gt=e(Xa," was found, letting us easiliy curl for the flag at "),cn=p(Xa,"CODE",{});var rp=l(cn);Et=e(rp,"/opt/flag"),rp.forEach(s),Pt=e(Xa,":"),Xa.forEach(s),ss=k(a),ra=p(a,"PRE",{class:!0});var Ll=l(ra);Ll.forEach(s),ts=k(a),ia=p(a,"P",{});var Uo=l(ia);Ct=e(Uo,"The flag is "),rn=p(Uo,"CODE",{});var ip=l(rn);Ot=e(ip,"EPT{we've_got_a_blackhawk_down_we've_got_a_blackhawk_down_i_mean_apache}"),ip.forEach(s),Uo.forEach(s),es=k(a),ua=p(a,"H2",{id:!0});var up=l(ua);Ra=p(up,"A",{href:!0});var kp=l(Ra);Tt=e(kp,"Beginner/baby2"),kp.forEach(s),up.forEach(s),os=k(a),y=p(a,"BLOCKQUOTE",{});var sa=l(y);un=p(sa,"P",{});var dp=l(un);qt=e(dp,`Author: nordbo
25 solves / 384 points`),dp.forEach(s),At=k(sa),kn=p(sa,"P",{});var fp=l(kn);Dt=e(fp,"Category: Reversing"),fp.forEach(s),zt=k(sa),dn=p(sa,"P",{});var hp=l(dn);St=e(hp,"Can you figure it out?"),hp.forEach(s),Rt=k(sa),La=p(sa,"P",{});var $o=l(La);Lt=e($o,`Downloads
`),U=p($o,"A",{href:!0,rel:!0,class:!0,target:!0});var xp=l(U);Ft=e(xp,"baby2"),xp.forEach(s),$o.forEach(s),sa.forEach(s),ps=k(a),Y=p(a,"P",{});var Vs=l(Y);Ht=e(Vs,"Downloading the binary file "),fn=p(Vs,"CODE",{});var bp=l(fn);Ut=e(bp,"baby2"),bp.forEach(s),$t=e(Vs," we see that it is an ELF binary file."),Vs.forEach(s),ls=k(a),ka=p(a,"PRE",{class:!0});var Fl=l(ka);Fl.forEach(s),cs=k(a),Fa=p(a,"P",{});var _p=l(Fa);It=e(_p,"Running the program, we can see that it is taking in a user input and checking if the input given is correct, returning either correct or incorrect."),_p.forEach(s),rs=k(a),da=p(a,"PRE",{class:!0});var Hl=l(da);Hl.forEach(s),is=k(a),Ha=p(a,"P",{});var mp=l(Ha);Kt=e(mp,"After testing the program out, as any reversing challenges, I quickly boot up ghidra in hopes of disassembling the binary, making it easier to see what is happening in the background. As this is a beginner challenge, we get to easily see the disassembled code:"),mp.forEach(s),us=k(a),fa=p(a,"PRE",{class:!0});var Ul=l(fa);Ul.forEach(s),ks=k(a),Ua=p(a,"P",{});var wp=l(Ua);Mt=e(wp,"Checking out the main function we see that the main logic is handled in line 15, seeing if the function checkFlag is returning true or false:"),wp.forEach(s),ds=k(a),ha=p(a,"PRE",{class:!0});var $l=l(ha);$l.forEach(s),fs=k(a),m=p(a,"P",{});var X=l(m);Bt=e(X,"Upon further inspection, we see that the user input is being XOR\u2019ed with a hardcoded value (either "),hn=p(X,"CODE",{});var yp=l(hn);Vt=e(yp,"0x37"),yp.forEach(s),jt=e(X," or "),xn=p(X,"CODE",{});var vp=l(xn);Gt=e(vp,"0x13"),vp.forEach(s),Wt=e(X,") depending on the index of the input, and checks if it is equals to the variable "),bn=p(X,"CODE",{});var gp=l(bn);Xt=e(gp,"flag"),gp.forEach(s),Yt=e(X,`:
`),$a=p(X,"IMG",{src:!0,alt:!0}),X.forEach(s),hs=k(a),N=p(a,"P",{});var js=l(N);Nt=e(js,"Since the inverse of XOR is XOR itself, we can extract the "),_n=p(js,"CODE",{});var Ep=l(_n);Qt=e(Ep,"flag"),Ep.forEach(s),Zt=e(js," value and write a script to XOR it with the same values as above in reverse:"),js.forEach(s),xs=k(a),xa=p(a,"PRE",{class:!0});var Il=l(xa);Il.forEach(s),bs=k(a),ba=p(a,"P",{});var Io=l(ba);Jt=e(Io,"Running the python script above gives us the flag: "),mn=p(Io,"CODE",{});var Pp=l(mn);ae=e(Pp,"EPT{x0r_to_teh_m00000000n!}"),Pp.forEach(s),Io.forEach(s),_s=k(a),_a=p(a,"H2",{id:!0});var Cp=l(_a);Ia=p(Cp,"A",{href:!0});var Op=l(Ia);ne=e(Op,"Crypto/Really Solid Algebra"),Op.forEach(s),Cp.forEach(s),ms=k(a),z=p(a,"BLOCKQUOTE",{});var Ya=l(z);wn=p(Ya,"P",{});var Tp=l(wn);se=e(Tp,`Author: null
24 solves / 390 points`),Tp.forEach(s),te=k(Ya),yn=p(Ya,"P",{});var qp=l(yn);ee=e(qp,"Using all the latest math and crypto libraries, this new Really Solid Algebra system should be practically uncrackable!"),qp.forEach(s),oe=k(Ya),Q=p(Ya,"P",{});var Yn=l(Q);pe=e(Yn,`Downloads
`),$=p(Yn,"A",{href:!0,rel:!0,class:!0,target:!0});var Ap=l($);le=e(Ap,"rsa.py"),Ap.forEach(s),ce=e(Yn," > "),I=p(Yn,"A",{href:!0,rel:!0,class:!0,target:!0});var Dp=l(I);re=e(Dp,"output.log"),Dp.forEach(s),Yn.forEach(s),Ya.forEach(s),ws=k(a),v=p(a,"P",{});var ta=l(v);ie=e(ta,"Opening "),vn=p(ta,"CODE",{});var zp=l(vn);ue=e(zp,"rsa.py"),zp.forEach(s),ke=e(ta," we are given the encryption code, and the "),gn=p(ta,"CODE",{});var Sp=l(gn);de=e(Sp,"output.log"),Sp.forEach(s),fe=e(ta," contains the modulus "),En=p(ta,"CODE",{});var Rp=l(En);he=e(Rp,"n"),Rp.forEach(s),xe=e(ta," and the ciphertext:"),ta.forEach(s),ys=k(a),ma=p(a,"PRE",{class:!0});var Kl=l(ma);Kl.forEach(s),vs=k(a),wa=p(a,"PRE",{class:!0});var Ml=l(wa);Ml.forEach(s),gs=k(a),_=p(a,"P",{});var L=l(_);be=e(L,"Observing the code, we can first see that there\u2019s something strange with the prime generation. The problem is that it doesn\u2019t generate two independent random primes as an RSA prime generation should. Instead it generates an independent random prime number "),Pn=p(L,"CODE",{});var Lp=l(Pn);_e=e(Lp,"p"),Lp.forEach(s),me=e(L," (from "),Cn=p(L,"CODE",{});var Fp=l(Cn);we=e(Fp,"2^1023"),Fp.forEach(s),ye=e(L," to "),On=p(L,"CODE",{});var Hp=l(On);ve=e(Hp,"2^1024"),Hp.forEach(s),ge=e(L," bits), then a the next prime q which is very close to p: "),Tn=p(L,"CODE",{});var Up=l(Tn);Ee=e(Up,"q = nextprime(p)"),Up.forEach(s),Pe=e(L," (meaning that q is generated dependent on p)."),L.forEach(s),Es=k(a),x=p(a,"P",{});var P=l(x);Ce=e(P,"Looking at how "),qn=p(P,"CODE",{});var $p=l(qn);Oe=e($p,"p"),$p.forEach(s),Te=e(P," and "),An=p(P,"CODE",{});var Ip=l(An);qe=e(Ip,"q"),Ip.forEach(s),Ae=e(P," is close to each other we can approximate a prime by taking the sqrt of "),Dn=p(P,"CODE",{});var Kp=l(Dn);De=e(Kp,"n"),Kp.forEach(s),ze=e(P,". Knowing the approximate p, and that it is not too far off the exact value of p, we can do a linear search for p by checking when the approximate p divides N (getting the exact prime factor of N), thus we can find both primes "),zn=p(P,"CODE",{});var Mp=l(zn);Se=e(Mp,"p"),Mp.forEach(s),Re=e(P," and "),Sn=p(P,"CODE",{});var Bp=l(Sn);Le=e(Bp,"q"),Bp.forEach(s),Fe=e(P,"."),P.forEach(s),Ps=k(a),ya=p(a,"PRE",{class:!0});var Bl=l(ya);Bl.forEach(s),Cs=k(a),va=p(a,"P",{});var Ko=l(va);He=e(Ko,"Running the script above gives us the flag: "),Rn=p(Ko,"CODE",{});var Vp=l(Rn);Ue=e(Vp,"EPT{5qrt_b3_sc4ry_owo}"),Vp.forEach(s),Ko.forEach(s),Os=k(a),ga=p(a,"H2",{id:!0});var jp=l(ga);Ka=p(jp,"A",{href:!0});var Gp=l(Ka);$e=e(Gp,"Misc/Uncrackable zip"),Gp.forEach(s),jp.forEach(s),Ts=k(a),g=p(a,"BLOCKQUOTE",{});var ea=l(g);Ln=p(ea,"P",{});var Wp=l(Ln);Ie=e(Wp,`Author: vcpo
15 solves / 439 points`),Wp.forEach(s),Ke=k(ea),Fn=p(ea,"P",{});var Xp=l(Fn);Me=e(Xp,"Take a zip of my uncrackable drink."),Xp.forEach(s),Be=k(ea),Ma=p(ea,"P",{});var Mo=l(Ma);Ve=e(Mo,`Description
`),Ba=p(Mo,"IMG",{src:!0,alt:!0}),Mo.forEach(s),je=k(ea),Va=p(ea,"P",{});var Bo=l(Va);Ge=e(Bo,`Downloads
`),K=p(Bo,"A",{href:!0,rel:!0,class:!0,target:!0});var Yp=l(K);We=e(Yp,"challenge.zip"),Yp.forEach(s),Bo.forEach(s),ea.forEach(s),qs=k(a),E=p(a,"P",{});var oa=l(E);Xe=e(oa,"Looking at the given image above, we can see that the zip file "),Hn=p(oa,"CODE",{});var Np=l(Hn);Ye=e(Np,"challenge.zip"),Np.forEach(s),Ne=e(oa," contains 2 files: "),Un=p(oa,"CODE",{});var Qp=l(Un);Qe=e(Qp,"flag.txt"),Qp.forEach(s),Ze=e(oa," and "),$n=p(oa,"CODE",{});var Zp=l($n);Je=e(Zp,"hint.txt"),Zp.forEach(s),ao=e(oa," (which we know the content of):"),oa.forEach(s),As=k(a),Ea=p(a,"PRE",{class:!0});var Vl=l(Ea);Vl.forEach(s),Ds=k(a),Z=p(a,"P",{});var Gs=l(Z);no=e(Gs,"Downloading the zip file "),In=p(Gs,"CODE",{});var Jp=l(In);so=e(Jp,"challenge.zip"),Jp.forEach(s),to=e(Gs," and trying to unzip it prompts us for a password, which we know isn\u2019t bruteforce able as it will take to long."),Gs.forEach(s),zs=k(a),S=p(a,"P",{});var Na=l(S);eo=e(Na,"After a quick google search we see that there\u2019s something called a "),Kn=p(Na,"CODE",{});var al=l(Kn);oo=e(al,"known plaintext attack"),al.forEach(s),po=e(Na,", which means that one can break the cipher if one knows a part of the encrypted data. (which in this case, we do with "),Mn=p(Na,"CODE",{});var nl=l(Mn);lo=e(nl,"hint.txt"),nl.forEach(s),co=e(Na,")"),Na.forEach(s),Ss=k(a),T=p(a,"P",{});var qa=l(T);ro=e(qa,"Luckily someone has already implemented the algorithm that was developed by Eli Biham and Paul Kocher on a "),Bn=p(qa,"CODE",{});var sl=l(Bn);io=e(sl,"known plaintext attack"),sl.forEach(s),uo=e(qa," on zip files described in "),M=p(qa,"A",{href:!0,class:!0,target:!0,rel:!0});var tl=l(M);ko=e(tl,"this paper (Postscript, 80k)"),tl.forEach(s),fo=e(qa,` (I didn\u2019t read this however).
The program can be found here: `),B=p(qa,"A",{href:!0,rel:!0,class:!0,target:!0});var el=l(B);ho=e(el,"https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),el.forEach(s),qa.forEach(s),Rs=k(a),ja=p(a,"P",{});var ol=l(ja);xo=e(ol,"With the implementation in box, solving this challenge has become just as easy as running the program:"),ol.forEach(s),Ls=k(a),Pa=p(a,"PRE",{class:!0});var jl=l(Pa);jl.forEach(s),Fs=k(a),Ga=p(a,"P",{});var pl=l(Ga);bo=e(pl,"and"),pl.forEach(s),Hs=k(a),Ca=p(a,"PRE",{class:!0});var Gl=l(Ca);Gl.forEach(s),Us=k(a),V=p(a,"P",{});var Nn=l(V);_o=e(Nn,"Opening the decrypted zip file "),Vn=p(Nn,"CODE",{});var ll=l(Vn);mo=e(ll,"decrypted.zip"),ll.forEach(s),wo=e(Nn," and we get the flag: "),jn=p(Nn,"CODE",{});var cl=l(jn);yo=e(cl,"EPT{d1d_y0u_gu3$$_th3_p4$$w0rd_0r_pl41nt3xt_cr4ck_1t?}"),cl.forEach(s),Nn.forEach(s),$s=k(a),Oa=p(a,"H2",{id:!0});var rl=l(Oa);Wa=p(rl,"A",{href:!0});var il=l(Wa);vo=e(il,"Crypto/Arbitrary Encoding System"),il.forEach(s),rl.forEach(s),Is=k(a),R=p(a,"BLOCKQUOTE",{});var Qa=l(R);Gn=p(Qa,"P",{});var ul=l(Gn);go=e(ul,`Author: null
20 solves / 413 points`),ul.forEach(s),Eo=k(Qa),Wn=p(Qa,"P",{});var kl=l(Wn);Po=e(kl,"I heard that all the cool kids down the street had switched to this new cipher. Think it was called Arbitrary Encoding System or something\u2026"),kl.forEach(s),Co=k(Qa),J=p(Qa,"P",{});var Qn=l(J);Oo=e(Qn,`Downloads
`),j=p(Qn,"A",{href:!0,rel:!0,class:!0,target:!0});var dl=l(j);To=e(dl,"aes.py"),dl.forEach(s),qo=e(Qn," > "),G=p(Qn,"A",{href:!0,rel:!0,class:!0,target:!0});var fl=l(G);Ao=e(fl,"flag.png.enc"),fl.forEach(s),Qn.forEach(s),Qa.forEach(s),Ks=k(a),aa=p(a,"P",{});var Ws=l(aa);Do=e(Ws,"Read this writeup for some good shit explanations: "),W=p(Ws,"A",{href:!0,rel:!0,class:!0,target:!0});var hl=l(W);zo=e(hl,"https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),hl.forEach(s),So=e(Ws,". Thank you!"),Ws.forEach(s),Ms=k(a),Ta=p(a,"P",{});var Vo=l(Ta);Ro=e(Vo,"The flag is: "),Xn=p(Vo,"CODE",{});var xl=l(Xn);Lo=e(xl,"EPT{mode_of_operation_is_important}"),xl.forEach(s),Vo.forEach(s),this.h()},h(){i(f,"href","#beginnerah-64"),i(C,"id","beginnerah-64"),i(F,"href","http://io.ept.gg:30071/"),i(F,"rel","noopener"),i(F,"class","text-link"),i(F,"target","_blank"),i(ca,"class","language-sh"),i(H,"href","https://httpd.apache.org/security/vulnerabilities_24.html"),i(H,"rel","noopener"),i(H,"class","text-link"),i(H,"target","_blank"),i(ra,"class","language-sh"),i(Ra,"href","#beginnerbaby2"),i(ua,"id","beginnerbaby2"),i(U,"href","https://ctf.equinor.com/uploads?key=a18b515b8e3e405195ec99d8478f7dbfd137e06fdd0e8de64fe2e4eca7df0280%2Fbaby2"),i(U,"rel","noopener"),i(U,"class","text-link"),i(U,"target","_blank"),i(ka,"class","language-shell"),i(da,"class","language-shell"),i(fa,"class","language-c"),i(ha,"class","language-c"),ml($a.src,Go="https://i.imgur.com/rVwbbLO.png")||i($a,"src",Go),i($a,"alt","ghidra flag variable"),i(xa,"class","language-python"),i(Ia,"href","#cryptoreally-solid-algebra"),i(_a,"id","cryptoreally-solid-algebra"),i($,"href","https://ctf.equinor.com/uploads?key=d3f47162a9d3619ec8a0f08c44dc72b0758a312b92e26159430d287e406c409a%2Frsa.py"),i($,"rel","noopener"),i($,"class","text-link"),i($,"target","_blank"),i(I,"href","https://ctf.equinor.com/uploads?key=55221d9f16557f33fa3699169f3b8a1ea78211f4d398ffea5098108f1088a357%2Foutput.log"),i(I,"rel","noopener"),i(I,"class","text-link"),i(I,"target","_blank"),i(ma,"class","language-python"),i(wa,"class","language-undefined"),i(ya,"class","language-python"),i(Ka,"href","#miscuncrackable-zip"),i(ga,"id","miscuncrackable-zip"),ml(Ba.src,Wo="https://i.imgur.com/fyP4l3W.png")||i(Ba,"src",Wo),i(Ba,"alt","uncrackable zip challenge description"),i(K,"href","https://ctf.equinor.com/uploads?key=9a0d3c9318f8e34e36ec516c7a34d92efd86ae56d14d713382444de6d753a18d%2Fchallenge.zip"),i(K,"rel","noopener"),i(K,"class","text-link"),i(K,"target","_blank"),i(Ea,"class","language-undefined"),i(M,"href","ftp://utopia.hacktic.nl/pub/crypto/cracking/pkzip.ps.gz"),i(M,"class","text-link"),i(M,"target","_blank"),i(M,"rel","noopener"),i(B,"href","https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),i(B,"rel","noopener"),i(B,"class","text-link"),i(B,"target","_blank"),i(Pa,"class","language-shell"),i(Ca,"class","language-shell"),i(Wa,"href","#cryptoarbitrary-encoding-system"),i(Oa,"id","cryptoarbitrary-encoding-system"),i(j,"href","https://ctf.equinor.com/uploads?key=4012c19f43295280bc5eb2a324b824d16910a9d4c6d554a6c64fc08b565a25a3%2Faes.py"),i(j,"rel","noopener"),i(j,"class","text-link"),i(j,"target","_blank"),i(G,"href","https://ctf.equinor.com/uploads?key=23c3bb3c9044a6d201c6d5347471ab131bcb4f4f5f823d011a1eb0b81bd333f7%2Fflag.png.enc"),i(G,"rel","noopener"),i(G,"class","text-link"),i(G,"target","_blank"),i(W,"href","https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),i(W,"rel","noopener"),i(W,"class","text-link"),i(W,"target","_blank")},m(a,c){r(a,d,c),n(d,q),r(a,A,c),r(a,C,c),n(C,f),n(f,O),r(a,pa,c),r(a,w,c),n(w,la),n(la,Xs),n(la,Za),n(Za,Ys),n(la,Ns),n(w,Qs),n(w,Ja),n(Ja,Zs),n(w,Js),n(w,Da),n(Da,at),n(Da,an),n(an,nt),n(w,st),n(w,za),n(za,tt),n(za,F),n(F,et),r(a,Zn,c),r(a,Sa,c),n(Sa,ot),r(a,Jn,c),r(a,ca,c),ca.innerHTML=yl,r(a,as,c),r(a,h,c),n(h,pt),n(h,H),n(H,lt),n(h,ct),n(h,nn),n(nn,rt),n(h,it),n(h,sn),n(sn,ut),n(h,kt),n(h,tn),n(tn,dt),n(h,ft),n(h,en),n(en,ht),n(h,xt),n(h,on),n(on,bt),n(h,_t),n(h,pn),n(pn,mt),n(h,wt),r(a,ns,c),r(a,D,c),n(D,yt),n(D,ln),n(ln,vt),n(D,gt),n(D,cn),n(cn,Et),n(D,Pt),r(a,ss,c),r(a,ra,c),ra.innerHTML=vl,r(a,ts,c),r(a,ia,c),n(ia,Ct),n(ia,rn),n(rn,Ot),r(a,es,c),r(a,ua,c),n(ua,Ra),n(Ra,Tt),r(a,os,c),r(a,y,c),n(y,un),n(un,qt),n(y,At),n(y,kn),n(kn,Dt),n(y,zt),n(y,dn),n(dn,St),n(y,Rt),n(y,La),n(La,Lt),n(La,U),n(U,Ft),r(a,ps,c),r(a,Y,c),n(Y,Ht),n(Y,fn),n(fn,Ut),n(Y,$t),r(a,ls,c),r(a,ka,c),ka.innerHTML=gl,r(a,cs,c),r(a,Fa,c),n(Fa,It),r(a,rs,c),r(a,da,c),da.innerHTML=El,r(a,is,c),r(a,Ha,c),n(Ha,Kt),r(a,us,c),r(a,fa,c),fa.innerHTML=Pl,r(a,ks,c),r(a,Ua,c),n(Ua,Mt),r(a,ds,c),r(a,ha,c),ha.innerHTML=Cl,r(a,fs,c),r(a,m,c),n(m,Bt),n(m,hn),n(hn,Vt),n(m,jt),n(m,xn),n(xn,Gt),n(m,Wt),n(m,bn),n(bn,Xt),n(m,Yt),n(m,$a),r(a,hs,c),r(a,N,c),n(N,Nt),n(N,_n),n(_n,Qt),n(N,Zt),r(a,xs,c),r(a,xa,c),xa.innerHTML=Ol,r(a,bs,c),r(a,ba,c),n(ba,Jt),n(ba,mn),n(mn,ae),r(a,_s,c),r(a,_a,c),n(_a,Ia),n(Ia,ne),r(a,ms,c),r(a,z,c),n(z,wn),n(wn,se),n(z,te),n(z,yn),n(yn,ee),n(z,oe),n(z,Q),n(Q,pe),n(Q,$),n($,le),n(Q,ce),n(Q,I),n(I,re),r(a,ws,c),r(a,v,c),n(v,ie),n(v,vn),n(vn,ue),n(v,ke),n(v,gn),n(gn,de),n(v,fe),n(v,En),n(En,he),n(v,xe),r(a,ys,c),r(a,ma,c),ma.innerHTML=Tl,r(a,vs,c),r(a,wa,c),wa.innerHTML=ql,r(a,gs,c),r(a,_,c),n(_,be),n(_,Pn),n(Pn,_e),n(_,me),n(_,Cn),n(Cn,we),n(_,ye),n(_,On),n(On,ve),n(_,ge),n(_,Tn),n(Tn,Ee),n(_,Pe),r(a,Es,c),r(a,x,c),n(x,Ce),n(x,qn),n(qn,Oe),n(x,Te),n(x,An),n(An,qe),n(x,Ae),n(x,Dn),n(Dn,De),n(x,ze),n(x,zn),n(zn,Se),n(x,Re),n(x,Sn),n(Sn,Le),n(x,Fe),r(a,Ps,c),r(a,ya,c),ya.innerHTML=Al,r(a,Cs,c),r(a,va,c),n(va,He),n(va,Rn),n(Rn,Ue),r(a,Os,c),r(a,ga,c),n(ga,Ka),n(Ka,$e),r(a,Ts,c),r(a,g,c),n(g,Ln),n(Ln,Ie),n(g,Ke),n(g,Fn),n(Fn,Me),n(g,Be),n(g,Ma),n(Ma,Ve),n(Ma,Ba),n(g,je),n(g,Va),n(Va,Ge),n(Va,K),n(K,We),r(a,qs,c),r(a,E,c),n(E,Xe),n(E,Hn),n(Hn,Ye),n(E,Ne),n(E,Un),n(Un,Qe),n(E,Ze),n(E,$n),n($n,Je),n(E,ao),r(a,As,c),r(a,Ea,c),Ea.innerHTML=Dl,r(a,Ds,c),r(a,Z,c),n(Z,no),n(Z,In),n(In,so),n(Z,to),r(a,zs,c),r(a,S,c),n(S,eo),n(S,Kn),n(Kn,oo),n(S,po),n(S,Mn),n(Mn,lo),n(S,co),r(a,Ss,c),r(a,T,c),n(T,ro),n(T,Bn),n(Bn,io),n(T,uo),n(T,M),n(M,ko),n(T,fo),n(T,B),n(B,ho),r(a,Rs,c),r(a,ja,c),n(ja,xo),r(a,Ls,c),r(a,Pa,c),Pa.innerHTML=zl,r(a,Fs,c),r(a,Ga,c),n(Ga,bo),r(a,Hs,c),r(a,Ca,c),Ca.innerHTML=Sl,r(a,Us,c),r(a,V,c),n(V,_o),n(V,Vn),n(Vn,mo),n(V,wo),n(V,jn),n(jn,yo),r(a,$s,c),r(a,Oa,c),n(Oa,Wa),n(Wa,vo),r(a,Is,c),r(a,R,c),n(R,Gn),n(Gn,go),n(R,Eo),n(R,Wn),n(Wn,Po),n(R,Co),n(R,J),n(J,Oo),n(J,j),n(j,To),n(J,qo),n(J,G),n(G,Ao),r(a,Ks,c),r(a,aa,c),n(aa,Do),n(aa,W),n(W,zo),n(aa,So),r(a,Ms,c),r(a,Ta,c),n(Ta,Ro),n(Ta,Xn),n(Xn,Lo)},p:tc,d(a){a&&s(d),a&&s(A),a&&s(C),a&&s(pa),a&&s(w),a&&s(Zn),a&&s(Sa),a&&s(Jn),a&&s(ca),a&&s(as),a&&s(h),a&&s(ns),a&&s(D),a&&s(ss),a&&s(ra),a&&s(ts),a&&s(ia),a&&s(es),a&&s(ua),a&&s(os),a&&s(y),a&&s(ps),a&&s(Y),a&&s(ls),a&&s(ka),a&&s(cs),a&&s(Fa),a&&s(rs),a&&s(da),a&&s(is),a&&s(Ha),a&&s(us),a&&s(fa),a&&s(ks),a&&s(Ua),a&&s(ds),a&&s(ha),a&&s(fs),a&&s(m),a&&s(hs),a&&s(N),a&&s(xs),a&&s(xa),a&&s(bs),a&&s(ba),a&&s(_s),a&&s(_a),a&&s(ms),a&&s(z),a&&s(ws),a&&s(v),a&&s(ys),a&&s(ma),a&&s(vs),a&&s(wa),a&&s(gs),a&&s(_),a&&s(Es),a&&s(x),a&&s(Ps),a&&s(ya),a&&s(Cs),a&&s(va),a&&s(Os),a&&s(ga),a&&s(Ts),a&&s(g),a&&s(qs),a&&s(E),a&&s(As),a&&s(Ea),a&&s(Ds),a&&s(Z),a&&s(zs),a&&s(S),a&&s(Ss),a&&s(T),a&&s(Rs),a&&s(ja),a&&s(Ls),a&&s(Pa),a&&s(Fs),a&&s(Ga),a&&s(Hs),a&&s(Ca),a&&s(Us),a&&s(V),a&&s($s),a&&s(Oa),a&&s(Is),a&&s(R),a&&s(Ks),a&&s(aa),a&&s(Ms),a&&s(Ta)}}}function pc(Aa){let d,q;const A=[Aa[0],wl];let C={$$slots:{default:[oc]},$$scope:{ctx:Aa}};for(let f=0;f<A.length;f+=1)C=jo(C,A[f]);return d=new ec({props:C}),{c(){Nl(d.$$.fragment)},l(f){Ql(d.$$.fragment,f)},m(f,O){Zl(d,f,O),q=!0},p(f,[O]){const pa=O&1?Jl(A,[O&1&&bl(f[0]),O&0&&bl(wl)]):{};O&2&&(pa.$$scope={dirty:O,ctx:f}),d.$set(pa)},i(f){q||(ac(d.$$.fragment,f),q=!0)},o(f){nc(d.$$.fragment,f),q=!1},d(f){sc(d,f)}}}const wl={title:"Equinor CTF 2021 Writeup",date:"2021-10-31",category:"writeup",tags:["equinor-ctf","ctf"]};function lc(Aa,d,q){return Aa.$$set=A=>{q(0,d=jo(jo({},d),_l(A)))},d=_l(d),[d]}class uc extends Wl{constructor(d){super(),Xl(this,d,lc,pc,Yl,{})}}export{uc as default,wl as metadata};
